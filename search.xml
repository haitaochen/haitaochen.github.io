<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
    
    <entry>
      <title><![CDATA[kafka小结]]></title>
      <url>http://haitaochen.github.io/2020/03/12/kafka%E5%B0%8F%E7%BB%93/</url>
      <content type="html"><![CDATA[<p>消息队列好处：1削峰2解耦3异步</p>
<p>消息队列的两种模式（或者说队列模型GitHub SnailClimb）</p>
<ul>
<li><p>一对一，消费者主动拉取数据，消息收到后消息清除</p>
</li>
<li><p>一对多，消费者消费数据之后不会清除消息，即一条消息可以由多个消费者消费</p>
<ul>
<li><p>一种队列主动退给消费者，但是各个消费者消费速度往往不一致（比如队列推的带宽是50M/s,消费者1的接受带宽是100M/s ,消费者2的接受带宽是10M/s;那么消费者1资源浪费，消费者2又吃不消）    </p>
</li>
<li><p>是消费者主动拉的（消费者的消费速度由自己决定；缺点是要维护一个长轮询，消费者要时不时地去看队列有没有新数据）</p>
</li>
</ul>
</li>
</ul>
<a id="more"></a>
<h4 id="架构（producer-consumer-topic-partition-broker）"><a href="#架构（producer-consumer-topic-partition-broker）" class="headerlink" title="架构（producer consumer topic partition broker）"></a>架构（producer consumer topic partition broker）</h4><p>分区原因：1并发度2负载均衡</p>
<p>Kafka文件存储机制（topic-partition-segment，.index,.log）</p>
<blockquote>
<p>由于生产者生产的消息会不断追加到 log 文件末尾，为防止 log 文件过大导致数据定位 </p>
<p>效率低下，Kafka 采取了<strong>分片</strong>和<strong>索引</strong>机制，将每个 partition 分为多个 segment。每个 segment </p>
<p>对应两个文件——“.index”文件和“.log”文件。</p>
</blockquote>
<h4 id="生产者"><a href="#生产者" class="headerlink" title="生产者"></a>生产者</h4><h5 id="生产者分区策略"><a href="#生产者分区策略" class="headerlink" title="生产者分区策略"></a>生产者分区策略</h5><p>1指明partition</p>
<p>2未指明partition但是有key.</p>
<p>3未指明partition也无key，用round robin，即：第一次调用时随机生成一个整数（后 面每次调用在这个整数上自增），将这个值与 topic 可用的 partition 总数取余得到 partition  值，也就是常说的 round-robin 算法</p>
<h5 id="ack（保证生产者的数据不丢）"><a href="#ack（保证生产者的数据不丢）" class="headerlink" title="ack（保证生产者的数据不丢）"></a>ack（保证生产者的数据不丢）</h5><ul>
<li>0– 会丢失数据</li>
<li>1– 会丢失数据</li>
<li>-1（all） – 会数据重复</li>
</ul>
<h5 id="ISR"><a href="#ISR" class="headerlink" title="ISR"></a>ISR</h5><p>当生产者给topic发数据时，且ack=-1,leader等待ISR里的follower同步完成后发送ack给producer。</p>
<h5 id="exactly-once（针对Producer-到-Server-之间）"><a href="#exactly-once（针对Producer-到-Server-之间）" class="headerlink" title="exactly once（针对Producer 到 Server 之间）"></a>exactly once（针对Producer 到 Server 之间）</h5><p>exactly once = at least once（由ack=-1保证） + 幂等性（由【开启幂等性的 Producer 在 </p>
<p>初始化的时候会被分配一个 PID，发往同一 Partition 的消息会附带 Sequence Number。而 </p>
<p>Broker 端会对<pid, partition,="" seqnumber="">做缓存，当具有相同主键的消息提交时，Broker 只 </pid,></p>
<p>会持久化一条。</p>
<p>】保证）</p>
<h4 id="消费者"><a href="#消费者" class="headerlink" title="消费者"></a>消费者</h4><h5 id="消费者分区分配策略"><a href="#消费者分区分配策略" class="headerlink" title="消费者分区分配策略"></a>消费者分区分配策略</h5><ul>
<li>round robin（就消费组而言的）【消费组中消费者订阅的主题集合里的分区1个1个地交给消费者集合】</li>
<li>range（默认）（就topic而言）【一个topic里的分区分摊给订阅它的消费者们，x个分区/y个消费者】【当消费者组里的消费者个数发生变化时会触发分配策略】</li>
</ul>
<h5 id="数据一致性问题-针对消费者消费数据时"><a href="#数据一致性问题-针对消费者消费数据时" class="headerlink" title="数据一致性问题(针对消费者消费数据时)"></a>数据一致性问题(针对消费者消费数据时)</h5><h6 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h6><p>leader未挂之前 L(leader) 消费到10条,F1(follower1）消费到8条，F2（follower2）消费到9条</p>
<p>假设L是leader，F1和F2是ISR中的2个follower，如果此时leader挂了，F1当选成新leader了，那么就存在一个问题：F1 有8条，F2有9条，F1和F2的数据不一致了。或者说leader挂了，F2当选成新leader了，然后L又活过来了，此时F2有9条，L有10条，数据也不一致。那么数据存储方面，3个副本存的不一样。那将来消费的时候都不一样。所以说这里有一个存储一致性的问题，这里就要提2个概念，HW和LEO</p>
<h6 id="两个概念"><a href="#两个概念" class="headerlink" title="两个概念"></a>两个概念</h6><ul>
<li>HW—消费一致性（消费时只消费到HW处）</li>
<li>LEO—存储一致性（存储时，当新leader起来之后，剩余的follower先截断至HW,再向leader同步）</li>
</ul>
<h5 id="Producer-API"><a href="#Producer-API" class="headerlink" title="Producer API"></a>Producer API</h5><p>消息发送流程【Kafka 的 Producer 发送消息采用的是异步发送的方式。在消息发送的过程中，涉及到了两个线程——main 线程和 Sender 线程，以及一个线程共享变量——RecordAccumulator。main 线程将消息发送给 RecordAccumulator，Sender 线程不断从 RecordAccumulator 中拉取消息发送到 Kafka broker。】</p>
<h5 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h5><ul>
<li><p>消费者只有第一次开启的时候去获取存在外部文件的offset</p>
</li>
<li><p>Offset自动提交会造成消费者这边的数据丢失（延迟比较短相当于先提交再处理【先提交了offset，之后处理过程一次性存不下太多数据，就只处理了部分数据，剩余数据就丢失了】）和数据重复（延迟比较长相当于先处理后提交【处理完了之后正准备提交offset，但此时提交offset的程序挂掉了，那offset提交不了，之后消费者又重发了一遍数据让你消费】）</p>
</li>
<li>手动提交offset（2种方式：同步提交、异步提交（都会在数据处理完之后提交offset，但是即便先处理后提交仍然存在数据重复问题可以结合关系型数据库的事务去解决）</li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[sparkstreaming小结]]></title>
      <url>http://haitaochen.github.io/2020/02/15/sparkstreaming%E5%B0%8F%E7%BB%93/</url>
      <content type="html"><![CDATA[<p>Dstream是spark streaming的一个基本抽象；如同rdd之于spark；只是一个类型的Dstream本质上是一系列连续的RDD，这些RDD只是要计算的数据不同，它们来自不同微批，源源不断。</p>
<p>sparkstreaming 的简单wordcount</p>
<figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> cn.cht.day9</div><div class="line"></div><div class="line"><span class="keyword">import</span> org.apache.spark.<span class="type">SparkConf</span></div><div class="line"><span class="keyword">import</span> org.apache.spark.streaming.dstream.&#123;<span class="type">DStream</span>, <span class="type">ReceiverInputDStream</span>&#125;</div><div class="line"><span class="keyword">import</span> org.apache.spark.streaming.kafka.<span class="type">KafkaUtils</span></div><div class="line"><span class="keyword">import</span> org.apache.spark.streaming.&#123;<span class="type">Seconds</span>, <span class="type">StreamingContext</span>&#125;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line">  * Created by zx on 2017/10/17.</div><div class="line">  */</div><div class="line"><span class="class"><span class="keyword">object</span> <span class="title">KafkaWordCount</span> </span>&#123;</div><div class="line"></div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</div><div class="line"></div><div class="line">    <span class="keyword">val</span> conf = <span class="keyword">new</span> <span class="type">SparkConf</span>().setAppName(<span class="string">"KafkaWordCount"</span>).setMaster(<span class="string">"local[2]"</span>)</div><div class="line"></div><div class="line">    <span class="keyword">val</span> ssc = <span class="keyword">new</span> <span class="type">StreamingContext</span>(conf, <span class="type">Seconds</span>(<span class="number">5</span>))</div><div class="line"></div><div class="line">    <span class="keyword">val</span> zkQuorum = <span class="string">"192.168.153.201:2181"</span></div><div class="line">    <span class="keyword">val</span> groupId = <span class="string">"g1"</span></div><div class="line">    <span class="keyword">val</span> topic = <span class="type">Map</span>[<span class="type">String</span>, <span class="type">Int</span>](<span class="string">"hello_topic"</span> -&gt; <span class="number">1</span>)<span class="comment">//1 好像是指定的线程数</span></div><div class="line"></div><div class="line">    <span class="comment">//创建DStream，需要KafkaDStream</span></div><div class="line">    <span class="keyword">val</span> data: <span class="type">ReceiverInputDStream</span>[(<span class="type">String</span>, <span class="type">String</span>)] = <span class="type">KafkaUtils</span>.createStream(ssc, zkQuorum, groupId, topic)</div><div class="line">    <span class="comment">//对数据进行处理</span></div><div class="line">    <span class="comment">//Kafak的ReceiverInputDStream[(String, String)]里面装的是一个元组（key是写入的key，value是实际写入的内容）</span></div><div class="line">    <span class="comment">//这个key的功能是到底要写到哪个分区里面，默认情况下没写就是空，空呢它使用的是轮询的方式将数据写到不同的分区里面；</span></div><div class="line">    <span class="comment">//其实这个key的功能好比是以前往数据里面写可以根据这个key到底写到哪个分区，其实它内部也有一个类似于hash的一个算法，将我们的数据写到kafka的哪个分区里面</span></div><div class="line">    <span class="keyword">val</span> lines: <span class="type">DStream</span>[<span class="type">String</span>] = data.map(_._2)</div><div class="line">    <span class="comment">//对DSteam进行操作，你操作这个抽象（代理，描述），就像操作一个本地的集合一样</span></div><div class="line">    <span class="comment">//切分压平</span></div><div class="line">    <span class="keyword">val</span> words: <span class="type">DStream</span>[<span class="type">String</span>] = lines.flatMap(_.split(<span class="string">" "</span>))</div><div class="line">    <span class="comment">//单词和一组合在一起</span></div><div class="line">    <span class="keyword">val</span> wordAndOne: <span class="type">DStream</span>[(<span class="type">String</span>, <span class="type">Int</span>)] = words.map((_, <span class="number">1</span>))</div><div class="line">    <span class="comment">//聚合</span></div><div class="line">    <span class="keyword">val</span> reduced: <span class="type">DStream</span>[(<span class="type">String</span>, <span class="type">Int</span>)] = wordAndOne.reduceByKey(_+_)</div><div class="line">    <span class="comment">//打印结果(Action)</span></div><div class="line">    reduced.print()</div><div class="line">    <span class="comment">//启动sparksteaming程序</span></div><div class="line">    ssc.start()</div><div class="line">    <span class="comment">//等待优雅的退出</span></div><div class="line">    ssc.awaitTermination()</div><div class="line"></div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>但是上面的程序只能统计一个微批次的结果，如果想要获得指定过去的几个微批的结果或者说要获取到历史总计聚合结果就需要能够进行有状态的编程。sparkstreaming提供了更新状态累加的updateStateBykey方法。</p>
<p>于是，wordcount可以改造成如下代码：</p>
<figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> cn.cht.day9</div><div class="line"></div><div class="line"><span class="keyword">import</span> org.apache.spark.&#123;<span class="type">HashPartitioner</span>, <span class="type">SparkConf</span>&#125;</div><div class="line"><span class="keyword">import</span> org.apache.spark.streaming.dstream.&#123;<span class="type">DStream</span>, <span class="type">ReceiverInputDStream</span>&#125;</div><div class="line"><span class="keyword">import</span> org.apache.spark.streaming.kafka.<span class="type">KafkaUtils</span></div><div class="line"><span class="keyword">import</span> org.apache.spark.streaming.&#123;<span class="type">Seconds</span>, <span class="type">StreamingContext</span>&#125;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line">  * Created by zx on 2017/10/17.</div><div class="line">  */</div><div class="line"><span class="class"><span class="keyword">object</span> <span class="title">StatefulKafkaWordCount</span> </span>&#123;</div><div class="line"></div><div class="line">  <span class="comment">/**</span></div><div class="line">    * 第一个参数：聚合的key，就是单词</div><div class="line">    * 第二个参数：当前批次产生批次该单词在每一个分区（当前这个批次里也有很多分区）出现的次数</div><div class="line">    * 第三个参数：初始值或累加的中间结果</div><div class="line">    * option有2个子类，有就是some 没有就是none；第一次没有初始值就是none，以后有初始值就是some</div><div class="line">    */</div><div class="line">  <span class="keyword">val</span> updateFunc = (iter: <span class="type">Iterator</span>[(<span class="type">String</span>, <span class="type">Seq</span>[<span class="type">Int</span>], <span class="type">Option</span>[<span class="type">Int</span>])]) =&gt; &#123;</div><div class="line">    <span class="comment">//iter.map(t =&gt; (t._1, t._2.sum + t._3.getOrElse(0)))</span></div><div class="line">    <span class="comment">// t._2.sum + t._3.getOrElse(0))指的是当前批次结果与历史结果相加</span></div><div class="line">    <span class="comment">//上面一行【iter.map(t =&gt; (t._1, t._2.sum + t._3.getOrElse(0)))】也可以用下面的模式匹配的方法</span></div><div class="line">    iter.map&#123; <span class="keyword">case</span>(x, y, z) =&gt; (x, y.sum + z.getOrElse(<span class="number">0</span>))&#125;</div><div class="line"></div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</div><div class="line"></div><div class="line">    <span class="keyword">val</span> conf = <span class="keyword">new</span> <span class="type">SparkConf</span>().setAppName(<span class="string">"StatefulKafkaWordCount"</span>).setMaster(<span class="string">"local[2]"</span>)</div><div class="line"></div><div class="line">    <span class="keyword">val</span> ssc = <span class="keyword">new</span> <span class="type">StreamingContext</span>(conf, <span class="type">Seconds</span>(<span class="number">5</span>))</div><div class="line"></div><div class="line">    <span class="comment">//如果要使用可更新历史数据（累加，因为需要把中间结果checkpoint 到磁盘上），那么就要把中间结果保存起来</span></div><div class="line">    ssc.checkpoint(<span class="string">"./ck"</span>)<span class="comment">//这里是指定的是当前的目录，以后提交集群运行应当指定一个hdfs目录</span></div><div class="line"></div><div class="line">    <span class="keyword">val</span> zkQuorum = <span class="string">"192.168.153.201:2181"</span></div><div class="line">    <span class="keyword">val</span> groupId = <span class="string">"g100"</span></div><div class="line">    <span class="keyword">val</span> topic = <span class="type">Map</span>[<span class="type">String</span>, <span class="type">Int</span>](<span class="string">"hello_topic"</span> -&gt; <span class="number">1</span>)</div><div class="line"></div><div class="line">    <span class="comment">//创建DStream，需要KafkaDStream</span></div><div class="line">    <span class="keyword">val</span> data: <span class="type">ReceiverInputDStream</span>[(<span class="type">String</span>, <span class="type">String</span>)] = <span class="type">KafkaUtils</span>.createStream(ssc, zkQuorum, groupId, topic)</div><div class="line">    <span class="comment">//对数据进行处理</span></div><div class="line">    <span class="comment">//Kafak的ReceiverInputDStream[(String, String)]里面装的是一个元组（key是写入的key，value是实际写入的内容）</span></div><div class="line">    <span class="keyword">val</span> lines: <span class="type">DStream</span>[<span class="type">String</span>] = data.map(_._2)</div><div class="line">    <span class="comment">//对DSteam进行操作，你操作这个抽象（代理，描述），就像操作一个本地的集合一样</span></div><div class="line">    <span class="comment">//切分压平</span></div><div class="line">    <span class="keyword">val</span> words: <span class="type">DStream</span>[<span class="type">String</span>] = lines.flatMap(_.split(<span class="string">" "</span>))</div><div class="line">    <span class="comment">//单词和一组合在一起</span></div><div class="line">    <span class="keyword">val</span> wordAndOne: <span class="type">DStream</span>[(<span class="type">String</span>, <span class="type">Int</span>)] = words.map((_, <span class="number">1</span>))</div><div class="line">    <span class="comment">//聚合</span></div><div class="line">    <span class="keyword">val</span> reduced: <span class="type">DStream</span>[(<span class="type">String</span>, <span class="type">Int</span>)] = wordAndOne.updateStateByKey(updateFunc, <span class="keyword">new</span> <span class="type">HashPartitioner</span>(ssc.sparkContext.defaultParallelism), <span class="literal">true</span>)</div><div class="line">    <span class="comment">//ssc.sparkContext.defaultParallelism 是默认的分区数量； true指定以后依然使用这个分区器</span></div><div class="line">    <span class="comment">//这边传了一个自己写的函数updateFunc，然后怎么就实现了累加上历史数据的功能的；好像有一部分逻辑封装到源码的val cleanedFunc = ssc.sc.clean(updateFunc)这一步里了吧----20200325更新：应该不是的。</span></div><div class="line">    <span class="comment">//打印结果(Action)</span></div><div class="line">    reduced.print()</div><div class="line">    <span class="comment">//启动sparksteaming程序</span></div><div class="line">    ssc.start()</div><div class="line">    <span class="comment">//等待优雅的退出</span></div><div class="line">    ssc.awaitTermination()</div><div class="line"></div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>但是上面程序仍然存在问题，当程序重启之后，不能接着上次消费的地方继续累加历史状态，而是重新以本次运行时间开始去进行累加的计算。</p>
<p>sparkStreaming和kafka整合的2种方式：</p>
<ul>
<li><p>Receiver方式</p>
<blockquote>
<p>采用高级的api去接收kafka中的数据，然后以自动更新偏移量的方式去提交偏移量。而且是达到固定时间才进行处理。这种方式容易丢数据，原因有：1：receiver可用内存满了，无法继续接收后续数据；2：一旦接收失败，receiver内存中已经接收的数据没有持久化；为了避免丢失，当达到某个阈值后把前面的数据写到磁盘里面，先读的数据写到磁盘里面（也就是WAL机制）；</p>
</blockquote>
</li>
<li><p>直连方式</p>
<blockquote>
<p>直连方式采用更底层的api,将kafka的分区数据直接对接到spark的分区上。来一条处理一条；手动维护偏移量，我理解如果是自动提交偏移量的话有可能出现：先处理完了后提交导致重复消费，先提交还没处理完导致数据丢失。自动提交偏移量的时延不好把握；当然先处理逻辑后手动提交也会有重复消费的问题，这个时候考虑把这两步结合到一个事务里来解决。而直连方式的累积需要结合外部的数据库（redis）去完成。</p>
</blockquote>
</li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[LeetCode刷题目录2]]></title>
      <url>http://haitaochen.github.io/2019/09/15/LeetCode%E5%88%B7%E9%A2%98%E7%9B%AE%E5%BD%952/</url>
      <content type="html"><![CDATA[<h2 id="树"><a href="#树" class="headerlink" title="树"></a>树</h2><h3 id="递归"><a href="#递归" class="headerlink" title="递归"></a>递归</h3><h4 id="1-树的高度"><a href="#1-树的高度" class="headerlink" title="1. 树的高度"></a>1. 树的高度</h4><h4 id="2-（判断是否）平衡树"><a href="#2-（判断是否）平衡树" class="headerlink" title="2. （判断是否）平衡树"></a>2. （判断是否）平衡树</h4><h4 id="3-两节点的最长路径"><a href="#3-两节点的最长路径" class="headerlink" title="3. 两节点的最长路径"></a>3. 两节点的最长路径</h4><a id="more"></a>
<h4 id="4-翻转树"><a href="#4-翻转树" class="headerlink" title="4. 翻转树"></a>4. 翻转树</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">输入：</div><div class="line">	 4</div><div class="line">   /   \</div><div class="line">  2     7</div><div class="line"> / \   / \</div><div class="line">1   3 6   9</div><div class="line">输出：</div><div class="line">     4</div><div class="line">   /   \</div><div class="line">  7     2</div><div class="line"> / \   / \</div><div class="line">9   6 3   1</div></pre></td></tr></table></figure>
<h4 id="5-归并两棵树"><a href="#5-归并两棵树" class="headerlink" title="5. 归并两棵树"></a>5. 归并两棵树</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">Input:</div><div class="line">       Tree 1                     Tree 2</div><div class="line">          1                         2</div><div class="line">         / \                       / \</div><div class="line">        3   2                     1   3</div><div class="line">       /                           \   \</div><div class="line">      5                             4   7</div><div class="line"></div><div class="line">Output:</div><div class="line">         3</div><div class="line">        / \</div><div class="line">       4   5</div><div class="line">      / \   \</div><div class="line">     5   4   7</div></pre></td></tr></table></figure>
<h4 id="6-判断路径和是否等于一个数"><a href="#6-判断路径和是否等于一个数" class="headerlink" title="6. 判断路径和是否等于一个数"></a>6. 判断路径和是否等于一个数</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">Given the below binary tree and sum = 22,</div><div class="line"></div><div class="line">              5</div><div class="line">             / \</div><div class="line">            4   8</div><div class="line">           /   / \</div><div class="line">          11  13  4</div><div class="line">         /  \      \</div><div class="line">        7    2      1</div><div class="line"></div><div class="line">return true, as there exist a root-to-leaf path 5-&gt;4-&gt;11-&gt;2 which sum is 22.</div></pre></td></tr></table></figure>
<h4 id="7-统计路径和等于一个数的路径数量"><a href="#7-统计路径和等于一个数的路径数量" class="headerlink" title="7. 统计路径和等于一个数的路径数量"></a>7. 统计路径和等于一个数的路径数量</h4><p>路径不一定以 root 开头，也不一定以 leaf 结尾，但是必须连续。</p>
<p>思路：在函数里定义一个withRoot的函数，在withRoot函数体里也进行递归调用</p>
<h4 id="8-子树"><a href="#8-子树" class="headerlink" title="8. 子树"></a>8. 子树</h4><p>思路：在函数里定义一个withRoot的函数，在withRoot函数体里也进行递归调用</p>
<h4 id="9-树的对称"><a href="#9-树的对称" class="headerlink" title="9. 树的对称"></a>9. 树的对称</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">   	1								</div><div class="line">   / \</div><div class="line">  2   2</div><div class="line"> / \ / \</div><div class="line">3  4 4  3  是对称。</div><div class="line"> </div><div class="line"> 	1</div><div class="line">   / \</div><div class="line">  2   2</div><div class="line">   \   \</div><div class="line">   3    3不是对称</div></pre></td></tr></table></figure>
<p>有点像8</p>
<h4 id="10-最小路径"><a href="#10-最小路径" class="headerlink" title="10. 最小路径"></a>10. 最小路径</h4><p>树的根节点到叶子节点的最小路径长度</p>
<p>思路：注意和求树的高度不同</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">minDepth</span><span class="params">(TreeNode root)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (root == <span class="keyword">null</span>) <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">    <span class="keyword">int</span> left = minDepth(root.left);</div><div class="line">    <span class="keyword">int</span> right = minDepth(root.right);</div><div class="line">    <span class="keyword">if</span> (left == <span class="number">0</span> || right == <span class="number">0</span>) <span class="keyword">return</span> left + right + <span class="number">1</span>;</div><div class="line">    <span class="keyword">return</span> Math.min(left, right) + <span class="number">1</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="11-统计左叶子节点的和"><a href="#11-统计左叶子节点的和" class="headerlink" title="11. 统计左叶子节点的和"></a>11. 统计左叶子节点的和</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">  	3</div><div class="line">   / \</div><div class="line">  9  20</div><div class="line">    /  \</div><div class="line">   15   7</div><div class="line"></div><div class="line">There are two left leaves in the binary tree, with values 9 and 15 respectively. Return 24.</div></pre></td></tr></table></figure>
<h4 id="12-相同节点值的最大路径长度"><a href="#12-相同节点值的最大路径长度" class="headerlink" title="12. 相同节点值的最大路径长度"></a>12. 相同节点值的最大路径长度</h4><p>给定一个二叉树，找到最长的路径，这个路径中的每个节点具有相同值。 这条路径可以经过也可以不经过根节点。</p>
<p><strong>注意</strong>：两个节点之间的路径长度由它们之间的边数表示。</p>
<pre><code>    5
   / \
  4   5
 / \   \
1   1   5   输出2
</code></pre><p>​<br>​                   1<br>​                 / \<br>​                4   5<br>​               / \   \<br>​              4   4   5   输出2</p>
<p>不好想。。</p>
<h4 id="13-间隔遍历"><a href="#13-间隔遍历" class="headerlink" title="13. 间隔遍历"></a>13. 间隔遍历</h4><p> 如果两个直接相连的房子在同一天晚上被打劫，房屋将自动报警。计算在不触动警报的情况下，小偷一晚能够盗取的最高金额。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">	 3</div><div class="line">    / \</div><div class="line">   2   3</div><div class="line">    \   \</div><div class="line">     3   1</div><div class="line">Maximum amount of money the thief can rob = 3 + 3 + 1 = 7.</div></pre></td></tr></table></figure>
<h4 id="14-找出二叉树中第二小的节点"><a href="#14-找出二叉树中第二小的节点" class="headerlink" title="14. 找出二叉树中第二小的节点"></a>14. 找出二叉树中第二小的节点</h4><p>给定一个非空特殊的二叉树，每个节点都是正数，并且每个节点的子节点数量只能为 2 或 0。如果一个节点有两个子节点的话，那么这个节点的值不大于它的子节点的值。 </p>
<p>给出这样的一个二叉树，你需要输出所有节点中的第二小的值。如果第二小的值不存在的话，输出 -1 。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">Input:</div><div class="line">   2</div><div class="line">  / \</div><div class="line"> 2   5</div><div class="line">    / \</div><div class="line">    5  7</div><div class="line"></div><div class="line">Output: 5</div></pre></td></tr></table></figure>
<h3 id="层次遍历"><a href="#层次遍历" class="headerlink" title="层次遍历"></a>层次遍历</h3><h4 id="1-一棵树每层节点的平均数"><a href="#1-一棵树每层节点的平均数" class="headerlink" title="1. 一棵树每层节点的平均数"></a>1. 一棵树每层节点的平均数</h4><h4 id="2-得到左下角的节点"><a href="#2-得到左下角的节点" class="headerlink" title="2. 得到左下角的节点"></a>2. 得到左下角的节点</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">Input:</div><div class="line"></div><div class="line">        1</div><div class="line">       / \</div><div class="line">      2   3</div><div class="line">     /   / \</div><div class="line">    4   5   6</div><div class="line">       /</div><div class="line">      7</div><div class="line"></div><div class="line">Output:</div><div class="line">7</div></pre></td></tr></table></figure>
<p>思路：层次遍历进队时先进右节点。</p>
<h3 id="前中后序遍历"><a href="#前中后序遍历" class="headerlink" title="前中后序遍历"></a>前中后序遍历</h3><h4 id="1-非递归实现二叉树的前序遍历"><a href="#1-非递归实现二叉树的前序遍历" class="headerlink" title="1. 非递归实现二叉树的前序遍历"></a>1. 非递归实现二叉树的前序遍历</h4><p>写法有点像层次遍历的写法，只不过用的是栈</p>
<h4 id="2-非递归实现二叉树的后序遍历"><a href="#2-非递归实现二叉树的后序遍历" class="headerlink" title="2. 非递归实现二叉树的后序遍历"></a>2. 非递归实现二叉树的后序遍历</h4><p>在非递归前序遍历基础上改造：</p>
<p>前序遍历为 root -&gt; left -&gt; right，后序遍历为 left -&gt; right -&gt; root。可以修改前序遍历成为 root -&gt; right -&gt; left，那么这个顺序就和后序遍历正好相反。</p>
<h4 id="3-非递归实现二叉树的中序遍历"><a href="#3-非递归实现二叉树的中序遍历" class="headerlink" title="3. 非递归实现二叉树的中序遍历"></a>3. 非递归实现二叉树的中序遍历</h4><p>思路：定义一个要伸到最左边的指针和一个栈，2层while循环。步骤：先伸到最左边，然后出栈入栈。</p>
<h3 id="二叉查找树（BST）"><a href="#二叉查找树（BST）" class="headerlink" title="二叉查找树（BST）"></a>二叉查找树（BST）</h3><h4 id="1-修剪二叉查找树"><a href="#1-修剪二叉查找树" class="headerlink" title="1. 修剪二叉查找树"></a>1. 修剪二叉查找树</h4><p>给定一个二叉搜索树，同时给定最小边界L 和最大边界 R。通过修剪二叉搜索树，使得所有节点的值在[L, R]中 (R&gt;=L) 。你可能需要改变树的根节点，所以结果应当返回修剪好的二叉搜索树的新的根节点。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">Input:</div><div class="line"></div><div class="line">    3</div><div class="line">   / \</div><div class="line">  0   4</div><div class="line">   \</div><div class="line">    2</div><div class="line">   /</div><div class="line">  1</div><div class="line"></div><div class="line">  L = 1</div><div class="line">  R = 3</div><div class="line"></div><div class="line">Output:</div><div class="line"></div><div class="line">      3</div><div class="line">     /</div><div class="line">   2</div><div class="line">  /</div><div class="line"> 1</div></pre></td></tr></table></figure>
<p>思路：递归</p>
<h4 id="2-寻找二叉查找树的第-k-个元素"><a href="#2-寻找二叉查找树的第-k-个元素" class="headerlink" title="2. 寻找二叉查找树的第 k 个元素"></a>2. 寻找二叉查找树的第 k 个元素</h4><p>思路:1中序遍历（不使用额外空间，中序递归遍历的过程中就去找k）2递归解法（）</p>
<h4 id="3-把二叉查找树每个节点的值都加上比它大的节点的值"><a href="#3-把二叉查找树每个节点的值都加上比它大的节点的值" class="headerlink" title="3. 把二叉查找树每个节点的值都加上比它大的节点的值"></a>3. 把二叉查找树每个节点的值都加上比它大的节点的值</h4><p>给定一个二叉搜索树（Binary Search Tree），把它转换成为累加树（Greater Tree)，使得每个节点的值是原来的节点值加上所有大于它的节点值之和。</p>
<p>例如：</p>
<p>输入: 二叉搜索树:<br>              5<br>            /   \<br>           2     13</p>
<p>输出: 转换为累加树:<br>             18<br>            /   \<br>          20     13</p>
<p>思路：递归。先遍历右子树。</p>
<h4 id="4-二叉查找树的最近公共祖先（LCA）"><a href="#4-二叉查找树的最近公共祖先（LCA）" class="headerlink" title="4. 二叉查找树的最近公共祖先（LCA）"></a>4. 二叉查找树的最近公共祖先（LCA）</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">        _______6______</div><div class="line">      /                \</div><div class="line">  ___2__             ___8__</div><div class="line"> /      \           /      \</div><div class="line">0        4         7        9</div><div class="line">        /  \</div><div class="line">       3   5</div><div class="line"></div><div class="line">For example, the lowest common ancestor (LCA) of nodes 2 and 8 is 6. Another example is LCA of nodes 2 and 4 is 2, since a node can be a descendant of itself according to the LCA definition.</div></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> TreeNode <span class="title">lowestCommonAncestor</span><span class="params">(TreeNode root, TreeNode p, TreeNode q)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (root.val &gt; p.val &amp;&amp; root.val &gt; q.val) <span class="keyword">return</span> lowestCommonAncestor(root.left, p, q);</div><div class="line">    <span class="keyword">if</span> (root.val &lt; p.val &amp;&amp; root.val &lt; q.val) <span class="keyword">return</span> lowestCommonAncestor(root.right, p, q);</div><div class="line">    <span class="keyword">return</span> root;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="5-二叉树的最近公共祖先-LCA"><a href="#5-二叉树的最近公共祖先-LCA" class="headerlink" title="5. 二叉树的最近公共祖先(LCA)"></a>5. 二叉树的最近公共祖先(LCA)</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">		____3______</div><div class="line">      /              \</div><div class="line">  ___5__           ___1__</div><div class="line"> /      \         /      \</div><div class="line"><span class="number">6</span>        <span class="number">2</span>       <span class="number">0</span>        <span class="number">8</span></div><div class="line">        /  \</div><div class="line">       <span class="number">7</span>    <span class="number">4</span></div><div class="line"></div><div class="line">For example, <span class="function">the lowest common <span class="title">ancestor</span> <span class="params">(LCA)</span> of nodes 5 and 1 is 3. Another example is LCA of nodes 5 and 4 is 5, since a node can be a descendant of itself according to the LCA definition.</span></div><div class="line"></div><div class="line"><span class="keyword">public</span> TreeNode <span class="title">lowestCommonAncestor</span><span class="params">(TreeNode root, TreeNode p, TreeNode q)</span> &#123;</div><div class="line">    <span class="keyword">if</span> (root == <span class="keyword">null</span> || root == p || root == q) <span class="keyword">return</span> root;</div><div class="line">    TreeNode left = lowestCommonAncestor(root.left, p, q);</div><div class="line">    TreeNode right = lowestCommonAncestor(root.right, p, q);</div><div class="line">    <span class="keyword">return</span> left == <span class="keyword">null</span> ? right : right == <span class="keyword">null</span> ? left : root;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="6-从有序数组中构造二叉查找树"><a href="#6-从有序数组中构造二叉查找树" class="headerlink" title="6. 从有序数组中构造二叉查找树"></a>6. 从有序数组中构造二叉查找树</h4><p>思路：递归，构造过程类似二分查找。数组索引中点即为根节点。</p>
<h4 id="7-根据有序链表构造平衡的二叉查找树"><a href="#7-根据有序链表构造平衡的二叉查找树" class="headerlink" title="7. 根据有序链表构造平衡的二叉查找树"></a>7. 根据有序链表构造平衡的二叉查找树</h4><p>思路：递归，同上。找链表的中点需要定义一组快慢指针。</p>
<h4 id="8-在二叉查找树中寻找两个节点，使它们的和为一个给定值"><a href="#8-在二叉查找树中寻找两个节点，使它们的和为一个给定值" class="headerlink" title="8. 在二叉查找树中寻找两个节点，使它们的和为一个给定值"></a>8. 在二叉查找树中寻找两个节点，使它们的和为一个给定值</h4><p><a href="https://leetcode.com/problems/two-sum-iv-input-is-a-bst/description/" target="_blank" rel="external">653. Two Sum IV - Input is a BST (Easy)</a></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">Input:</div><div class="line"></div><div class="line">    5</div><div class="line">   / \</div><div class="line">  3   6</div><div class="line"> / \   \</div><div class="line">2   4   7</div><div class="line"></div><div class="line">Target = 9</div><div class="line"></div><div class="line">Output: True</div></pre></td></tr></table></figure>
<p>使用中序遍历得到有序数组之后，再利用双指针对数组进行查找。</p>
<h4 id="9-在二叉查找树中查找两个节点之差的最小绝对值"><a href="#9-在二叉查找树中查找两个节点之差的最小绝对值" class="headerlink" title="9. 在二叉查找树中查找两个节点之差的最小绝对值"></a>9. 在二叉查找树中查找两个节点之差的最小绝对值</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">Input:</div><div class="line"></div><div class="line">   1</div><div class="line">    \</div><div class="line">     3</div><div class="line">    /</div><div class="line">   2</div><div class="line"></div><div class="line">Output:</div><div class="line"></div><div class="line">1</div></pre></td></tr></table></figure>
<p>利用二叉查找树的中序遍历为有序的性质，计算中序遍历中临近的两个节点之差的绝对值，取最小值。(在中序遍历递归过程中就进行最小值的比较)</p>
<h4 id="10-寻找二叉查找树中出现次数最多的值"><a href="#10-寻找二叉查找树中出现次数最多的值" class="headerlink" title="10. 寻找二叉查找树中出现次数最多的值"></a>10. 寻找二叉查找树中出现次数最多的值</h4><p>给定一个有相同值的二叉搜索树（BST），找出 BST 中的所有众数（出现频率最高的元素）。</p>
<p>假定 BST 有如下定义：</p>
<p>结点左子树中所含结点的值小于等于当前结点的值<br>结点右子树中所含结点的值大于等于当前结点的值<br>左子树和右子树都是二叉搜索树</p>
<p><strong>提示</strong>：如果众数超过1个，不需考虑输出顺序</p>
<p><strong>进阶：</strong>你可以不使用额外的空间吗？（假设由递归产生的隐式调用栈的开销不被计算在内）</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"> 1</div><div class="line">    \</div><div class="line">     2</div><div class="line">    /</div><div class="line">   2</div><div class="line"></div><div class="line">return [2].</div></pre></td></tr></table></figure>
<p>思路：中序遍历</p>
<h3 id="trie-todo"><a href="#trie-todo" class="headerlink" title="trie todo"></a>trie todo</h3><blockquote>
<p>1树的高度2平衡树3两节点的最长路径 在递归过程中都要算树的高度1 + Math.max(l, r);注意带根节点和不带根节点（6,7,8）；注意递归函数的参数是左右节点即2个参数时的递归出口条件<code>if (t1 == null &amp;&amp; t2 == null) return true;if (t1 == null || t2 == null) return false;</code> (8,9)</p>
<p>层次遍历写法；前中后序遍历非递归写法。</p>
<p>中序遍历在BST中的应用（2,8,9,10）；有序数组（链表）构造平衡二叉搜索树（6,7）；LCA(4,5)</p>
</blockquote>
<h2 id="分治"><a href="#分治" class="headerlink" title="分治"></a>分治</h2><h4 id="1-给表达式加括号"><a href="#1-给表达式加括号" class="headerlink" title="1. 给表达式加括号"></a>1. 给表达式加括号</h4><p>给定一个含有数字和运算符的字符串，为表达式添加括号，改变其运算优先级以求出不同的结果。你需要给出所有可能的组合的结果。有效的运算符号包含 +, - 以及 * 。</p>
<p>示例 1:</p>
<p>输入: “2-1-1”<br>输出: [0, 2]<br>解释:<br>((2-1)-1) = 0<br>(2-(1-1)) = 2</p>
<p>思路：分治，递归。遍历运算符，以运算符左右2边的可能性做组合。</p>
<h4 id="2-不同的二叉搜索树"><a href="#2-不同的二叉搜索树" class="headerlink" title="2. 不同的二叉搜索树"></a>2. 不同的二叉搜索树</h4><p>给定一个数字 n，要求生成所有值为 1…n 的二叉搜索树。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">Input: 3</div><div class="line">Output:</div><div class="line">[</div><div class="line">  [1,null,3,2],</div><div class="line">  [3,2,null,1],</div><div class="line">  [3,1,null,null,2],</div><div class="line">  [2,1,3],</div><div class="line">  [1,null,2,null,3]</div><div class="line">]</div><div class="line">Explanation:</div><div class="line">The above output corresponds to the 5 unique BST&apos;s shown below:</div><div class="line"></div><div class="line">   1         3     3      2      1</div><div class="line">    \       /     /      / \      \</div><div class="line">     3     2     1      1   3      2</div><div class="line">    /     /       \                 \</div><div class="line">   2     1         2                 3</div></pre></td></tr></table></figure>
<p>解法二 递归<br>解法一完全没有用到查找二叉树的性质，暴力尝试了所有可能从而造成了重复。我们可以利用一下查找二叉树的性质。左子树的所有值小于根节点，右子树的所有值大于根节点。</p>
<p>所以如果求 1…n 的所有可能。</p>
<p>我们只需要把 1 作为根节点，[ ] 空作为左子树，[ 2 … n ] 的所有可能作为右子树。</p>
<p>2 作为根节点，[ 1 ] 作为左子树，[ 3…n ] 的所有可能作为右子树。</p>
<p>3 作为根节点，[ 1 2 ] 的所有可能作为左子树，[ 4 … n ] 的所有可能作为右子树，然后左子树和右子树两两组合。</p>
<p>4 作为根节点，[ 1 2 3 ] 的所有可能作为左子树，[ 5 … n ] 的所有可能作为右子树，然后左子树和右子树两两组合。</p>
<p>…</p>
<p>n 作为根节点，[ 1… n ] 的所有可能作为左子树，[ ] 作为右子树。</p>
<p>至于，[ 2 … n ] 的所有可能以及 [ 4 … n ] 以及其他情况的所有可能，可以利用上边的方法，把每个数字作为根节点，然后把所有可能的左子树和右子树组合起来即可。</p>
<p>如果只有一个数字，那么所有可能就是一种情况，把该数字作为一棵树。而如果是 [ ]，那就返回 null。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> List&lt;TreeNode&gt; <span class="title">generateTrees</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;<span class="comment">//抄的</span></div><div class="line">        List&lt;TreeNode&gt; ans = <span class="keyword">new</span> ArrayList&lt;TreeNode&gt;();</div><div class="line">        <span class="keyword">if</span> (n == <span class="number">0</span>) &#123;</div><div class="line">            <span class="keyword">return</span> ans;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> getAns(<span class="number">1</span>, n);</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> List&lt;TreeNode&gt; <span class="title">getAns</span><span class="params">(<span class="keyword">int</span> start, <span class="keyword">int</span> end)</span> </span>&#123;</div><div class="line">        List&lt;TreeNode&gt; ans = <span class="keyword">new</span> ArrayList&lt;TreeNode&gt;();</div><div class="line">        <span class="comment">//此时没有数字，将 null 加入结果中</span></div><div class="line">        <span class="keyword">if</span> (start &gt; end) &#123;</div><div class="line">            ans.add(<span class="keyword">null</span>);</div><div class="line">            <span class="keyword">return</span> ans;</div><div class="line">        &#125;</div><div class="line">        <span class="comment">//只有一个数字，当前数字作为一棵树加入结果中</span></div><div class="line">        <span class="keyword">if</span> (start == end) &#123;</div><div class="line">            TreeNode tree = <span class="keyword">new</span> TreeNode(start);</div><div class="line">            ans.add(tree);</div><div class="line">            <span class="keyword">return</span> ans;</div><div class="line">        &#125;</div><div class="line">        <span class="comment">//尝试每个数字作为根节点</span></div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = start; i &lt;= end; i++) &#123;</div><div class="line">            <span class="comment">//得到所有可能的左子树</span></div><div class="line">            List&lt;TreeNode&gt; leftTrees = getAns(start, i - <span class="number">1</span>);</div><div class="line">            <span class="comment">//得到所有可能的右子树</span></div><div class="line">            List&lt;TreeNode&gt; rightTrees = getAns(i + <span class="number">1</span>, end);</div><div class="line">            <span class="comment">//左子树右子树两两组合</span></div><div class="line">            <span class="keyword">for</span> (TreeNode leftTree : leftTrees) &#123;</div><div class="line">                <span class="keyword">for</span> (TreeNode rightTree : rightTrees) &#123;</div><div class="line">                    TreeNode root = <span class="keyword">new</span> TreeNode(i);</div><div class="line">                    root.left = leftTree;</div><div class="line">                    root.right = rightTree;</div><div class="line">                    <span class="comment">//加入到最终结果中</span></div><div class="line">                    ans.add(root);</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> ans;</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<h2 id="动态规划"><a href="#动态规划" class="headerlink" title="动态规划"></a>动态规划</h2><h3 id="斐波那契数列"><a href="#斐波那契数列" class="headerlink" title="斐波那契数列"></a>斐波那契数列</h3><h4 id="爬楼梯，抢劫，环形抢劫（将首尾节点各自切掉之后得到2种情况后比大小）"><a href="#爬楼梯，抢劫，环形抢劫（将首尾节点各自切掉之后得到2种情况后比大小）" class="headerlink" title="爬楼梯，抢劫，环形抢劫（将首尾节点各自切掉之后得到2种情况后比大小）"></a>爬楼梯，抢劫，环形抢劫（将首尾节点各自切掉之后得到2种情况后比大小）</h4><h4 id="4-信件错排"><a href="#4-信件错排" class="headerlink" title="4. 信件错排"></a>4. 信件错排</h4><p>题目描述：有 N 个 信 和 信封，它们被打乱，求错误装信方式的数量。</p>
<p>定义一个数组 dp 存储错误方式数量，dp[i] 表示前 i 个信和信封的错误方式数量。假设第 i 个信装到第 j 个信封里面，而第 j 个信装到第 k 个信封里面。根据 i 和 k 是否相等，有两种情况：1：i==k,i!=k;</p>
<p>dp[i]  =  (i-1)<em>dp[i-2]   +  (i-1)</em>dp[i-1] </p>
<h4 id="母牛生产"><a href="#母牛生产" class="headerlink" title="母牛生产"></a>母牛生产</h4><p>dp[ i ]=dp[i-1]+dp[i-3]</p>
<h3 id="矩阵路径"><a href="#矩阵路径" class="headerlink" title="矩阵路径"></a>矩阵路径</h3><h4 id="1-矩阵的最小路径和2-矩阵的总路径数"><a href="#1-矩阵的最小路径和2-矩阵的总路径数" class="headerlink" title="1. 矩阵的最小路径和2. 矩阵的总路径数"></a>1. 矩阵的最小路径和2. 矩阵的总路径数</h4><p>题目描述：求从矩阵的左上角到右下角的最小路径和，每次只能向右和向下移动。</p>
<p>2道题不用额外空间的解法没看</p>
<h3 id="数组区间"><a href="#数组区间" class="headerlink" title="数组区间"></a>数组区间</h3><h4 id="1-数组区间和"><a href="#1-数组区间和" class="headerlink" title="1. 数组区间和"></a>1. 数组区间和</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">Given nums = [-2, 0, 3, -5, 2, -1]</div><div class="line"></div><div class="line">sumRange(0, 2) -&gt; 1</div><div class="line">sumRange(2, 5) -&gt; -1</div><div class="line">sumRange(0, 5) -&gt; -3</div></pre></td></tr></table></figure>
<p>求区间 i ~ j 的和，可以转换为 sum[j + 1] - sum[i]，其中 sum[i] 为 0 ~ i - 1 的和。</p>
<h4 id="2-数组中等差递增子区间的个数"><a href="#2-数组中等差递增子区间的个数" class="headerlink" title="2. 数组中等差递增子区间的个数"></a>2. 数组中等差递增子区间的个数</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">A = [0, 1, 2, 3, 4]</div><div class="line"></div><div class="line">return: 6, for 3 arithmetic slices in A:</div><div class="line"></div><div class="line">[0, 1, 2],</div><div class="line">[1, 2, 3],</div><div class="line">[0, 1, 2, 3],</div><div class="line">[0, 1, 2, 3, 4],</div><div class="line">[ 1, 2, 3, 4],</div><div class="line">[2, 3, 4]</div></pre></td></tr></table></figure>
<p>dp[i] 表示以 A[i] 为结尾的等差递增子区间的个数。</p>
<p>当 A[i] - A[i-1] == A[i-1] - A[i-2]，那么 [A[i-2], A[i-1], A[i]] 构成一个等差递增子区间。而且在以 A[i-1] 为结尾的递增子区间的后面再加上一个 A[i]，一样可以构成新的递增子区间。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">dp[2] = 1</div><div class="line">    [0, 1, 2]</div><div class="line">dp[3] = dp[2] + 1 = 2</div><div class="line">    [0, 1, 2, 3], // [0, 1, 2] 之后加一个 3</div><div class="line">    [1, 2, 3]     // 新的递增子区间</div><div class="line">dp[4] = dp[3] + 1 = 3</div><div class="line">    [0, 1, 2, 3, 4], // [0, 1, 2, 3] 之后加一个 4</div><div class="line">    [1, 2, 3, 4],    // [1, 2, 3] 之后加一个 4</div><div class="line">    [2, 3, 4]        // 新的递增子区间</div></pre></td></tr></table></figure>
<p>综上，在 A[i] - A[i-1] == A[i-1] - A[i-2] 时，dp[i] = dp[i-1] + 1。</p>
<p>因为递增子区间不一定以最后一个元素为结尾，可以是任意一个元素结尾，因此需要返回 dp 数组累加的结果。</p>
<p>cht注：抄的，当时不会做。。。。。</p>
<h3 id="分割整数"><a href="#分割整数" class="headerlink" title="分割整数"></a>分割整数</h3><h4 id="1-分割整数的最大乘积"><a href="#1-分割整数的最大乘积" class="headerlink" title="1. 分割整数的最大乘积"></a>1. 分割整数的最大乘积</h4><p>给定一个正整数 <em>n</em>，将其拆分为<strong>至少</strong>两个正整数的和，并使这些整数的乘积最大化。 返回你可以获得的最大乘积。</p>
<p>题目描述：For example, given n = 2, return 1 (2 = 1 + 1); given n = 10, return 36 (10 = 3 + 3 + 4).</p>
<p>思路：2层for循环，注意如果不拆分也有可能比拆分的乘积大。</p>
<h4 id="2-按平方数来分割整数"><a href="#2-按平方数来分割整数" class="headerlink" title="2. 按平方数来分割整数"></a>2. 按平方数来分割整数</h4><p>给定正整数 <em>n</em>，找到若干个完全平方数（比如 <code>1, 4, 9, 16, ...</code>）使得它们的和等于 <em>n</em>。你需要让组成和的完全平方数的个数最少。</p>
<p>题目描述：For example, given n = 12, return 3 because 12 = 4 + 4 + 4; given n = 13, return 2 because 13 = 4 + 9.</p>
<p>思路：我觉得我的解法更不错。</p>
<h4 id="3-分割整数构成字母字符串"><a href="#3-分割整数构成字母字符串" class="headerlink" title="3. 分割整数构成字母字符串"></a>3. 分割整数构成字母字符串</h4><p>一条包含字母 A-Z 的消息通过以下方式进行了编码：</p>
<p>‘A’ -&gt; 1<br>‘B’ -&gt; 2<br>…<br>‘Z’ -&gt; 26<br>给定一个只包含数字的非空字符串，请计算解码方法的总数。</p>
<p>示例 1:</p>
<p>输入: “12”<br>输出: 2<br>解释: 它可以解码为 “AB”（1 2）或者 “L”（12）。<br>示例 2:</p>
<p>输入: “226”<br>输出: 3<br>解释: 它可以解码为 “BZ” (2 26), “VF” (22 6), 或者 “BBF” (2 2 6) 。</p>
<p>抄的，当时不会做。</p>
<p>思路：dp[i]+=dp[i-1] ；如果当前数字与前一位组合的数字处于10-26时，再加dp[i-2]</p>
<h3 id="最长递增子序列"><a href="#最长递增子序列" class="headerlink" title="最长递增子序列"></a>最长递增子序列</h3><h4 id="1-最长递增子序列"><a href="#1-最长递增子序列" class="headerlink" title="1. 最长递增子序列"></a>1. 最长递增子序列</h4><p>给定一个无序的整数数组，找到其中最长上升子序列的长度。</p>
<p>思路：两层for循环，第二层循环里面遍历找到所有比当前数小的数，做memo[i]的重新赋值（和最大值比较再赋值）</p>
<h4 id="2-一组整数对能够构成的最长链"><a href="#2-一组整数对能够构成的最长链" class="headerlink" title="2. 一组整数对能够构成的最长链"></a>2. 一组整数对能够构成的最长链</h4><p>给出 n 个数对。 在每一个数对中，第一个数字总是比第二个数字小。</p>
<p>现在，我们定义一种跟随关系，当且仅当 b &lt; c 时，数对(c, d) 才可以跟在 (a, b) 后面。我们用这种形式来构造一个数对链。</p>
<p>给定一个对数集合，找出能够形成的最长数对链的长度。你不需要用到所有的数对，你可以以任何顺序选择其中的一些数对来构造。</p>
<p>示例 :</p>
<p>输入: [[1,2], [2,3], [3,4]]<br>输出: 2<br>解释: 最长的数对链是 [1,2] -&gt; [3,4]</p>
<p>思路：先排序，然后和上面一题一样。</p>
<h4 id="3-最长摆动子序列"><a href="#3-最长摆动子序列" class="headerlink" title="3. 最长摆动子序列"></a>3. 最长摆动子序列</h4><p>如果连续数字之间的差严格地在正数和负数之间交替，则数字序列称为摆动序列。第一个差（如果存在的话）可能是正数或负数。少于两个元素的序列也是摆动序列。</p>
<p>例如， [1,7,4,9,2,5] 是一个摆动序列，因为差值 (6,-3,5,-7,3) 是正负交替出现的。相反, [1,4,7,2,5] 和 [1,7,4,5,5] 不是摆动序列，第一个序列是因为它的前两个差值都是正数，第二个序列是因为它的最后一个差值为零。</p>
<p>给定一个整数序列，返回作为摆动序列的最长子序列的长度。 通过从原始序列中删除一些（也可以不删除）元素来获得子序列，剩下的元素保持其原始顺序。</p>
<p>思路：定义一个up和一个down，GitHub解法o(n);【牛逼的】</p>
<h3 id="最长公共子序列"><a href="#最长公共子序列" class="headerlink" title="最长公共子序列"></a>最长公共子序列</h3><p>思路：对于两个子序列 S1 和 S2，找出它们最长的公共子序列。</p>
<p>定义一个二维数组 dp 用来存储最长公共子序列的长度，其中 dp[i][j] 表示 S1 的前 i 个字符与 S2 的前 j 个字符最长公共子序列的长度。考虑 S1i 与 S2j 值是否相等，分为两种情况：</p>
<ul>
<li>当 S1i==S2j 时，那么就能在 S1 的前 i-1 个字符与 S2 的前 j-1 个字符最长公共子序列的基础上再加上 S1i 这个值，最长公共子序列长度加 1，即 dp[i][j] = dp[i-1][j-1] + 1。</li>
<li>当 S1i != S2j 时，此时最长公共子序列为 S1 的前 i-1 个字符和 S2 的前 j 个字符最长公共子序列，或者 S1 的前 i 个字符和 S2 的前 j-1 个字符最长公共子序列，取它们的最大者，即 dp[i][j] = max{ dp[i-1][j], dp[i][j-1] }。</li>
</ul>
<p>综上，最长公共子序列的状态转移方程为：</p>
<p><img src="https://raw.githubusercontent.com/CyC2018/CS-Notes/master/notes/pics/ecd89a22-c075-4716-8423-e0ba89230e9a.jpg" alt="image"></p>
<p>与最长递增子序列不同的是，而最长递增子序列中 dp[N] 不是最终解，因为以 Sn 为结尾的最长递增子序列不一定是整个序列最长递增子序列，需要遍历一遍 dp 数组找到最大者。</p>
<h3 id="0-1-背包"><a href="#0-1-背包" class="headerlink" title="0-1 背包"></a>0-1 背包</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">dp[i][j] 表示前 i 件物品体积不超过 j 的情况下能达到的最大价值。</div></pre></td></tr></table></figure>
<p><img src="https://tva4.sinaimg.cn/large/005R6Otmgy1g6z95mf9uxj30vy0ildqg.jpg" alt="image"></p>
<h4 id="1-划分数组为和相等的两部分"><a href="#1-划分数组为和相等的两部分" class="headerlink" title="1. 划分数组为和相等的两部分"></a>1. 划分数组为和相等的两部分</h4><p>可以看成一个背包大小为 sum/2 的 0-1 背包问题。只不过这里不要求求出最大的value，而是看能不能等于一个指定的value，因此函数返回boolean</p>
<p>部分函数体：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; size; i++) &#123;</div><div class="line">           <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; target + <span class="number">1</span>; j++) &#123;</div><div class="line">               dp[i][j] = dp[i - <span class="number">1</span>][j];</div><div class="line">               <span class="keyword">if</span> (j &gt;= nums[i]) &#123;</div><div class="line">                   dp[i][j] = dp[i - <span class="number">1</span>][j] || dp[i - <span class="number">1</span>][j - nums[i]];</div><div class="line">               &#125;</div><div class="line">           &#125;</div><div class="line">       &#125;</div></pre></td></tr></table></figure>
<h4 id="2-改变一组数的正负号使得它们的和为一给定数"><a href="#2-改变一组数的正负号使得它们的和为一给定数" class="headerlink" title="2. 改变一组数的正负号使得它们的和为一给定数"></a>2. 改变一组数的正负号使得它们的和为一给定数</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">Input: nums is [1, 1, 1, 1, 1], S is 3.</div><div class="line">Output: 5</div><div class="line">Explanation:</div><div class="line"></div><div class="line">-1+1+1+1+1 = 3</div><div class="line">+1-1+1+1+1 = 3</div><div class="line">+1+1-1+1+1 = 3</div><div class="line">+1+1+1-1+1 = 3</div><div class="line">+1+1+1+1-1 = 3</div><div class="line"></div><div class="line">There are 5 ways to assign symbols to make the sum of nums be target 3.</div></pre></td></tr></table></figure>
<p>该问题可以转换为 Subset Sum 问题，从而使用 0-1 背包的方法来求解。</p>
<p>可以将这组数看成两部分，P 和 N，其中 P 使用正号，N 使用负号，有以下推导：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">                  sum(P) - sum(N) = target</div><div class="line">sum(P) + sum(N) + sum(P) - sum(N) = target + sum(P) + sum(N)</div><div class="line">                       2 * sum(P) = target + sum(nums)</div></pre></td></tr></table></figure>
<p>因此只要找到一个子集，令它们都取正号，并且和等于 (target + sum(nums))/2，就证明存在解。</p>
<p>思路：1dp2dfs</p>
<h4 id="3-01-字符构成最多的字符串"><a href="#3-01-字符构成最多的字符串" class="headerlink" title="3. 01 字符构成最多的字符串"></a>3. 01 字符构成最多的字符串</h4><p>在计算机界中，我们总是追求用有限的资源获取最大的收益。</p>
<p>现在，假设你分别支配着 m 个 0 和 n 个 1。另外，还有一个仅包含 0 和 1 字符串的数组。</p>
<p>你的任务是使用给定的 m 个 0 和 n 个 1 ，找到能拼出存在于数组中的字符串的最大数量。每个 0 和 1 至多被使用一次。</p>
<p>注意:</p>
<p>给定 0 和 1 的数量都不会超过 100。<br>给定字符串数组的长度不会超过 600。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">示例 1:</div><div class="line"></div><div class="line">输入: Array = &#123;&quot;10&quot;, &quot;0001&quot;, &quot;111001&quot;, &quot;1&quot;, &quot;0&quot;&#125;, m = 5, n = 3</div><div class="line">输出: 4</div><div class="line"></div><div class="line">解释: 总共 4 个字符串可以通过 5 个 0 和 3 个 1 拼出，即 &quot;10&quot;,&quot;0001&quot;,&quot;1&quot;,&quot;0&quot; 。</div></pre></td></tr></table></figure>
<p>这是一个多维费用的 0-1 背包问题，有两个背包大小，0 的数量和 1 的数量</p>
<p>不看了，自己玩吧</p>
<h4 id="4-找零钱的最少硬币数"><a href="#4-找零钱的最少硬币数" class="headerlink" title="4. 找零钱的最少硬币数"></a>4. 找零钱的最少硬币数</h4><p>给定不同面额的硬币 coins 和一个总金额 amount。编写一个函数来计算可以凑成总金额所需的最少的硬币个数。如果没有任何一种硬币组合能组成总金额，返回 -1。</p>
<p>示例 1:</p>
<p>输入: coins = [1, 2, 5], amount = 11<br>输出: 3<br>解释: 11 = 5 + 5 + 1</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">coinChange</span><span class="params">(<span class="keyword">int</span>[] coins, <span class="keyword">int</span> amount)</span> </span>&#123;<span class="comment">//和背包没啥关系吧 直接用dp</span></div><div class="line">        memo = <span class="keyword">new</span> <span class="keyword">int</span>[amount+<span class="number">1</span>];</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; amount + <span class="number">1</span>; i++) &#123;</div><div class="line">            memo[i] = Integer.MAX_VALUE - <span class="number">1</span>;</div><div class="line">        &#125;</div><div class="line">        memo[<span class="number">0</span>] = <span class="number">0</span>;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; amount + <span class="number">1</span>; i++) &#123;</div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> coin:coins)&#123;</div><div class="line">                <span class="keyword">if</span>(coin&lt;=i)</div><div class="line">                    memo[i] = Math.min(memo[i],<span class="number">1</span> + memo[i-coin]);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> memo[amount] &gt; Integer.MAX_VALUE - <span class="number">2</span> ? -<span class="number">1</span> : memo[amount];</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<p>和背包没啥关系吧 直接用dp,徒手想。</p>
<h4 id="5-找零钱的硬币数组合"><a href="#5-找零钱的硬币数组合" class="headerlink" title="5. 找零钱的硬币数组合"></a>5. 找零钱的硬币数组合</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">输入: amount = 5, coins = [1, 2, 5]</div><div class="line">输出: 4</div><div class="line">解释: 有四种方式可以凑成总金额:</div><div class="line">5=5</div><div class="line">5=2+2+1</div><div class="line">5=2+1+1+1</div><div class="line">5=1+1+1+1+1</div><div class="line"></div><div class="line">来源：力扣（LeetCode）</div><div class="line">链接：https://leetcode-cn.com/problems/coin-change-2</div><div class="line">著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。</div></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">change</span><span class="params">(<span class="keyword">int</span> amount, <span class="keyword">int</span>[] coins)</span> </span>&#123;</div><div class="line">        <span class="keyword">int</span>[] memo = <span class="keyword">new</span> <span class="keyword">int</span>[amount+<span class="number">1</span>];</div><div class="line">        memo[<span class="number">0</span>] = <span class="number">1</span>;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> coin:coins)&#123;</div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = coin; i &lt; amount + <span class="number">1</span>; i++) &#123;<span class="comment">//注意先循环coins 再循环i-&gt;amount+1</span></div><div class="line">                    memo[i] += memo[i-coin];</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> memo[amount];</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<p>也不必刻意想成他所说的背包基础上的问题</p>
<h4 id="6-字符串按单词列表分割"><a href="#6-字符串按单词列表分割" class="headerlink" title="6. 字符串按单词列表分割"></a>6. 字符串按单词列表分割</h4><p>todo</p>
<h4 id="7-组合总和"><a href="#7-组合总和" class="headerlink" title="7. 组合总和"></a>7. 组合总和</h4><p>给定一个由正整数组成且不存在重复数字的数组，找出和为给定目标正整数的组合的个数。</p>
<p>todo</p>
<h3 id="股票交易"><a href="#股票交易" class="headerlink" title="股票交易"></a>股票交易</h3><h4 id="所有状态"><a href="#所有状态" class="headerlink" title="所有状态"></a>所有状态</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">dp[i][k][0 or 1]</div><div class="line">0 &lt;= i &lt;= n-1, 1 &lt;= k &lt;= K</div><div class="line">n 为天数，大 K 为最多交易数</div><div class="line">此问题共 n × K × 2 种状态，全部穷举就能搞定。</div><div class="line"></div><div class="line">for 0 &lt;= i &lt; n:</div><div class="line">    for 1 &lt;= k &lt;= K:</div><div class="line">        for s in &#123;0, 1&#125;:</div><div class="line">            dp[i][k][s] = max(buy, sell, rest)</div></pre></td></tr></table></figure>
<h4 id="状态转移框架"><a href="#状态转移框架" class="headerlink" title="状态转移框架"></a>状态转移框架</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">dp[i][k][0] = max(dp[i-1][k][0], dp[i-1][k][1] + prices[i])</div><div class="line">              max(   选择 rest  ,           选择 sell      )</div><div class="line"></div><div class="line">解释：今天我没有持有股票，有两种可能：</div><div class="line">要么是我昨天就没有持有，然后今天选择 rest，所以我今天还是没有持有；</div><div class="line">要么是我昨天持有股票，但是今天我 sell 了，所以我今天没有持有股票了。</div><div class="line"></div><div class="line">dp[i][k][1] = max(dp[i-1][k][1], dp[i-1][k-1][0] - prices[i])</div><div class="line">              max(   选择 rest  ,           选择 buy         )</div><div class="line"></div><div class="line">解释：今天我持有着股票，有两种可能：</div><div class="line">要么我昨天就持有着股票，然后今天选择 rest，所以我今天还持有着股票；</div><div class="line">要么我昨天本没有持有，但今天我选择 buy，所以今天我就持有股票了。</div></pre></td></tr></table></figure>
<h4 id="初始值"><a href="#初始值" class="headerlink" title="初始值"></a>初始值</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">dp[-1][k][0] = 0</div><div class="line">解释：因为 i 是从 0 开始的，所以 i = -1 意味着还没有开始，这时候的利润当然是 0 。</div><div class="line">dp[-1][k][1] = -infinity</div><div class="line">解释：还没开始的时候，是不可能持有股票的，用负无穷表示这种不可能。</div><div class="line">dp[i][0][0] = 0</div><div class="line">解释：因为 k 是从 1 开始的，所以 k = 0 意味着根本不允许交易，这时候利润当然是 0 。</div><div class="line">dp[i][0][1] = -infinity</div><div class="line">解释：不允许交易的情况下，是不可能持有股票的，用负无穷表示这种不可能。</div></pre></td></tr></table></figure>
<h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">base case：</div><div class="line">dp[-1][k][0] = dp[i][0][0] = 0</div><div class="line">dp[-1][k][1] = dp[i][0][1] = -infinity</div><div class="line"></div><div class="line">状态转移方程：</div><div class="line">dp[i][k][0] = max(dp[i-1][k][0], dp[i-1][k][1] + prices[i])</div><div class="line">dp[i][k][1] = max(dp[i-1][k][1], dp[i-1][k-1][0] - prices[i])</div><div class="line"></div><div class="line"></div><div class="line">我们想求的最终答案是 dp[n - 1][K][0]，即最后一天，最多允许 K 次交易，最多获得多少利润。</div></pre></td></tr></table></figure>
<h3 id="字符串编辑"><a href="#字符串编辑" class="headerlink" title="字符串编辑"></a>字符串编辑</h3><h4 id="1-删除两个字符串的字符使它们相等"><a href="#1-删除两个字符串的字符使它们相等" class="headerlink" title="1. 删除两个字符串的字符使它们相等"></a>1. 删除两个字符串的字符使它们相等</h4><p>给定两个单词 <em>word1</em> 和 <em>word2</em>，找到使得 <em>word1</em> 和 <em>word2</em> 相同所需的最小步数，每步可以删除任意一个字符串中的一个字符。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">Input: &quot;sea&quot;, &quot;eat&quot;</div><div class="line">Output: 2</div><div class="line">Explanation: You need one step to make &quot;sea&quot; to &quot;ea&quot; and another step to make &quot;eat&quot; to &quot;ea&quot;.</div></pre></td></tr></table></figure>
<p>思路：可以转换为求两个字符串的最长公共子序列问题。</p>
<blockquote>
<p>斐波拉切数列</p>
<p>爬楼梯，抢劫，环形抢劫（将首尾节点各自切掉之后得到2种情况后比大小）</p>
<p>数组区间</p>
<p>数组中等差递增子区间的个数：在 A[i] - A[i-1] == A[i-1] - A[i-2] 时，dp[i] = dp[i-1] + 1。</p>
<p>分治整数</p>
<p><strong>分割整数的最大乘积</strong>：2层for循环，注意如果不拆分也有可能比拆分的乘积大；思路：dp[i]+=dp[i-1] ；<strong>分割整数构成字母字符串</strong>：如果当前数字与前一位组合的数字处于10-26时，再加dp[i-2]；<strong>最长递增子序列思路</strong>：两层for循环，第二层循环里面遍历找到所有比当前数小的数，做memo[i]的重新赋值（和最大值比较再赋值）； <strong>一组整数对能够构成的最长链</strong>：先排序，然后和上面一题一样。<strong>最长摆动子序列</strong>：思路：定义一个up和一个down，GitHub解法o(n);【牛逼的】；<strong>最长公共子序列</strong>：考虑2种情况；</p>
<p>0-1 背包</p>
<p>dp [i] [j] = max（dp [i-1] [j]，dp [i-1] [j-w]  +  v）【空间优化：dp [ j ] = max(dp [j]  , dp [i-1] + v)】</p>
<p><strong>划分数组为和相等的两部分</strong>：可以看成一个背包大小为 sum/2 的 0-1 背包问题。<strong>改变一组数的正负号使得它们的和为一给定数</strong>：可以转换为 Subset Sum 问题；<strong>找零钱的最少硬币数</strong>； <strong>找零钱的硬币数组合</strong>；</p>
<p>股票交易</p>
</blockquote>
<h2 id="搜索"><a href="#搜索" class="headerlink" title="搜索"></a>搜索</h2><h3 id="BFS"><a href="#BFS" class="headerlink" title="BFS"></a>BFS</h3><h4 id="1-计算在网格中从原点到特定点的最短路径长度"><a href="#1-计算在网格中从原点到特定点的最短路径长度" class="headerlink" title="1. 计算在网格中从原点到特定点的最短路径长度"></a>1. 计算在网格中从原点到特定点的最短路径长度</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">[[1,1,0,1],</div><div class="line"> [1,0,1,0],</div><div class="line"> [1,1,1,1],</div><div class="line"> [1,0,1,1]]</div></pre></td></tr></table></figure>
<p>题目描述：1 表示可以经过某个位置，求解从 (0, 0) 位置到 (tr, tc) 位置的最短路径长度。</p>
<p>思路：BFS 就像层次遍历似的</p>
<h4 id="2-组成整数的最小平方数数量"><a href="#2-组成整数的最小平方数数量" class="headerlink" title="2. 组成整数的最小平方数数量"></a>2. 组成整数的最小平方数数量</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">For example, given n = 12, return 3 because 12 = 4 + 4 + 4; given n = 13, return 2 because 13 = 4 + 9.</div></pre></td></tr></table></figure>
<p>可以将每个整数看成图中的一个节点，如果两个整数之差为一个平方数，那么这两个整数所在的节点就有一条边。</p>
<p>要求解最小的平方数数量，就是求解从节点 n 到节点 0 的最短路径。</p>
<p>思路：注意队列加标记</p>
<h4 id="3-最短单词路径（单词接龙）"><a href="#3-最短单词路径（单词接龙）" class="headerlink" title="3. 最短单词路径（单词接龙）"></a>3. 最短单词路径（单词接龙）</h4><p>给定两个单词（beginWord 和 endWord）和一个字典，找到从 beginWord 到 endWord 的最短转换序列的长度。转换需遵循如下规则：</p>
<p>每次转换只能改变一个字母。<br>转换过程中的中间单词必须是字典中的单词。</p>
<p>说明:</p>
<p>如果不存在这样的转换序列，返回 0。<br>所有单词具有相同的长度。<br>所有单词只由小写字母组成。<br>字典中不存在重复的单词。<br>你可以假设 beginWord 和 endWord 是非空的，且二者不相同。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">Input:</div><div class="line">beginWord = &quot;hit&quot;,</div><div class="line">endWord = &quot;cog&quot;,</div><div class="line">wordList = [&quot;hot&quot;,&quot;dot&quot;,&quot;dog&quot;,&quot;lot&quot;,&quot;log&quot;,&quot;cog&quot;]</div><div class="line"></div><div class="line">Output: 5</div><div class="line"></div><div class="line">Explanation: As one shortest transformation is &quot;hit&quot; -&gt; &quot;hot&quot; -&gt; &quot;dot&quot; -&gt; &quot;dog&quot; -&gt; &quot;cog&quot;,</div><div class="line">return its length 5.</div><div class="line">Input:</div><div class="line">beginWord = &quot;hit&quot;</div><div class="line">endWord = &quot;cog&quot;</div><div class="line">wordList = [&quot;hot&quot;,&quot;dot&quot;,&quot;dog&quot;,&quot;lot&quot;,&quot;log&quot;]</div><div class="line"></div><div class="line">Output: 0</div><div class="line"></div><div class="line">Explanation: The endWord &quot;cog&quot; is not in wordList, therefore no possible transformation.</div></pre></td></tr></table></figure>
<p>思路：步骤和准备工作比较多，但终究还是BFS，注意图的节点存的是字符串在wordlist里的索引，不是字符串本身。</p>
<h3 id="DFS"><a href="#DFS" class="headerlink" title="DFS"></a>DFS</h3><h4 id="1-查找最大的连通面积"><a href="#1-查找最大的连通面积" class="headerlink" title="1. 查找最大的连通面积"></a>1. 查找最大的连通面积</h4><p>给定一个包含了一些 0 和 1的非空二维数组 grid , 一个 岛屿 是由四个方向 (水平或垂直) 的 1 (代表土地) 构成的组合。你可以假设二维矩阵的四个边缘都被水包围着。</p>
<p>找到给定的二维数组中最大的岛屿面积。(如果没有岛屿，则返回面积为0。)</p>
<p>示例 1:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">[[0,0,1,0,0,0,0,1,0,0,0,0,0],</div><div class="line"> [0,0,0,0,0,0,0,1,1,1,0,0,0],</div><div class="line"> [0,1,1,0,1,0,0,0,0,0,0,0,0],</div><div class="line"> [0,1,0,0,1,1,0,0,1,0,1,0,0],</div><div class="line"> [0,1,0,0,1,1,0,0,1,1,1,0,0],</div><div class="line"> [0,0,0,0,0,0,0,0,0,0,1,0,0],</div><div class="line"> [0,0,0,0,0,0,0,1,1,1,0,0,0],</div><div class="line"> [0,0,0,0,0,0,0,1,1,0,0,0,0]]</div></pre></td></tr></table></figure>
<p>对于上面这个给定矩阵应返回 <code>6</code>。注意答案不应该是11，因为岛屿只能包含水平或垂直的四个方向的‘1’。</p>
<p>思路：递归，标记</p>
<h4 id="2-矩阵中的连通分量数目"><a href="#2-矩阵中的连通分量数目" class="headerlink" title="2. 矩阵中的连通分量数目"></a>2. 矩阵中的连通分量数目</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">Input:</div><div class="line">11000</div><div class="line">11000</div><div class="line">00100</div><div class="line">00011</div><div class="line"></div><div class="line">Output: 3</div></pre></td></tr></table></figure>
<p>求岛屿的数量</p>
<p>思路：递归，标记，与上题不同的是DFS 不返回值，作用仅仅是把可以连通的标记置为‘0’</p>
<h4 id="3-好友关系的连通分量数目"><a href="#3-好友关系的连通分量数目" class="headerlink" title="3. 好友关系的连通分量数目"></a>3. 好友关系的连通分量数目</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">Input:</div><div class="line">[[1,1,0],</div><div class="line"> [1,1,0],</div><div class="line"> [0,0,1]]</div><div class="line"></div><div class="line">Output: 2</div><div class="line"></div><div class="line">Explanation:The 0th and 1st students are direct friends, so they are in a friend circle.</div><div class="line">The 2nd student himself is in a friend circle. So return 2.</div></pre></td></tr></table></figure>
<p>题目描述：好友关系可以看成是一个无向图，例如第 0 个人与第 1 个人是好友，那么 M[0][1] 和 M[1][0] 的值都为 1。</p>
<p>思路：递归，标记；与上题不同的是：上题是个无向图，这里是有向图，主函数只要一层循环，还需要一个一维数组。</p>
<h4 id="4-填充封闭区域"><a href="#4-填充封闭区域" class="headerlink" title="4. 填充封闭区域"></a>4. 填充封闭区域</h4><p>给定一个二维的矩阵，包含 ‘X’ 和 ‘O’（字母 O）。</p>
<p>找到所有被 ‘X’ 围绕的区域，并将这些区域里所有的 ‘O’ 用 ‘X’ 填充。</p>
<p>示例:</p>
<p>X X X X<br>X O O X<br>X X O X<br>X O X X<br>运行你的函数后，矩阵变为：</p>
<p>X X X X<br>X X X X<br>X X X X<br>X O X X<br>解释:</p>
<p>被围绕的区间不会存在于边界上，换句话说，任何边界上的 ‘O’ 都不会被填充为 ‘X’。 任何不在边界上，或不与边界上的 ‘O’ 相连的 ‘O’ 最终都会被填充为 ‘X’。如果两个元素在水平或垂直方向相邻，则称它们是“相连”的。</p>
<p>思路：先填充最外侧，剩下的就是里侧了。（把外侧的O换成T,最后遍历时把所有O换成X,所有T换成O）</p>
<h4 id="5-能到达的太平洋和大西洋的区域"><a href="#5-能到达的太平洋和大西洋的区域" class="headerlink" title="5. 能到达的太平洋和大西洋的区域"></a>5. 能到达的太平洋和大西洋的区域</h4><p>给定一个 m x n 的非负整数矩阵来表示一片大陆上各个单元格的高度。“太平洋”处于大陆的左边界和上边界，而“大西洋”处于大陆的右边界和下边界。</p>
<p>规定水流只能按照上、下、左、右四个方向流动，且只能从高到低或者在同等高度上流动。</p>
<p>请找出那些水流既可以流动到“太平洋”，又能流动到“大西洋”的陆地单元的坐标。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">Given the following 5x5 matrix:</div><div class="line"></div><div class="line">  Pacific ~   ~   ~   ~   ~</div><div class="line">       ~  1   2   2   3  (5) *</div><div class="line">       ~  3   2   3  (4) (4) *</div><div class="line">       ~  2   4  (5)  3   1  *</div><div class="line">       ~ (6) (7)  1   4   5  *</div><div class="line">       ~ (5)  1   1   2   4  *</div><div class="line">          *   *   *   *   * Atlantic</div><div class="line"></div><div class="line">Return:</div><div class="line">[[0, 4], [1, 3], [1, 4], [2, 2], [3, 0], [3, 1], [4, 0]] (positions with parentheses in above matrix).</div></pre></td></tr></table></figure>
<p>思路：先填充最外侧<code>for (int i = 0; i &lt; m; i++) {...}</code> <code>for (int i = 0; i &lt; n; i++) {...}</code></p>
<h3 id="回溯"><a href="#回溯" class="headerlink" title="回溯"></a>回溯</h3><h4 id="1-数字键盘组合"><a href="#1-数字键盘组合" class="headerlink" title="1. 数字键盘组合"></a>1. 数字键盘组合</h4><p>给定一个仅包含数字 <code>2-9</code> 的字符串，返回所有它能表示的字母组合。</p>
<p>给出数字到字母的映射如下（与电话按键相同）。注意 1 不对应任何字母。</p>
<p><a href="https://github.com/CyC2018/CS-Notes/blob/master/notes/pics/9823768c-212b-4b1a-b69a-b3f59e07b977.jpg" target="_blank" rel="external"><img src="https://github.com/CyC2018/CS-Notes/raw/master/notes/pics/9823768c-212b-4b1a-b69a-b3f59e07b977.jpg" alt="img"></a></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">Input:Digit string &quot;23&quot;</div><div class="line">Output: [&quot;ad&quot;, &quot;ae&quot;, &quot;af&quot;, &quot;bd&quot;, &quot;be&quot;, &quot;bf&quot;, &quot;cd&quot;, &quot;ce&quot;, &quot;cf&quot;].</div></pre></td></tr></table></figure>
<p>思路：递归的函数：先写出口条件，再写循环，循环里：先写追加元素，然后递归调用，最后删除（回退）；我的解法由于函数最后一个参数传的是s+new str 这种形式，所以不用回退。【also in mk】。我的解法需要一个全局的list在递归出口处add（s）,s来保存当前已有元素。</p>
<h4 id="2-IP-地址划分"><a href="#2-IP-地址划分" class="headerlink" title="2. IP 地址划分"></a>2. IP 地址划分</h4><p>给定一个只包含数字的字符串，复原它并返回所有可能的 IP 地址格式。</p>
<p>示例:</p>
<p>输入: “25525511135”<br>输出: [“255.255.11.135”, “255.255.111.35”]</p>
<p>思路：【also in mk】需要一个全局list：ans 在递归出口处add一个叫cur的List，cur来保存当前已有元素</p>
<p>// 该题可以看成如何分割串（分割完之后再split）</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// cur : 当前答案，以 String List的形式，最后再join成String形式 例如 [[255],[255],[111],[35]] -&gt; 255.255.111.35</span></div><div class="line"><span class="comment">// pos, 当前扫描到的s的位置， ans最终答案</span></div><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">backtracking</span><span class="params">(String s, <span class="keyword">int</span> pos, List&lt;String&gt; cur,  List&lt;String&gt; ans)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (cur.size() &gt;= <span class="number">4</span>) &#123;</div><div class="line">        <span class="keyword">if</span> (pos == s.length()) ans.add(String.join(<span class="string">"."</span>, cur));</div><div class="line">        <span class="keyword">return</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="comment">// 分割得到ip地址的一段后，下一段只能在长度1-3范围内选择</span></div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">3</span>; i++) &#123;</div><div class="line">        <span class="keyword">if</span> (pos+i &gt; s.length()) <span class="keyword">break</span>;</div><div class="line">        String segment = s.substring(pos, pos+i);</div><div class="line">        <span class="comment">// 剪枝条件：不能以0开头，不能大于255</span></div><div class="line">        <span class="keyword">if</span> (segment.startsWith(<span class="string">"0"</span>) &amp;&amp; segment.length() &gt; <span class="number">1</span> || (i == <span class="number">3</span> &amp;&amp; Integer.parseInt(segment) &gt; <span class="number">255</span>)) <span class="keyword">continue</span>;</div><div class="line">        cur.add(segment);</div><div class="line">        <span class="comment">// 注意此处传的参数</span></div><div class="line">        backtracking(s, pos+i, cur, ans);</div><div class="line">        cur.remove(cur.size()-<span class="number">1</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">public</span> List&lt;String&gt; <span class="title">restoreIpAddresses</span><span class="params">(String s)</span> </span>&#123;</div><div class="line">    List&lt;String&gt; ans = <span class="keyword">new</span> ArrayList&lt;&gt;();</div><div class="line">    backtracking(s, <span class="number">0</span>, <span class="keyword">new</span> ArrayList&lt;&gt;(), ans);</div><div class="line">    <span class="keyword">return</span> ans;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="3-在矩阵中寻找字符串"><a href="#3-在矩阵中寻找字符串" class="headerlink" title="3. 在矩阵中寻找字符串"></a>3. 在矩阵中寻找字符串</h4><p>【also in mk】</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">For example,</div><div class="line">Given board =</div><div class="line">[</div><div class="line">  [&apos;A&apos;,&apos;B&apos;,&apos;C&apos;,&apos;E&apos;],</div><div class="line">  [&apos;S&apos;,&apos;F&apos;,&apos;C&apos;,&apos;S&apos;],</div><div class="line">  [&apos;A&apos;,&apos;D&apos;,&apos;E&apos;,&apos;E&apos;]</div><div class="line">]</div><div class="line">word = &quot;ABCCED&quot;, -&gt; returns true,</div><div class="line">word = &quot;SEE&quot;, -&gt; returns true,</div><div class="line">word = &quot;ABCB&quot;, -&gt; returns false.</div></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">private</span> <span class="keyword">int</span> r;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> c;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span>[][] direction = &#123;&#123;<span class="number">1</span>,<span class="number">0</span>&#125;,&#123;-<span class="number">1</span>,<span class="number">0</span>&#125;,&#123;<span class="number">0</span>,<span class="number">1</span>&#125;,&#123;<span class="number">0</span>,-<span class="number">1</span>&#125;&#125;;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span>[][] visited ;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">exist</span><span class="params">(<span class="keyword">char</span>[][] board, String word)</span> </span>&#123;<span class="comment">//用的是 慕课算法提供的思路</span></div><div class="line">        <span class="keyword">if</span> (word == <span class="keyword">null</span> || word.length() == <span class="number">0</span>) &#123;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span> (board == <span class="keyword">null</span> || board.length == <span class="number">0</span> || board[<span class="number">0</span>].length == <span class="number">0</span>) &#123;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">int</span> r = board.length;</div><div class="line">        <span class="keyword">int</span> c = board[<span class="number">0</span>].length;</div><div class="line">        <span class="keyword">this</span>.r = r;</div><div class="line">        <span class="keyword">this</span>.c = c;</div><div class="line">        visited = <span class="keyword">new</span> <span class="keyword">boolean</span>[r][c];</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; r; i++) &#123;</div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; c; j++) &#123;</div><div class="line">                <span class="keyword">if</span>(foo(board,word,<span class="number">0</span>,i,j))</div><div class="line">                    <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">foo</span><span class="params">(<span class="keyword">char</span>[][] board, String word, <span class="keyword">int</span> index,<span class="keyword">int</span> i,<span class="keyword">int</span> j)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span>(index==word.length()-<span class="number">1</span>)&#123;</div><div class="line">            <span class="keyword">return</span> board[i][j] == word.charAt(index);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span>(board[i][j]==word.charAt(index))&#123;</div><div class="line">            visited[i][j] = <span class="keyword">true</span>;</div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span>[] arr:direction)&#123;</div><div class="line">                <span class="keyword">int</span> newI = i+arr[<span class="number">0</span>];</div><div class="line">                <span class="keyword">int</span> newJ = j+arr[<span class="number">1</span>];</div><div class="line">                <span class="keyword">if</span>((newI&gt;=<span class="number">0</span>&amp;&amp;newI&lt;r&amp;&amp;newJ&gt;=<span class="number">0</span>&amp;&amp;newJ&lt;c)&amp;&amp;!visited[newI][newJ]&amp;&amp;foo(board,word,index+<span class="number">1</span>,newI,newJ))</div><div class="line">                    <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">            &#125;</div><div class="line">            visited[i][j] = <span class="keyword">false</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<p>需要一个访问标记数组</p>
<h4 id="4-输出二叉树中所有从根到叶子的路径"><a href="#4-输出二叉树中所有从根到叶子的路径" class="headerlink" title="4. 输出二叉树中所有从根到叶子的路径"></a>4. 输出二叉树中所有从根到叶子的路径</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">  1</div><div class="line"> /  \</div><div class="line">2    3</div><div class="line"> \</div><div class="line">  5</div><div class="line">[&quot;1-&gt;2-&gt;5&quot;, &quot;1-&gt;3&quot;]</div></pre></td></tr></table></figure>
<p>思路：我的解法没有回退的操作，是因为：我在传字符串时是 以 s + newstr 的形式。而GitHub解法需要一个全局的List：paths,在isLead() 为true 时 add 一个叫values的list。</p>
<h4 id="5-排列"><a href="#5-排列" class="headerlink" title="5. 排列"></a>5. 排列</h4><p>给定一个没有重复数字的序列，返回其所有可能的全排列。</p>
<p>示例:</p>
<p>输入: [1,2,3]<br>输出:<br>[<br>  [1,2,3],<br>  [1,3,2],<br>  [2,1,3],<br>  [2,3,1],<br>  [3,1,2],<br>  [3,2,1]<br>]</p>
<p>思路：可以看到需要一个全局的list 在递归出口时 add(curList),一个当前元素的list：curList。一个访问标记数组</p>
<h4 id="6-含有相同元素求排列"><a href="#6-含有相同元素求排列" class="headerlink" title="6. 含有相同元素求排列"></a>6. 含有相同元素求排列</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">1,1,2] have the following unique permutations:</div><div class="line">[[1,1,2], [1,2,1], [2,1,1]]</div></pre></td></tr></table></figure>
<p>数组元素可能含有相同的元素，进行排列时就有可能出现重复的排列，要求重复的排列只返回一个。</p>
<p>在实现上，和 Permutations 不同的是要先排序，然后在添加一个元素时，判断这个元素是否等于前一个元素，如果等于，并且前一个元素还未访问，那么就跳过这个元素。</p>
<h4 id="7-组合"><a href="#7-组合" class="headerlink" title="7. 组合"></a>7. 组合</h4><p>给定两个整数 <em>n</em> 和 <em>k</em>，返回 1 … <em>n</em> 中所有可能的 <em>k</em> 个数的组合。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">If n = 4 and k = 2, a solution is:</div><div class="line">[</div><div class="line">  [2,4],</div><div class="line">  [3,4],</div><div class="line">  [2,3],</div><div class="line">  [1,2],</div><div class="line">  [1,3],</div><div class="line">  [1,4],</div><div class="line">]</div></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = start; i &lt;= n ); i++) &#123;</div></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//还有k-item.size()个空位，所以[i...n]中至少要有k-item.size()个元素</span></div><div class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = start; i &lt;= n + <span class="number">1</span> - (k - item.size()); i++) &#123;<span class="comment">//剪枝</span></div></pre></td></tr></table></figure>
<h4 id="8-组合求和"><a href="#8-组合求和" class="headerlink" title="8. 组合求和"></a>8. 组合求和</h4><p>给定一个无重复元素的数组 candidates 和一个目标数 target ，找出 candidates 中所有可以使数字和为 target 的组合。</p>
<p>candidates 中的数字可以无限制重复被选取。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">given candidate set [2, 3, 6, 7] and target 7,</div><div class="line">A solution set is:</div><div class="line">[[7],[2, 2, 3]]</div></pre></td></tr></table></figure>
<h4 id="9-含有相同元素的组合求和"><a href="#9-含有相同元素的组合求和" class="headerlink" title="9. 含有相同元素的组合求和"></a>9. 含有相同元素的组合求和</h4><p>给定一个数组 candidates 和一个目标数 target ，找出 candidates 中所有可以使数字和为 target 的组合。</p>
<p>candidates 中的每个数字在每个组合中只能使用一次。</p>
<p>说明：</p>
<p>所有数字（包括目标数）都是正整数。<br>解集不能包含重复的组合。 </p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">For example, given candidate set [10, 1, 2, 7, 6, 1, 5] and target 8,</div><div class="line">A solution set is:</div><div class="line">[</div><div class="line">  [1, 7],</div><div class="line">  [1, 2, 5],</div><div class="line">  [2, 6],</div><div class="line">  [1, 1, 6]</div><div class="line">]</div></pre></td></tr></table></figure>
<p>注意：和6一样：先排序，在添加一个元素时，判断这个元素是否等于前一个元素，如果等于，并且前一个元素还未访问，那么就跳过这个元素。</p>
<h4 id="10-1-9-数字的组合求和"><a href="#10-1-9-数字的组合求和" class="headerlink" title="10. 1-9 数字的组合求和"></a>10. 1-9 数字的组合求和</h4><p>找出所有相加之和为 n 的 k 个数的组合。组合中只允许含有 1 - 9 的正整数，并且每种组合中不存在重复的数字。</p>
<p>说明：</p>
<p>所有数字都是正整数。<br>解集不能包含重复的组合。 </p>
<h4 id="11-子集"><a href="#11-子集" class="headerlink" title="11. 子集"></a>11. 子集</h4><p>给定一组<strong>不含重复元素</strong>的整数数组 <em>nums</em>，返回该数组所有可能的子集（幂集）。</p>
<p><strong>说明：</strong>解集不能包含重复的子集。</p>
<p>also in mk</p>
<p>总结：对于解集不能包含重复的组合，像11,10,9（还有8，7）；for循环都得从start开始</p>
<h4 id="12-含有相同元素求子集"><a href="#12-含有相同元素求子集" class="headerlink" title="12. 含有相同元素求子集"></a>12. 含有相同元素求子集</h4><p>给定一个可能包含重复元素的整数数组 <strong><em>nums</em></strong>，返回该数组所有可能的子集（幂集）。</p>
<p><strong>说明：</strong>解集不能包含重复的子集。</p>
<p>相比11，先排序，在添加一个元素时，判断这个元素是否等于前一个元素，如果等于，并且前一个元素还未访问，那么就跳过这个元素。</p>
<h4 id="13-分割字符串使得每个部分都是回文数"><a href="#13-分割字符串使得每个部分都是回文数" class="headerlink" title="13. 分割字符串使得每个部分都是回文数"></a>13. 分割字符串使得每个部分都是回文数</h4><p>给定一个字符串 <em>s</em>，将 <em>s</em> 分割成一些子串，使每个子串都是回文串。</p>
<p>返回 <em>s</em> 所有可能的分割方案。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">For example, given s = &quot;aab&quot;,</div><div class="line">Return</div><div class="line"></div><div class="line">[</div><div class="line">  [&quot;aa&quot;,&quot;b&quot;],</div><div class="line">  [&quot;a&quot;,&quot;a&quot;,&quot;b&quot;]</div><div class="line">]</div></pre></td></tr></table></figure>
<p>思路：也是for(i=start…..)</p>
<h4 id="14-数独"><a href="#14-数独" class="headerlink" title="14. 数独"></a>14. 数独</h4><p>todo</p>
<h4 id="15-N-皇后"><a href="#15-N-皇后" class="headerlink" title="15. N 皇后"></a>15. N 皇后</h4><p><img src="https://tva2.sinaimg.cn/large/005R6Otmgy1g70f71833fj30gi08wdi7.jpg" alt="image"></p>
<p>返回所有解法</p>
<p>思路：定义一个列访问位数组，一个正对角线访问位数组（i+j），一个斜对角线访问位数组(i-j)</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[LeetCode刷题目录]]></title>
      <url>http://haitaochen.github.io/2019/09/15/LeetCode%E5%88%B7%E9%A2%98%E7%9B%AE%E5%BD%95/</url>
      <content type="html"><![CDATA[<h3 id="链表"><a href="#链表" class="headerlink" title="链表"></a>链表</h3><h4 id="1-找出两个链表的交点"><a href="#1-找出两个链表的交点" class="headerlink" title="1. 找出两个链表的交点"></a>1. 找出两个链表的交点</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">例如以下示例中 A 和 B 两个链表相交于 c1：</div><div class="line"></div><div class="line">​```html</div><div class="line">A:          a1 → a2</div><div class="line">                    ↘</div><div class="line">                      c1 → c2 → c3</div><div class="line">                    ↗</div><div class="line">B:    b1 → b2 → b3</div></pre></td></tr></table></figure>
<p>输出那个ListNode c1<br><a id="more"></a><br>思路：合并成一个相同链表考虑。</p>
<p>设 A 的长度为 a + c，B 的长度为 b + c，其中 c 为尾部公共部分长度，可知 a + c + b = b + c + a。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">如果只是判断是否存在交点，那么就是另一个问题，即 [编程之美 3.6]() 的问题。有两种解法：</div><div class="line"></div><div class="line">- 把第一个链表的结尾连接到第二个链表的开头，看第二个链表是否存在环；</div><div class="line">- 或者直接比较两个链表的最后一个节点是否相同。</div></pre></td></tr></table></figure>
<h4 id="2-链表反转"><a href="#2-链表反转" class="headerlink" title="2. 链表反转"></a>2. 链表反转</h4><p><strong>示例:</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">输入: 1-&gt;2-&gt;3-&gt;4-&gt;5-&gt;NULL</div><div class="line">输出: 5-&gt;4-&gt;3-&gt;2-&gt;1-&gt;NULL</div></pre></td></tr></table></figure>
<p>思路：递归/头插法</p>
<h4 id="3-归并两个有序的链表"><a href="#3-归并两个有序的链表" class="headerlink" title="3. 归并两个有序的链表"></a>3. 归并两个有序的链表</h4><p><strong>示例：</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">输入：1-&gt;2-&gt;4, 1-&gt;3-&gt;4</div><div class="line">输出：1-&gt;1-&gt;2-&gt;3-&gt;4-&gt;4</div></pre></td></tr></table></figure>
<p>思路：递归（递归出口不太好想）/迭代</p>
<h4 id="4-从有序链表中删除重复节点"><a href="#4-从有序链表中删除重复节点" class="headerlink" title="4. 从有序链表中删除重复节点"></a>4. 从有序链表中删除重复节点</h4><p><strong>示例 1:</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">输入: 1-&gt;1-&gt;2</div><div class="line">输出: 1-&gt;2</div></pre></td></tr></table></figure>
<p><strong>示例 2:</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">输入: 1-&gt;1-&gt;2-&gt;3-&gt;3</div><div class="line">输出: 1-&gt;2-&gt;3</div></pre></td></tr></table></figure>
<p>思路：1直接法2（比较前后值）尾插法3递归（注意递归出口）</p>
<h4 id="5-删除链表的倒数第-n-个节点"><a href="#5-删除链表的倒数第-n-个节点" class="headerlink" title="5. 删除链表的倒数第 n 个节点"></a>5. 删除链表的倒数第 n 个节点</h4><p><strong>示例：</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">给定一个链表: 1-&gt;2-&gt;3-&gt;4-&gt;5, 和 n = 2.</div><div class="line"></div><div class="line">当删除了倒数第二个节点后，链表变为 1-&gt;2-&gt;3-&gt;5.</div></pre></td></tr></table></figure>
<p><strong>进阶：</strong></p>
<p>你能尝试使用一趟扫描实现吗？</p>
<p>思路：1两趟很容易想到2一趟用双指针（指针保持n距离往后移到null）</p>
<h4 id="6-交换链表中的相邻结点"><a href="#6-交换链表中的相邻结点" class="headerlink" title="6. 交换链表中的相邻结点"></a>6. 交换链表中的相邻结点</h4><p>给定一个链表，两两交换其中相邻的节点，并返回交换后的链表。</p>
<p>你不能只是单纯的改变节点内部的值，而是需要实际的进行节点交换。</p>
<p>示例:</p>
<p>给定 1-&gt;2-&gt;3-&gt;4, 你应该返回 2-&gt;1-&gt;4-&gt;3.</p>
<p>思路：就常规思路。</p>
<h4 id="7-链表求和"><a href="#7-链表求和" class="headerlink" title="7. 链表求和"></a>7. 链表求和</h4><p>进阶:</p>
<p>如果输入链表不能修改该如何处理？换句话说，你不能对列表中的节点进行翻转。</p>
<p>示例:</p>
<p>输入: (7 -&gt; 2 -&gt; 4 -&gt; 3) + (5 -&gt; 6 -&gt; 4)<br>输出: 7 -&gt; 8 -&gt; 0 -&gt; 7</p>
<p>思路：1用到翻转2用栈做two sum 进位相加</p>
<h4 id="8-回文链表"><a href="#8-回文链表" class="headerlink" title="8. 回文链表"></a>8. 回文链表</h4><p>请判断一个链表是否为回文链表。</p>
<p><strong>示例 1:</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">输入: 1-&gt;2</div><div class="line">输出: false</div></pre></td></tr></table></figure>
<p><strong>示例 2:</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">输入: 1-&gt;2-&gt;2-&gt;1</div><div class="line">输出: true</div></pre></td></tr></table></figure>
<p>思路：</p>
<p>切成两半【用fast slow 找出中间的节点】（如果不切，想把整个串反转再比较 不行 会破坏链表结构），把后半段反转，然后比较两半是否相等。</p>
<h4 id="9-分隔链表"><a href="#9-分隔链表" class="headerlink" title="9. 分隔链表"></a>9. 分隔链表</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">Input:</div><div class="line">root = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], k = 3</div><div class="line">Output: [[1, 2, 3, 4], [5, 6, 7], [8, 9, 10]]</div><div class="line"></div><div class="line">输入: </div><div class="line">root = [1, 2, 3], k = 5</div><div class="line">输出: [[1],[2],[3],[],[]]</div></pre></td></tr></table></figure>
<p>思路：就运用链表，分成几份，把最后的next置成null</p>
<h4 id="10-链表元素按奇偶聚集"><a href="#10-链表元素按奇偶聚集" class="headerlink" title="10. 链表元素按奇偶聚集"></a>10. 链表元素按奇偶聚集</h4><p>请注意，这里的奇数节点和偶数节点指的是节点编号的奇偶性，而不是节点的值的奇偶性。</p>
<p><strong>Example 1:</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">Input: 1-&gt;2-&gt;3-&gt;4-&gt;5-&gt;NULL</div><div class="line">Output: 1-&gt;3-&gt;5-&gt;2-&gt;4-&gt;NULL</div></pre></td></tr></table></figure>
<p><strong>Example 2:</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">Input: 2-&gt;1-&gt;3-&gt;5-&gt;6-&gt;4-&gt;7-&gt;NULL</div><div class="line">Output: 2-&gt;3-&gt;6-&gt;7-&gt;1-&gt;5-&gt;4-&gt;NULL</div></pre></td></tr></table></figure>
<p>思路：用链表，3个指针，注意while条件</p>
<blockquote>
<p>总结：有不少题目可以用递归解体，但要注意出口条件（2,3,4）；题设参数给出的链表往往第一个节点就是值节点，我们编代码时可以加上一个头结点方便理解；尾插法会移动头结点位置，头插法不会，但是头插法需要记住上一个新增的节点位置；某些时候可以把新增一个链表作为思路（头/尾插法）；注意双指针，栈等数据结构使用</p>
</blockquote>
<h3 id="双指针"><a href="#双指针" class="headerlink" title="双指针"></a>双指针</h3><h4 id="1-有序数组的-Two-Sum"><a href="#1-有序数组的-Two-Sum" class="headerlink" title="1. 有序数组的 Two Sum"></a>1. 有序数组的 Two Sum</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">Input: numbers=&#123;2, 7, 11, 15&#125;, target=9</div><div class="line">Output: index1=1, index2=2</div></pre></td></tr></table></figure>
<p>题目描述：在有序数组中找出两个数，使它们的和为 target。</p>
<p>思路：双指针，一头一尾。</p>
<h4 id="2-两数平方和"><a href="#2-两数平方和" class="headerlink" title="2. 两数平方和"></a>2. 两数平方和</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">Input: 5</div><div class="line">Output: True</div><div class="line">Explanation: 1 * 1 + 2 * 2 = 5</div></pre></td></tr></table></figure>
<p>题目描述：判断一个数是否为两个数的平方和。</p>
<p>思路：双指针，一头一尾（尾指向开方位置即可）。</p>
<h4 id="3-反转字符串中的元音字符"><a href="#3-反转字符串中的元音字符" class="headerlink" title="3. 反转字符串中的元音字符"></a>3. 反转字符串中的元音字符</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Given s = &quot;leetcode&quot;, return &quot;leotcede&quot;.</div></pre></td></tr></table></figure>
<p>思路：双指针，一头一尾，注意if 分支书写。</p>
<h4 id="4-回文字符串"><a href="#4-回文字符串" class="headerlink" title="4. 回文字符串"></a>4. 回文字符串</h4><p>示例 1:</p>
<p>输入: “aba”<br>输出: True<br>示例 2:</p>
<p>输入: “abca”<br>输出: True<br>解释: 你可以删除c字符。<br>注意:</p>
<p>字符串只包含从 a-z 的小写字母。字符串的最大长度是50000。</p>
<p>思路：首尾指针，首尾端字母不等式，选其中一端删除字母后比较剩余字符串是否为回文串（思路比较自然，好想）</p>
<h4 id="5-归并两个有序数组"><a href="#5-归并两个有序数组" class="headerlink" title="5. 归并两个有序数组"></a>5. 归并两个有序数组</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">Input:</div><div class="line">nums1 = [1,2,3,0,0,0], m = 3</div><div class="line">nums2 = [2,5,6],       n = 3</div><div class="line"></div><div class="line">Output: [1,2,2,3,5,6]</div></pre></td></tr></table></figure>
<p>题目描述：把归并结果存到第一个数组上。</p>
<p>思路：双指针（均指向尾部），从尾向头可以省去额外空间，注意if分支；</p>
<h4 id="6-判断链表是否存在环"><a href="#6-判断链表是否存在环" class="headerlink" title="6. 判断链表是否存在环"></a>6. 判断链表是否存在环</h4><p><strong>示例 1：</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">输入：head = [3,2,0,-4], pos = 1</div><div class="line">输出：true</div><div class="line">解释：链表中有一个环，其尾部连接到第二个节点。</div></pre></td></tr></table></figure>
<p><img src="https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2018/12/07/circularlinkedlist.png" alt="img"></p>
<p>思路：</p>
<p>使用双指针，一个指针每次移动一个节点，一个指针每次移动两个节点，如果存在环，那么这两个指针一定会相遇。</p>
<h4 id="7-最长子序列"><a href="#7-最长子序列" class="headerlink" title="7. 最长子序列"></a>7. 最长子序列</h4><p>给定一个字符串和一个字符串字典，找到字典里面最长的字符串，该字符串可以通过删除给定字符串的某些字符来得到。如果答案不止一个，返回长度最长且字典顺序最小的字符串。如果答案不存在，则返回空字符串。</p>
<p>示例 1:</p>
<p>输入:<br>s = “abpcplea”, d = [“ale”,”apple”,”monkey”,”plea”]</p>
<p>输出:<br>“apple”</p>
<p>思路：双指针首先还是比较好想到，但在循环中更巧妙地筛选出字典序和长度条件不符的字符串 不太好想</p>
<h3 id="数组与矩阵"><a href="#数组与矩阵" class="headerlink" title="数组与矩阵"></a>数组与矩阵</h3><h4 id="1-把数组中的-0-移到末尾"><a href="#1-把数组中的-0-移到末尾" class="headerlink" title="1. 把数组中的 0 移到末尾"></a>1. 把数组中的 0 移到末尾</h4><p>给定一个数组 nums，编写一个函数将所有 0 移动到数组的末尾，同时保持非零元素的相对顺序。</p>
<p>示例:</p>
<p>输入: [0,1,0,3,12]<br>输出: [1,3,12,0,0]<br>说明:</p>
<p>必须在原数组上操作，不能拷贝额外的数组。<br>尽量减少操作次数。</p>
<p>思路：1o(n)解法2o(n方)解法（我用的交换）。</p>
<h4 id="2-改变矩阵维度"><a href="#2-改变矩阵维度" class="headerlink" title="2. 改变矩阵维度"></a>2. 改变矩阵维度</h4><p>给出一个由二维数组表示的矩阵，以及两个正整数<code>r</code>和<code>c</code>，分别表示想要的重构的矩阵的行数和列数。</p>
<p>重构后的矩阵需要将原始矩阵的所有元素以相同的<strong>行遍历顺序</strong>填充。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">输入: </div><div class="line">nums = </div><div class="line">[[1,2],</div><div class="line"> [3,4]]</div><div class="line">r = 1, c = 4</div><div class="line">输出: </div><div class="line">[[1,2,3,4]]</div><div class="line">解释:</div><div class="line">行遍历nums的结果是 [1,2,3,4]。新的矩阵是 1 * 4 矩阵, 用之前的元素值一行一行填充新矩阵。</div><div class="line"></div><div class="line"></div><div class="line">输入: </div><div class="line">nums = </div><div class="line">[[1,2],</div><div class="line"> [3,4]]</div><div class="line">r = 2, c = 4</div><div class="line">输出: </div><div class="line">[[1,2],</div><div class="line"> [3,4]]</div><div class="line"> 解释:</div><div class="line">没有办法将 2 * 2 矩阵转化为 2 * 4 矩阵。 所以输出原矩阵。</div></pre></td></tr></table></figure>
<p>思路：循环遍历。</p>
<h4 id="3-找出数组中最长的连续-1"><a href="#3-找出数组中最长的连续-1" class="headerlink" title="3. 找出数组中最长的连续 1"></a>3. 找出数组中最长的连续 1</h4><p>给定一个二进制数组， 计算其中最大连续1的个数。</p>
<p>示例 1:</p>
<p>输入: [1,1,0,1,1,1]<br>输出: 3<br>解释: 开头的两位和最后的三位都是连续1，所以最大连续1的个数是 3.</p>
<p>思路：正常想。</p>
<h4 id="4-有序矩阵查找"><a href="#4-有序矩阵查找" class="headerlink" title="4. 有序矩阵查找"></a>4. 有序矩阵查找</h4><p>编写一个高效的算法来搜索 m x n 矩阵 matrix 中的一个目标值 target。该矩阵具有以下特性：</p>
<p>每行的元素从左到右升序排列。<br>每列的元素从上到下升序排列。<br>示例:</p>
<p>现有矩阵 matrix 如下：</p>
<p>[<br>  [1,   4,  7, 11, 15],<br>  [2,   5,  8, 12, 19],<br>  [3,   6,  9, 16, 22],<br>  [10, 13, 14, 17, 24],<br>  [18, 21, 23, 26, 30]<br>]<br>给定 target = 5，返回 true。</p>
<p>给定 target = 20，返回 false。</p>
<p>思路：1递归（我的解法）2正常循环遍历（GitHub解法）row=0,col=列数-1，target小row++,target大col–;</p>
<h4 id="5-有序矩阵的-Kth-Element"><a href="#5-有序矩阵的-Kth-Element" class="headerlink" title="5. 有序矩阵的 Kth Element"></a>5. 有序矩阵的 Kth Element</h4><p>给定一个 n x n 矩阵，其中每行和每列元素均按升序排序，找到矩阵中第k小的元素。<br>请注意，它是排序后的第k小元素，而不是第k个元素。</p>
<p>示例:</p>
<p>matrix = [<br>   [ 1,  5,  9],<br>   [10, 11, 13],<br>   [12, 13, 15]<br>],<br>k = 8,</p>
<p>返回 13。</p>
<p>思路：1二分查找（GitHub解法）2堆解法：a.小顶堆里面放n*n个元素，删除k-1个元素，剩下来的堆顶元素即为所找。（GitHub解法）b.往小顶堆中不断追加matrix里的元素，追加过程中维护堆的大小保证为matrix.length+1-k，追加完成后，堆顶元素即为所找。（我的解法）</p>
<blockquote>
<p>小顶堆Java定义写法</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">PriorityQueue&lt;Integer&gt; pq = <span class="keyword">new</span> PriorityQueue&lt;&gt;(); <span class="comment">// 小顶堆</span></div></pre></td></tr></table></figure>
<h4 id="6-一个数组元素在-1-n-之间，其中一个数被替换为另一个数，找出重复的数和丢失的数"><a href="#6-一个数组元素在-1-n-之间，其中一个数被替换为另一个数，找出重复的数和丢失的数" class="headerlink" title="6. 一个数组元素在 [1, n] 之间，其中一个数被替换为另一个数，找出重复的数和丢失的数"></a>6. 一个数组元素在 [1, n] 之间，其中一个数被替换为另一个数，找出重复的数和丢失的数</h4><p>集合 S 包含从1到 n 的整数。不幸的是，因为数据错误，导致集合里面某一个元素复制了成了集合里面的另外一个元素的值，导致集合丢失了一个整数并且有一个元素重复。</p>
<p>给定一个数组 nums 代表了集合 S 发生错误后的结果。你的任务是首先寻找到重复出现的整数，再找到丢失的整数，将它们以数组的形式返回。</p>
<p>示例 1:</p>
<p>输入: nums = [1,2,2,4]<br>输出: [2,3]<br>注意:</p>
<p>给定数组的长度范围是 [2, 10000]。<br>给定的数组是无序的。</p>
<p>思路：1.排序后找到（时：o(logN)）2用一个数组记录数字出现一次还是2次还是0次（时：o(N);空：o(Log(N))）【我的解法】3.利用交换实现时：o(N),空间o(1)</p>
<h4 id="6-1寻找所有丢失的元素"><a href="#6-1寻找所有丢失的元素" class="headerlink" title="6.1寻找所有丢失的元素"></a>6.1寻找所有丢失的元素</h4><p>给定一个范围在  1 ≤ a[i] ≤ n ( n = 数组大小 ) 的 整型数组，数组中的元素一些出现了两次，另一些只出现一次。</p>
<p>找到所有在 [1, n] 范围之间没有出现在数组中的数字。</p>
<p>您能在不使用额外空间且时间复杂度为O(n)的情况下完成这个任务吗? 你可以假定返回的数组不算在额外空间内。</p>
<p>示例:</p>
<p>输入:<br>[4,3,2,7,8,2,3,1]</p>
<p>输出:<br>[5,6]</p>
<p>思路：同上面的交换解法</p>
<h4 id="6-2寻找所有重复的元素-同上思路"><a href="#6-2寻找所有重复的元素-同上思路" class="headerlink" title="6.2寻找所有重复的元素(同上思路)"></a>6.2寻找所有重复的元素(同上思路)</h4><h4 id="7-找出数组中重复的数，数组值在-1-n-之间"><a href="#7-找出数组中重复的数，数组值在-1-n-之间" class="headerlink" title="7. 找出数组中重复的数，数组值在 [1, n] 之间"></a>7. 找出数组中重复的数，数组值在 [1, n] 之间</h4><p>给定一个包含 n + 1 个整数的数组 nums，其数字都在 1 到 n 之间（包括 1 和 n），可知至少存在一个重复的整数。假设只有一个重复的整数，找出这个重复的数。</p>
<p>示例 1:</p>
<p>输入: [1,3,4,2,2]<br>输出: 2<br>示例 2:</p>
<p>输入: [3,1,3,4,2]<br>输出: 3<br>说明：</p>
<p>不能更改原数组（假设数组是只读的）。<br>只能使用额外的 O(1) 的空间。<br>时间复杂度小于 O(n2) 。<br>数组中只有一个重复的数字，但它可能不止重复出现一次。</p>
<p>思路：1二分2双指针快慢（类似于有环链表中找出环的入口）参考LeetCode官方解法以及下方评论</p>
<h4 id="8-数组相邻差值的个数"><a href="#8-数组相邻差值的个数" class="headerlink" title="8. 数组相邻差值的个数"></a>8. 数组相邻差值的个数</h4><p>给定两个整数 n 和 k，你需要实现一个数组，这个数组包含从 1 到 n 的 n 个不同整数，同时满足以下条件：</p>
<p>① 如果这个数组是 [a1, a2, a3, … , an] ，那么数组 [|a1 - a2|, |a2 - a3|, |a3 - a4|, … , |an-1 - an|] 中应该有且仅有 k 个不同整数；.</p>
<p>② 如果存在多种答案，你只需实现并返回其中任意一种.</p>
<p>示例 1:</p>
<p>输入: n = 3, k = 1<br>输出: [1, 2, 3]<br>解释: [1, 2, 3] 包含 3 个范围在 1-3 的不同整数， 并且 [1, 1] 中有且仅有 1 个不同整数 : 1</p>
<p>示例 2:</p>
<p>输入: n = 3, k = 2<br>输出: [1, 3, 2]<br>解释: [1, 3, 2] 包含 3 个范围在 1-3 的不同整数， 并且 [2, 1] 中有且仅有 2 个不同整数: 1 和 2</p>
<p>思路：让前 k+1 个元素构建出 k 个不相同的差值，序列为：1 k+1 2 k 3 k-1 … k/2 k/2+1.</p>
<h4 id="9-数组的度"><a href="#9-数组的度" class="headerlink" title="9. 数组的度"></a>9. 数组的度</h4><p>给定一个非空且只包含非负数的整数数组 nums, 数组的度的定义是指数组里任一元素出现频数的最大值。</p>
<p>你的任务是找到与 nums 拥有相同大小的度的最短连续子数组，返回其长度。</p>
<p>示例 1:</p>
<p>输入: [1, 2, 2, 3, 1]<br>输出: 2<br>解释:<br>输入数组的度是2，因为元素1和2的出现频数最大，均为2.<br>连续子数组里面拥有相同度的有如下所示:<br>[1, 2, 2, 3, 1], [1, 2, 2, 3], [2, 2, 3, 1], [1, 2, 2], [2, 2, 3], [2, 2]<br>最短连续子数组[2, 2]的长度为2，所以返回2.<br>示例 2:</p>
<p>输入: [1,2,2,3,1,4,2]<br>输出: 6</p>
<p>思路：1一步一步做（我的解法）2GitHub解法代码更简洁</p>
<h4 id="10-对角元素相等的矩阵"><a href="#10-对角元素相等的矩阵" class="headerlink" title="10. 对角元素相等的矩阵"></a>10. 对角元素相等的矩阵</h4><p>如果一个矩阵的每一方向由左上到右下的对角线上具有相同元素，那么这个矩阵是托普利茨矩阵。</p>
<p>给定一个 M x N 的矩阵，当且仅当它是托普利茨矩阵时返回 True。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">输入: </div><div class="line">matrix = [</div><div class="line">  [1,2,3,4],</div><div class="line">  [5,1,2,3],</div><div class="line">  [9,5,1,2]</div><div class="line">]</div><div class="line">输出: True</div></pre></td></tr></table></figure>
<p>思路：1自己思路ac 不了2GitHub思路：用一个递归的check方法，递归出口–超出边界—返回true</p>
<h4 id="11-嵌套数组"><a href="#11-嵌套数组" class="headerlink" title="11. 嵌套数组"></a>11. 嵌套数组</h4><p>索引从0开始长度为N的数组A，包含0到N - 1的所有整数。找到并返回最大的集合S，S[i] = {A[i], A[A[i]], A[A[A[i]]], … }且遵守以下的规则。</p>
<p>假设选择索引为i的元素A[i]为S的第一个元素，S的下一个元素应该是A[A[i]]，之后是A[A[A[i]]]… 以此类推，不断添加直到S出现重复的元素。</p>
<p>输入: A = [5,4,0,3,1,6,2]<br>输出: 4<br>解释:<br>A[0] = 5, A[1] = 4, A[2] = 0, A[3] = 3, A[4] = 1, A[5] = 6, A[6] = 2.</p>
<p>其中一种最长的 S[K]:<br>S[0] = {A[0], A[5], A[6], A[2]} = {5, 6, 2, 0}</p>
<p>思路：1我的思路有点类似递归加记忆化搜索2GitHub解法用2层循环，第二层循环访问过就标记-1，当再次遇到-1即形成环此时退出循环。</p>
<h4 id="12-分隔数组"><a href="#12-分隔数组" class="headerlink" title="12. 分隔数组"></a>12. 分隔数组</h4><p>数组arr是[0, 1, …, arr.length - 1]的一种排列，我们将这个数组分割成几个“块”，并将这些块分别进行排序。之后再连接起来，使得连接的结果和按升序排序后的原数组相同。</p>
<p>我们最多能将数组分成多少块？</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">输入: arr = [4,3,2,1,0]</div><div class="line">输出: 1</div><div class="line"></div><div class="line">输入: arr = [1,0,2,3,4]</div><div class="line">输出: 4</div></pre></td></tr></table></figure>
<p>思路：1我的解法：设置两个sum分别累加索引和值，2个sum相等时，cnt++同时2个sum归0；2github解法：找到当前段最大值right，right==索引 cnt才++。</p>
<blockquote>
<p>总结：对于矩阵可以想到递归解决（10），对于特殊矩阵注意遍历顺序（4）；数组如要找出重复数或丢失数可考虑用到交换（6,7）；注意一些类似递归搜索的想法（11）；注意arr[i]和i的关系（12）</p>
</blockquote>
<h3 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h3><h4 id="1-字符串循环移位包含"><a href="#1-字符串循环移位包含" class="headerlink" title="1. 字符串循环移位包含"></a>1. 字符串循环移位包含</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">s1 = AABCD, s2 = CDAA</div><div class="line">Return : true</div></pre></td></tr></table></figure>
<p>给定两个字符串 s1 和 s2，要求判定 s2 是否能够被 s1 做循环移位得到的字符串包含。</p>
<p>s1 进行循环移位的结果是 s1s1 的子字符串，因此只要判断 s2 是否是 s1s1 的子字符串即可。</p>
<h4 id="2-字符串循环移位"><a href="#2-字符串循环移位" class="headerlink" title="2. 字符串循环移位"></a>2. 字符串循环移位</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">s = &quot;abcd123&quot; k = 3</div><div class="line">Return &quot;123abcd&quot;</div></pre></td></tr></table></figure>
<p>将字符串向右循环移动 k 位。</p>
<p>将 abcd123 中的 abcd 和 123 单独翻转，得到 dcba321，然后对整个字符串进行翻转，得到 123abcd。</p>
<h4 id="3-字符串中单词的翻转"><a href="#3-字符串中单词的翻转" class="headerlink" title="3. 字符串中单词的翻转"></a>3. 字符串中单词的翻转</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">s = &quot;I am a student&quot;</div><div class="line">Return &quot;student a am I&quot;</div></pre></td></tr></table></figure>
<p>将每个单词翻转，然后将整个字符串翻转。</p>
<h4 id="4-两个字符串包含的字符是否完全相同"><a href="#4-两个字符串包含的字符是否完全相同" class="headerlink" title="4. 两个字符串包含的字符是否完全相同"></a>4. 两个字符串包含的字符是否完全相同</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">s = &quot;anagram&quot;, t = &quot;nagaram&quot;, return true.</div><div class="line">s = &quot;rat&quot;, t = &quot;car&quot;, return false.</div><div class="line"></div><div class="line">字母异位词是指由相同的字母按照不同的顺序组成的单词</div></pre></td></tr></table></figure>
<p>思路：用一个空间；桶（需要统计每个字母出现次数）</p>
<h4 id="5-计算一组字符集合可以组成的回文字符串的最大长度"><a href="#5-计算一组字符集合可以组成的回文字符串的最大长度" class="headerlink" title="5. 计算一组字符集合可以组成的回文字符串的最大长度"></a>5. 计算一组字符集合可以组成的回文字符串的最大长度</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">Input : &quot;abccccdd&quot;</div><div class="line">Output : 7</div><div class="line">Explanation : One longest palindrome that can be built is &quot;dccaccd&quot;, whose length is 7.</div></pre></td></tr></table></figure>
<p>思路：GitHub解法用 (cnt/2)*2；桶（需要统计每个字母出现次数）</p>
<h4 id="6-字符串同构"><a href="#6-字符串同构" class="headerlink" title="6. 字符串同构"></a>6. 字符串同构</h4><p>给定两个字符串 s 和 t，判断它们是否是同构的。</p>
<p>如果 s 中的字符可以被替换得到 t ，那么这两个字符串是同构的。</p>
<p>所有出现的字符都必须用另一个字符替换，同时保留字符的顺序。两个字符不能映射到同一个字符上，但字符可以映射自己本身。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">输入: s = &quot;egg&quot;, t = &quot;add&quot;</div><div class="line">输出: true</div><div class="line"></div><div class="line">输入: s = &quot;foo&quot;, t = &quot;bar&quot;</div><div class="line">输出: false</div></pre></td></tr></table></figure>
<p>思路：（<strong>标记一下</strong> ）</p>
<p>记录一个字符上次出现的位置，如果两个字符串中的字符上次出现的位置一样，那么就属于同构。</p>
<h4 id="7-回文子字符串个数"><a href="#7-回文子字符串个数" class="headerlink" title="7. 回文子字符串个数"></a>7. 回文子字符串个数</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">Input: &quot;aaa&quot;</div><div class="line">Output: 6</div><div class="line">Explanation: Six palindromic strings: &quot;a&quot;, &quot;a&quot;, &quot;a&quot;, &quot;aa&quot;, &quot;aa&quot;, &quot;aaa&quot;.</div></pre></td></tr></table></figure>
<p>思路：中心扩展。（<strong>标记一下，容易忘</strong>）</p>
<h4 id="8-判断一个整数是否是回文数"><a href="#8-判断一个整数是否是回文数" class="headerlink" title="8. 判断一个整数是否是回文数"></a>8. 判断一个整数是否是回文数</h4><p>要求不能使用额外空间，也就不能将整数转换为字符串进行判断。</p>
<p>思路：GitHub解法（将整数分成左右两部分，右边那部分需要转置，然后判断这两部分是否相等）</p>
<h4 id="9-统计二进制字符串中连续-1-和连续-0-数量相同的子字符串个数"><a href="#9-统计二进制字符串中连续-1-和连续-0-数量相同的子字符串个数" class="headerlink" title="9. 统计二进制字符串中连续 1 和连续 0 数量相同的子字符串个数"></a>9. 统计二进制字符串中连续 1 和连续 0 数量相同的子字符串个数</h4><p>给定一个字符串 s，计算具有相同数量0和1的非空(连续)子字符串的数量，并且这些子字符串中的所有0和所有1都是组合在一起的。</p>
<p>重复出现的子串要计算它们出现的次数。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">输入: &quot;00110011&quot;</div><div class="line">输出: 6</div><div class="line">解释: 有6个子串具有相同数量的连续1和0：“0011”，“01”，“1100”，“10”，“0011” 和 “01”。</div></pre></td></tr></table></figure>
<p>思路：<strong>标记一下</strong></p>
<p>First, I count the number of 1 or 0 grouped consecutively.<br>For example “0110001111” will be <code>[1, 2, 3, 4]</code>.</p>
<p>Second, for any possible substrings with 1 and 0 grouped consecutively, the number of valid substring will be the minimum number of 0 and 1.<br>For example “0001111”, will be <code>min(3, 4) = 3</code>, (<code>&quot;01&quot;, &quot;0011&quot;, &quot;000111&quot;</code>)</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">countBinarySubstrings</span><span class="params">(String s)</span> </span>&#123;</div><div class="line">       <span class="keyword">int</span> cur = <span class="number">1</span>, pre = <span class="number">0</span>, res = <span class="number">0</span>;</div><div class="line">       <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; s.length(); i++) &#123;</div><div class="line">           <span class="keyword">if</span> (s.charAt(i) == s.charAt(i - <span class="number">1</span>)) cur++;</div><div class="line">           <span class="keyword">else</span> &#123;</div><div class="line">               res += Math.min(cur, pre);</div><div class="line">               pre = cur;</div><div class="line">               cur = <span class="number">1</span>;</div><div class="line">           &#125;</div><div class="line">       &#125;</div><div class="line">       <span class="keyword">return</span> res + Math.min(cur, pre);</div><div class="line">   &#125;</div></pre></td></tr></table></figure>
<h3 id="哈希表"><a href="#哈希表" class="headerlink" title="哈希表"></a>哈希表</h3><h4 id="1-数组中两个数的和为给定值"><a href="#1-数组中两个数的和为给定值" class="headerlink" title="1. 数组中两个数的和为给定值"></a>1. 数组中两个数的和为给定值</h4><p>给定一个整数数组 nums 和一个目标值 target，请你在该数组中找出和为目标值的那 两个 整数，并返回他们的数组下标。</p>
<p>你可以假设每种输入只会对应一个答案。但是，你不能重复利用这个数组中同样的元素。</p>
<p>示例:</p>
<p>给定 nums = [2, 7, 11, 15], target = 9</p>
<p>因为 nums[0] + nums[1] = 2 + 7 = 9<br>所以返回 [0, 1]</p>
<p>思路：1暴力2两遍哈希表3一遍哈希表</p>
<h4 id="2-判断数组是否含有重复元素"><a href="#2-判断数组是否含有重复元素" class="headerlink" title="2. 判断数组是否含有重复元素"></a>2. 判断数组是否含有重复元素</h4><p>给定一个整数数组，判断是否存在重复元素。</p>
<p>如果任何值在数组中出现至少两次，函数返回 true。如果数组中每个元素都不相同，则返回 false。</p>
<p>示例 1:</p>
<p>输入: [1,2,3,1]<br>输出: true</p>
<p>思路：1hashmap 2hashset（巧妙利用长度比较）</p>
<h4 id="3-最长和谐序列"><a href="#3-最长和谐序列" class="headerlink" title="3. 最长和谐序列"></a>3. 最长和谐序列</h4><p>和谐数组是指一个数组里元素的最大值和最小值之间的差别正好是1。</p>
<p>现在，给定一个整数数组，你需要在所有可能的子序列中找到最长的和谐子序列的长度。</p>
<p>示例 1:</p>
<p>输入: [1,3,2,2,5,2,3,7]<br>输出: 5<br>原因: 最长的和谐数组是：[3,2,2,2,3].</p>
<p>思路：hash表，遍历时只需要找有没有大一的就好，小一的不用考虑；因为后续遍历过程中还是能访问到。</p>
<h4 id="4-最长连续序列"><a href="#4-最长连续序列" class="headerlink" title="4. 最长连续序列"></a>4. 最长连续序列</h4><p><strong>没做出来</strong></p>
<p>（今天用排序方法做出来）</p>
<p>给定一个未排序的整数数组，找出最长连续序列的长度。</p>
<p>要求算法的时间复杂度为 O(n)。</p>
<p>示例:</p>
<p>输入: [100, 4, 200, 1, 3, 2]<br>输出: 4<br>解释: 最长连续序列是 [1, 2, 3, 4]。它的长度为 4。</p>
<p>思路：1 排序后再找（我的解法）2hashset 只找比当前数大一的不找小一的；</p>
<blockquote>
<p>哈希表这种空间换时间的算法有时候不太好想；桶排序；通常对调k v 去建立哈希表；hashmap,hashset;遍历过程往往只需找大一，小一的情况在后遍历过程中还是能访问到，不会出现考虑不全面的问题。</p>
</blockquote>
<h3 id="栈和队列"><a href="#栈和队列" class="headerlink" title="栈和队列"></a><strong>栈和队列</strong></h3><h4 id="1-用栈实现队列"><a href="#1-用栈实现队列" class="headerlink" title="1. 用栈实现队列"></a>1. 用栈实现队列</h4><p>思路：</p>
<p>栈的顺序为后进先出，而队列的顺序为先进先出。使用两个栈实现队列，一个元素需要经过两个栈才能出队列，在经过第一个栈时元素顺序被反转，经过第二个栈时再次被反转，此时就是先进先出顺序。</p>
<h4 id="2-用队列实现栈"><a href="#2-用队列实现栈" class="headerlink" title="2. 用队列实现栈"></a>2. 用队列实现栈</h4><p>思路：</p>
<p>在将一个元素 x 插入队列时，为了维护原来的后进先出顺序，需要让 x 插入队列首部。而队列的默认插入顺序是队列尾部，因此在将 x 插入队列尾部之后，需要让除了 x 之外的所有元素出队列，再入队列。【这个容易忘】</p>
<h4 id="3-最小值栈"><a href="#3-最小值栈" class="headerlink" title="3. 最小值栈"></a>3. 最小值栈</h4><p>思路：维护一个data栈，和一个最小值栈（且data栈push时它也push，data栈pop时它也pop）；</p>
<p>对于实现最小值队列问题，可以先将队列使用栈来实现，然后就将问题转换为最小值栈，这个问题出现在 编程之美：3.7。（我的解法是用一个栈存data，在pop的时候花o(n)的时间去遍历得到最小值）</p>
<h4 id="4-用栈实现括号匹配"><a href="#4-用栈实现括号匹配" class="headerlink" title="4.用栈实现括号匹配"></a>4.用栈实现括号匹配</h4><p>给定一个只包括 ‘(‘，’)’，’{‘，’}’，’[‘，’]’ 的字符串，判断字符串是否有效。</p>
<p>有效字符串需满足：</p>
<p>左括号必须用相同类型的右括号闭合。<br>左括号必须以正确的顺序闭合。<br>注意空字符串可被认为是有效字符串。</p>
<p>示例 1:</p>
<p>输入: “()”<br>输出: true</p>
<p><strong>示例 3:</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">输入: &quot;(]&quot;</div><div class="line">输出: false</div></pre></td></tr></table></figure>
<p>思路：判断是左括号时进栈，否则先出栈比较是否匹配，匹配则进栈，不匹配直接return false。</p>
<h4 id="5-数组中元素与下一个比它大的元素之间的距离"><a href="#5-数组中元素与下一个比它大的元素之间的距离" class="headerlink" title="5. 数组中元素与下一个比它大的元素之间的距离"></a>5. 数组中元素与下一个比它大的元素之间的距离</h4><p>思路：</p>
<p>在遍历数组时用栈把数组中的数存起来，如果当前遍历的数比栈顶元素来的大，说明栈顶元素的下一个比它大的数就是当前元素。（巧妙地用数组的索引的差值来计算出距离，栈里面仅保存索引，值可以用数组获取到）（我的解法是走2层循环用双指针）</p>
<h4 id="6-循环数组中比当前元素大的下一个元素"><a href="#6-循环数组中比当前元素大的下一个元素" class="headerlink" title="6. 循环数组中比当前元素大的下一个元素"></a>6. 循环数组中比当前元素大的下一个元素</h4><p>思路：</p>
<p>与 上题不同的是，数组是循环数组，并且最后要求的不是距离而是下一个元素。（一样做）</p>
<blockquote>
<p>用队列实现栈记得是push的时候把所有其他元素出队;最小值栈注意minstack长度使他和数据栈长度一样来处理；5，6记得栈里面存索引</p>
</blockquote>
<h3 id="排序"><a href="#排序" class="headerlink" title="排序"></a>排序</h3><h4 id="1-Kth-Element"><a href="#1-Kth-Element" class="headerlink" title="1. Kth Element"></a>1. Kth Element</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">Input: [3,2,1,5,6,4] and k = 2</div><div class="line">Output: 5</div></pre></td></tr></table></figure>
<p>题目描述：找到倒数第 k 个的元素。</p>
<p><strong>排序</strong> ：时间复杂度 O(NlogN)，空间复杂度 O(1)</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">findKthLargest</span><span class="params">(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> k)</span> </span>&#123;</div><div class="line">    Arrays.sort(nums);</div><div class="line">    <span class="keyword">return</span> nums[nums.length - k];</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>堆</strong> ：时间复杂度 O(NlogK)，空间复杂度 O(K)。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">findKthLargest</span><span class="params">(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> k)</span> </span>&#123;</div><div class="line">    PriorityQueue&lt;Integer&gt; pq = <span class="keyword">new</span> PriorityQueue&lt;&gt;(); <span class="comment">// 小顶堆</span></div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> val : nums) &#123;</div><div class="line">        pq.add(val);</div><div class="line">        <span class="keyword">if</span> (pq.size() &gt; k)  <span class="comment">// 维护堆的大小为 K</span></div><div class="line">            pq.poll();</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> pq.peek();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>快速选择</strong> ：时间复杂度 O(N)，空间复杂度 O(1)</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">findKthLargest</span><span class="params">(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> k)</span> </span>&#123;</div><div class="line">        k = nums.length - k;</div><div class="line">        <span class="keyword">int</span> l=<span class="number">0</span>,h=nums.length-<span class="number">1</span>;</div><div class="line">        <span class="keyword">while</span> (l&lt;h)&#123;</div><div class="line">            <span class="keyword">int</span> i = getPartition(l,h,nums);</div><div class="line">            <span class="keyword">if</span>(i==k)</div><div class="line">                <span class="keyword">return</span> nums[k];</div><div class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(i&lt;k)</div><div class="line">                l = i+<span class="number">1</span>;</div><div class="line">            <span class="keyword">else</span></div><div class="line">                h = i-<span class="number">1</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> nums[k];</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">getPartition</span><span class="params">(<span class="keyword">int</span> l,<span class="keyword">int</span> h,<span class="keyword">int</span>[] nums)</span></span>&#123;</div><div class="line">        <span class="keyword">int</span> temp = nums[l];</div><div class="line">        <span class="keyword">while</span> (l&lt;h)&#123;</div><div class="line">            <span class="keyword">while</span> (l&lt;h&amp;&amp;nums[h]&gt;=temp)</div><div class="line">                h--;</div><div class="line">            nums[l]  = nums[h];</div><div class="line">            <span class="keyword">while</span> (l&lt;h&amp;&amp;nums[l]&lt;=temp)</div><div class="line">                l++;</div><div class="line">            nums[h] = nums[l];</div><div class="line">        &#125;</div><div class="line">        nums[l] = temp;</div><div class="line">        <span class="keyword">return</span> l;</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<h4 id="桶排序"><a href="#桶排序" class="headerlink" title="桶排序"></a>桶排序</h4><h4 id="1-出现频率最多的-k-个元素"><a href="#1-出现频率最多的-k-个元素" class="headerlink" title="1. 出现频率最多的 k 个元素"></a>1. 出现频率最多的 k 个元素</h4><p><a href="https://leetcode.com/problems/top-k-frequent-elements/description/" target="_blank" rel="external">347. Top K Frequent Elements (Medium)</a></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Given [1,1,1,2,2,3] and k = 2, return [1,2].</div></pre></td></tr></table></figure>
<p>设置若干个桶，每个桶存储出现频率相同的数。桶的下标表示数出现的频率，即第 i 个桶中存储的数出现的频率为 i。</p>
<p>把数都放到桶之后，从后向前遍历桶，最先得到的 k 个数就是出现频率最多的的 k 个数。</p>
<h4 id="2-按照字符出现次数对字符串排序"><a href="#2-按照字符出现次数对字符串排序" class="headerlink" title="2. 按照字符出现次数对字符串排序"></a>2. 按照字符出现次数对字符串排序</h4><p>给定一个字符串，请将字符串里的字符按照出现的频率降序排列。</p>
<p>示例 1:</p>
<p>输入:<br>“tree”</p>
<p>输出:<br>“eert”</p>
<p>解释:<br>‘e’出现两次，’r’和’t’都只出现一次。<br>因此’e’必须出现在’r’和’t’之前。此外，”eetr”也是一个有效的答案。<br>示例 2:</p>
<p>输入:<br>“cccaaa”</p>
<p>输出:<br>“cccaaa”</p>
<p>解释:<br>‘c’和’a’都出现三次。此外，”aaaccc”也是有效的答案。<br>注意”cacaca”是不正确的，因为相同的字母必须放在一起。<br>示例 3:</p>
<p>输入:<br>“Aabb”</p>
<p>输出:<br>“bbAa”</p>
<p>解释:<br>此外，”bbaA”也是一个有效的答案，但”Aabb”是不正确的。<br>注意’A’和’a’被认为是两种不同的字符。</p>
<h4 id="荷兰国旗问题"><a href="#荷兰国旗问题" class="headerlink" title="荷兰国旗问题"></a>荷兰国旗问题</h4><p>荷兰国旗包含三种颜色：红、白、蓝。</p>
<p>有三种颜色的球，算法的目标是将这三种球按颜色顺序正确地排列。它其实是三向切分快速排序的一种变种，在三向切分快速排序中，每次切分都将数组分成三个区间：小于切分元素、等于切分元素、大于切分元素，而该算法是将数组分成三个区间：等于红色、等于白色、等于蓝色。</p>
<p><a href="https://github.com/CyC2018/CS-Notes/blob/master/notes/pics/7a3215ec-6fb7-4935-8b0d-cb408208f7cb.png" target="_blank" rel="external"><img src="https://github.com/CyC2018/CS-Notes/raw/master/notes/pics/7a3215ec-6fb7-4935-8b0d-cb408208f7cb.png" alt="img"></a></p>
<p>给定一个包含红色、白色和蓝色，一共 n 个元素的数组，原地对它们进行排序，使得相同颜色的元素相邻，并按照红色、白色、蓝色顺序排列。</p>
<p>此题中，我们使用整数 0、 1 和 2 分别表示红色、白色和蓝色。</p>
<p>注意:<br>不能使用代码库中的排序函数来解决这道题。</p>
<p>示例:</p>
<p>输入: [2,0,2,1,1,0]<br>输出: [0,0,1,1,2,2]</p>
<p>思路：</p>
<p>我们用三个指针（p0, p2 和curr）来分别追踪0的最右边界，2的最左边界和当前考虑的元素。(容易忘)</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sortColors</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</div><div class="line">        <span class="keyword">int</span> p0=<span class="number">0</span>,cur=<span class="number">0</span>,p2=nums.length-<span class="number">1</span>;</div><div class="line">        <span class="keyword">while</span> (cur&lt;=p2)&#123;</div><div class="line">            <span class="keyword">if</span>(nums[cur]==<span class="number">0</span>)</div><div class="line">                swap(nums,p0++,cur++);</div><div class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(nums[cur]==<span class="number">2</span>)</div><div class="line">                swap(nums,cur,p2--);</div><div class="line">            <span class="keyword">else</span></div><div class="line">                cur++;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">swap</span><span class="params">(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> i, <span class="keyword">int</span> j)</span> </span>&#123;</div><div class="line">        <span class="keyword">int</span> t = nums[i];</div><div class="line">        nums[i] = nums[j];</div><div class="line">        nums[j] = t;</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<h3 id="二分查找"><a href="#二分查找" class="headerlink" title="二分查找"></a><strong>二分查找</strong></h3><h4 id="1-求开方"><a href="#1-求开方" class="headerlink" title="1. 求开方"></a>1. 求开方</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">Input: 4</div><div class="line">Output: 2</div><div class="line"></div><div class="line">Input: 8</div><div class="line">Output: 2</div><div class="line">Explanation: The square root of 8 is 2.82842..., and since we want to return an integer, the decimal part will be truncated.</div></pre></td></tr></table></figure>
<p>一个数 x 的开方 sqrt 一定在 0 ~ x 之间，并且满足 sqrt == x / sqrt。可以利用二分查找在 0 ~ x 之间查找 sqrt。</p>
<p>对于 x = 8，它的开方是 2.82842…，最后应该返回 2 而不是 3。在循环条件为 l &lt;= h 并且循环退出时，h 总是比 l 小 1，也就是说 h = 2，l = 3，因此最后的返回值应该为 h 而不是 l。</p>
<h4 id="2-大于给定元素的最小元素"><a href="#2-大于给定元素的最小元素" class="headerlink" title="2. 大于给定元素的最小元素"></a>2. 大于给定元素的最小元素</h4><p>给定一个只包含小写字母的有序数组letters 和一个目标字母 target，寻找有序数组里面比目标字母大的最小字母。</p>
<p>数组里字母的顺序是循环的。举个例子，如果目标字母target = ‘z’ 并且有序数组为 letters = [‘a’, ‘b’]，则答案返回 ‘a’。</p>
<p>题目描述：给定一个有序的字符数组 letters 和一个字符 target，要求找出 letters 中大于 target 的最小字符，如果找不到就返回第 1 个字符（这句话是转换题意）。</p>
<h4 id="3-有序数组的-Single-Element"><a href="#3-有序数组的-Single-Element" class="headerlink" title="3. 有序数组的 Single Element"></a>3. 有序数组的 Single Element</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">Input: [1, 1, 2, 3, 3, 4, 4, 8, 8]</div><div class="line">Output: 2</div></pre></td></tr></table></figure>
<p>题目描述：一个有序数组只有一个数不出现两次，找出这个数。</p>
<p>要求以 O(logN) 时间复杂度进行求解，因此不能遍历数组并进行异或操作来求解，这么做的时间复杂度为 O(N)。</p>
<p>令 index 为 Single Element 在数组中的位置。在 index 之后，数组中原来存在的成对状态被改变。如果 m 为偶数，并且 m + 1 &lt; index，那么 nums[m] == nums[m + 1]；m + 1 &gt;= index，那么 nums[m] != nums[m + 1]。</p>
<p>从上面的规律可以知道，如果 nums[m] == nums[m + 1]，那么 index 所在的数组位置为 [m + 2, h]，此时令 l = m + 2；如果 nums[m] != nums[m + 1]，那么 index 所在的数组位置为 [l, m]，此时令 h = m。</p>
<p><strong>因为 h 的赋值表达式为 h = m，那么循环条件也就只能使用 l &lt; h 这种形式。</strong></p>
<h4 id="4-第一个错误的版本"><a href="#4-第一个错误的版本" class="headerlink" title="4. 第一个错误的版本"></a>4. 第一个错误的版本</h4><p>题目描述：给定一个元素 n 代表有 [1, 2, …, n] 版本，在第 x 位置开始出现错误版本，导致后面的版本都错误。可以调用 isBadVersion(int x) 知道某个版本是否错误，要求找到第一个错误的版本。</p>
<p>如果第 m 个版本出错，则表示第一个错误的版本在 [l, m] 之间，令 h = m；否则第一个错误的版本在 [m + 1, h] 之间，令 l = m + 1。</p>
<p><strong>因为 h 的赋值表达式为 h = m，因此循环条件为 l &lt; h。</strong></p>
<h4 id="5-旋转数组的最小数字"><a href="#5-旋转数组的最小数字" class="headerlink" title="5. 旋转数组的最小数字"></a>5. 旋转数组的最小数字</h4><p>假设按照升序排序的数组在预先未知的某个点上进行了旋转。</p>
<p>( 例如，数组 [0,1,2,4,5,6,7] 可能变为 [4,5,6,7,0,1,2] )。</p>
<p>请找出其中最小的元素。</p>
<p>你可以假设数组中不存在重复元素。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">Input: [3,4,5,1,2],</div><div class="line">Output: 1</div></pre></td></tr></table></figure>
<p>思路：二分法 if (nums[m] &lt;= nums[h]) {            h = m; }       l&lt;h</p>
<h4 id="6-查找区间"><a href="#6-查找区间" class="headerlink" title="6. 查找区间"></a>6. 查找区间</h4><p>不弄了，细节是魔鬼。。</p>
<blockquote>
<p>二分查找，正常是l&lt;=h 然后if 三段论，mid+1,mid-1;对于1其实是要向下取整的，所以应该返回l和h当中小的那个即为h；对于h=m的情况，循环条件就用l&lt;h,如：3，4，5；对于5找旋转数组的最小数字的if条件【if (nums[m] &lt;= nums[h]) {】比较巧妙；6看不懂，可以看个链接</p>
<p><a href="https://leetcode-cn.com/problems/find-first-and-last-position-of-element-in-sorted-array/solution/er-fen-cha-zhao-suan-fa-xi-jie-xiang-jie-by-labula/" target="_blank" rel="external">https://leetcode-cn.com/problems/find-first-and-last-position-of-element-in-sorted-array/solution/er-fen-cha-zhao-suan-fa-xi-jie-xiang-jie-by-labula/</a></p>
</blockquote>
<h3 id="数学"><a href="#数学" class="headerlink" title="数学"></a>数学</h3><h4 id="1-生成素数序列"><a href="#1-生成素数序列" class="headerlink" title="1. 生成素数序列"></a>1. 生成素数序列</h4><p>统计所有小于非负整数 n的质数的数量。</p>
<p><strong>示例:</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">输入: 10</div><div class="line">输出: 4</div><div class="line">解释: 小于 10 的质数一共有 4 个, 它们是 2, 3, 5, 7 。</div></pre></td></tr></table></figure>
<p>思路：</p>
<p>埃拉托斯特尼筛法在每次找到一个素数时，将能被素数整除的数排除掉。</p>
<p>2之后的2 <em> 2,2 </em> 3,2 <em> 4….都标记为不是素数，3之后的3 </em> 3,3 <em> 4,3 </em> 5都标记为不是素数…</p>
<h4 id="2-最大公约数"><a href="#2-最大公约数" class="headerlink" title="2. 最大公约数"></a>2. 最大公约数</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">int gcd(int a, int b) &#123;</div><div class="line">    return b == 0 ? a : gcd(b, a % b);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>最小公倍数为两数的乘积除以最大公约数。(记一记)</p>
<h4 id="进制转换"><a href="#进制转换" class="headerlink" title="进制转换"></a>进制转换</h4><h4 id="1-7-进制"><a href="#1-7-进制" class="headerlink" title="1. 7 进制"></a>1. 7 进制</h4><p>给定一个整数，将其转化为7进制，并以字符串形式输出。</p>
<p>思路：  while (num &gt; 0) {        sb.append(num % 7);        num /= 7;    }。</p>
<p>Java 中 static String toString(int num, int radix) 可以将一个整数转换为 radix 进制表示的字符串。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">public String convertToBase7(int num) &#123;</div><div class="line">    return Integer.toString(num, 7);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="2-16-进制"><a href="#2-16-进制" class="headerlink" title="2. 16 进制"></a>2. 16 进制</h4><p>思路：</p>
<p>负数要用它的补码形式。（记一记吧）</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">Input:</div><div class="line">26</div><div class="line"></div><div class="line">Output:</div><div class="line">&quot;1a&quot;</div><div class="line"></div><div class="line">Input:</div><div class="line">-1</div><div class="line"></div><div class="line">Output:</div><div class="line">&quot;ffffffff&quot;</div></pre></td></tr></table></figure>
<p>负数要用它的补码形式。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> String <span class="title">toHex</span><span class="params">(<span class="keyword">int</span> num)</span> </span>&#123;</div><div class="line">    <span class="keyword">char</span>[] map = &#123;<span class="string">'0'</span>, <span class="string">'1'</span>, <span class="string">'2'</span>, <span class="string">'3'</span>, <span class="string">'4'</span>, <span class="string">'5'</span>, <span class="string">'6'</span>, <span class="string">'7'</span>, <span class="string">'8'</span>, <span class="string">'9'</span>, <span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>, <span class="string">'d'</span>, <span class="string">'e'</span>, <span class="string">'f'</span>&#125;;</div><div class="line">    <span class="keyword">if</span> (num == <span class="number">0</span>) <span class="keyword">return</span> <span class="string">"0"</span>;</div><div class="line">    StringBuilder sb = <span class="keyword">new</span> StringBuilder();</div><div class="line">    <span class="keyword">while</span> (num != <span class="number">0</span>) &#123;</div><div class="line">        sb.append(map[num &amp; <span class="number">0b1111</span>]);</div><div class="line">        num &gt;&gt;&gt;= <span class="number">4</span>; <span class="comment">// 因为考虑的是补码形式，因此符号位就不能有特殊的意义，需要使用无符号右移，左边填 0</span></div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> sb.reverse().toString();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="3-26-进制"><a href="#3-26-进制" class="headerlink" title="3. 26 进制"></a>3. 26 进制</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">1 -&gt; A</div><div class="line">2 -&gt; B</div><div class="line">3 -&gt; C</div><div class="line">...</div><div class="line">26 -&gt; Z</div><div class="line">27 -&gt; AA</div><div class="line">28 -&gt; AB</div></pre></td></tr></table></figure>
<p>因为是从 1 开始计算的，而不是从 0 开始，因此需要对 n 执行 -1 操作。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> String <span class="title">convertToTitle</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (n == <span class="number">0</span>) &#123;</div><div class="line">        <span class="keyword">return</span> <span class="string">""</span>;</div><div class="line">    &#125;</div><div class="line">    n--;</div><div class="line">    <span class="keyword">return</span> convertToTitle(n / <span class="number">26</span>) + (<span class="keyword">char</span>) (n % <span class="number">26</span> + <span class="string">'A'</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="阶乘"><a href="#阶乘" class="headerlink" title="阶乘"></a>阶乘</h4><h4 id="1-统计阶乘尾部有多少个-0"><a href="#1-统计阶乘尾部有多少个-0" class="headerlink" title="1. 统计阶乘尾部有多少个 0"></a>1. 统计阶乘尾部有多少个 0</h4><p>给定一个整数 <em>n</em>，返回 <em>n</em>! 结果尾数中零的数量。</p>
<p>尾部的 0 由 2 * 5 得来，2 的数量明显多于 5 的数量，因此只要统计有多少个 5 即可。</p>
<p>对于一个数 N，它所包含 5 的个数为：N/5 + N/52 + N/53 + …，其中 N/5 表示不大于 N 的数中 5 的倍数贡献一个 5，N/52表示不大于 N 的数中 52 的倍数再贡献一个 5 …。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">public int trailingZeroes(int n) &#123;</div><div class="line">    return n == 0 ? 0 : n / 5 + trailingZeroes(n / 5);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>如果统计的是 N! 的二进制表示中最低位 1 的位置，只要统计有多少个 2 即可，该题目出自 <a href="https://github.com/CyC2018/CS-Notes/blob/master/notes/Leetcode%20%E9%A2%98%E8%A7%A3%20-%20%E6%95%B0%E5%AD%A6.md#" target="_blank" rel="external">编程之美：2.2</a> 。和求解有多少个 5 一样，2 的个数为 N/2 + N/22 + N/23 + …</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">举个复杂点的例子：</div><div class="line">10！ = [2 （ 2 * 2 ） 5 （ 2 * 3 ）（ 2 * 2 * 2 ）*（ 2 * 5）]</div><div class="line">在 10！这个阶乘数中可以匹配两对 2 * 5 ，所以10！末尾有 2 个 0。可以发现，一个数字进行拆分后 2 的个数肯定是大于 5 的个数的，所以能匹配多少对取决于 5 的个数。（好比现在男女比例悬殊，最多能有多少对异性情侣取决于女生的多少）。</div><div class="line">那么问题又变成了 统计阶乘数里有多少个 5 这个因子。</div><div class="line">需要注意的是，像 25，125 这样的不只含有一个 5 的数字的情况需要考虑进去。比如 n = 15。那么在 15! 中 有 3 个 5 (来自其中的5, 10, 15)， 所以计算 n/5 就可以 。但是比如 n=25，依旧计算 n/5 ，可以得到 5 个5，分别来自其中的5, 10, 15, 20, 25，但是在 25 中其实是包含 2个 5 的，这一点需要注意。</div><div class="line">所以除了计算 n/5 ， 还要计算 n/5/5 , n/5/5/5 , n/5/5/5/5 , ..., n/5/5/5,,,/5直到商为0，然后求和即可。</div><div class="line"></div><div class="line">作者：chen-chen-6</div><div class="line">链接：https://leetcode-cn.com/problems/factorial-trailing-zeroes/solution/tou-ji-qu-qiao-de-suan-fa-ti-by-chen-chen-6/</div></pre></td></tr></table></figure>
<h4 id="字符串加法减法"><a href="#字符串加法减法" class="headerlink" title="字符串加法减法"></a>字符串加法减法</h4><h4 id="1-二进制加法"><a href="#1-二进制加法" class="headerlink" title="1. 二进制加法"></a>1. 二进制加法</h4><p>思路：双指针， while (carry == 1 || i &gt;= 0 || j &gt;= 0) {；有点像链表7 ：链表求和。</p>
<h4 id="2-字符串加法"><a href="#2-字符串加法" class="headerlink" title="2. 字符串加法"></a>2. 字符串加法</h4><p>给定两个字符串形式的非负整数 <code>num1</code> 和<code>num2</code> ，计算它们的和。</p>
<p>思路：双指针， while (carry == 1 || i &gt;= 0 || j &gt;= 0) {；更加像链表7 ：链表求和。</p>
<h4 id="相遇问题"><a href="#相遇问题" class="headerlink" title="相遇问题"></a>相遇问题</h4><h4 id="1-改变数组元素使所有的数组元素都相等"><a href="#1-改变数组元素使所有的数组元素都相等" class="headerlink" title="1. 改变数组元素使所有的数组元素都相等"></a>1. 改变数组元素使所有的数组元素都相等</h4><p>给定一个非空整数数组，找到使所有数组元素相等所需的最小移动数，其中每次移动可将选定的一个元素加1或减1。 您可以假设数组的长度最多为10000。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">Input:</div><div class="line">[1,2,3]</div><div class="line"></div><div class="line">Output:</div><div class="line">2</div><div class="line"></div><div class="line">Explanation:</div><div class="line">Only two moves are needed (remember each move increments or decrements one element):</div><div class="line"></div><div class="line">[1,2,3]  =&gt;  [2,2,3]  =&gt;  [2,2,2]</div></pre></td></tr></table></figure>
<p>这是个典型的相遇问题，移动距离最小的方式是所有元素都移动到中位数。</p>
<p>思路：1先排序，再（用首尾指针向中间移动）累加（O(NlogN)。2快速选择找到中位数（如果数组个数为偶数的话其实中间的那2个数都可以作为中位数）O(N)</p>
<h4 id="多数投票问题"><a href="#多数投票问题" class="headerlink" title="多数投票问题"></a>多数投票问题</h4><h4 id="1-数组中出现次数多于-n-2-的元素"><a href="#1-数组中出现次数多于-n-2-的元素" class="headerlink" title="1. 数组中出现次数多于 n / 2 的元素"></a>1. 数组中出现次数多于 n / 2 的元素</h4><p>给定一个大小为 <em>n </em>的数组，找到其中的众数。众数是指在数组中出现次数<strong>大于</strong> <code>⌊ n/2 ⌋</code> 的元素。</p>
<p>你可以假设数组是非空的，并且给定的数组总是存在众数。</p>
<p>思路：1Boyer-Moore Majority Vote Algorithm （没看）2桶排序</p>
<h4 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h4><h4 id="1-平方数"><a href="#1-平方数" class="headerlink" title="1. 平方数"></a>1. 平方数</h4><p>给定一个正整数 num，编写一个函数，如果 num 是一个完全平方数，则返回 True，否则返回 False。</p>
<p>说明：不要使用任何内置的库函数，如  sqrt。</p>
<p>思路：1平方序列：1,4,9,16,..间隔：3,5,7,…间隔为等差数列，2自然的思路：i*i = num return true.</p>
<h4 id="2-3-的-n-次方"><a href="#2-3-的-n-次方" class="headerlink" title="2. 3 的 n 次方"></a>2. 3 的 n 次方</h4><p>给定一个整数，写一个函数来判断它是否是 3 的幂次方。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isPowerOfThree</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> n &gt; <span class="number">0</span> &amp;&amp; (<span class="number">1162261467</span> % n == <span class="number">0</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><a href="https://tva4.sinaimg.cn/large/005R6Otmgy1g6xxe0qh26j30le0ab0ta.jpg" target="_blank" rel="external">https://tva4.sinaimg.cn/large/005R6Otmgy1g6xxe0qh26j30le0ab0ta.jpg</a></p>
<h4 id="3-乘积数组"><a href="#3-乘积数组" class="headerlink" title="3. 乘积数组"></a>3. 乘积数组</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">For example, given [1,2,3,4], return [24,12,8,6].</div></pre></td></tr></table></figure>
<p>给定一个数组，创建一个新数组，新数组的每个元素为原始数组中除了该位置上的元素之外所有元素的乘积。</p>
<p>要求时间复杂度为 O(N)，并且不能使用除法。</p>
<p>思路：从左向右一趟循环，从右向左一趟循环，各自得到左边的乘积和右边的乘积</p>
<h4 id="4-找出数组中的乘积最大的三个数"><a href="#4-找出数组中的乘积最大的三个数" class="headerlink" title="4. 找出数组中的乘积最大的三个数"></a>4. 找出数组中的乘积最大的三个数</h4><p>给定一个整型数组，在数组中找出由三个数组成的最大乘积，并输出这个乘积。</p>
<p>思路：我的解法：先排序，再根据正负数个数情况找出最大值；github解法没高兴看。</p>
<blockquote>
<p>每一个数都可以分解成素数的乘积;素数筛法把2之后的2 <em> 2,2 </em> 3,2 <em> 4….都标记为不是素数，3之后的3 </em> 3,3 <em> 4,3 </em> 5都标记为不是素数…；最大公约数 return b == 0 ? a : gcd(b, a % b);最小公倍数为两数的乘积除以最大公约数。………例题都蛮典型的，不总结了。。。</p>
</blockquote>
<h3 id="位运算"><a href="#位运算" class="headerlink" title="位运算"></a>位运算</h3><h4 id="1-统计两个数的二进制表示有多少位不同"><a href="#1-统计两个数的二进制表示有多少位不同" class="headerlink" title="1. 统计两个数的二进制表示有多少位不同"></a>1. 统计两个数的二进制表示有多少位不同</h4><p>两个整数之间的<a href="https://baike.baidu.com/item/%E6%B1%89%E6%98%8E%E8%B7%9D%E7%A6%BB" target="_blank" rel="external">汉明距离</a>指的是这两个数字对应二进制位不同的位置的数目。</p>
<p>给出两个整数 <code>x</code> 和 <code>y</code>，计算它们之间的汉明距离。</p>
<p><strong>注意：</strong><br>0 ≤ <code>x</code>, <code>y</code> &lt; 231.</p>
<p>思路：int z = x ^ y;然后算出z中有几个1。算出几个1的算法有：1 while(z != 0){   if ((z &amp; 1) == 1) cnt++;        z = z &gt;&gt; 1};2 while (z != 0) {        <strong>z &amp;= (z - 1)</strong>;        cnt++;    }；【<code>n&amp;(n-1) 去除 n 的位级表示中最低的那一位。</code>】3Integer.bitCount(z);</p>
<h4 id="2-数组中唯一一个不重复的元素"><a href="#2-数组中唯一一个不重复的元素" class="headerlink" title="2. 数组中唯一一个不重复的元素"></a>2. 数组中唯一一个不重复的元素</h4><p>异或</p>
<h4 id="3-找出数组中缺失的那个数"><a href="#3-找出数组中缺失的那个数" class="headerlink" title="3. 找出数组中缺失的那个数"></a>3. 找出数组中缺失的那个数</h4><p>思路：示例：0,1,3和0,1,2,3异或就能取到2；</p>
<h4 id="4-数组中不重复的两个元素"><a href="#4-数组中不重复的两个元素" class="headerlink" title="4. 数组中不重复的两个元素"></a>4. 数组中不重复的两个元素</h4><p>异或基础上用<strong>diff &amp;= -diff</strong>区分出两个元素第一个不同的位；然后for循环遍历^=;【<code>n&amp;(-n) 得到 n 的位级表示中最低的那一位。</code> 其余位变成0】</p>
<h4 id="5-翻转一个数的比特位"><a href="#5-翻转一个数的比特位" class="headerlink" title="5. 翻转一个数的比特位"></a>5. 翻转一个数的比特位</h4><p>颠倒给定的 32 位无符号整数的二进制位。</p>
<p> 思路</p>
<ol>
<li>将给定的二进制数,由低到高位逐个取出</li>
<li>然后通过位运算将其放置到反转后的位置.</li>
<li>将上述结果再次通过运算结合到一起</li>
</ol>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">reverseBits1</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</div><div class="line">        <span class="keyword">int</span> result = <span class="number">0</span>;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= <span class="number">32</span>; i++) &#123;</div><div class="line">            <span class="comment">// 1. 将给定的二进制数,由低到高位逐个取出</span></div><div class="line">            <span class="comment">// 1.1 右移 i 位,</span></div><div class="line">            <span class="keyword">int</span> tmp = n &gt;&gt; i;</div><div class="line">            <span class="comment">// 1.2  取有效位</span></div><div class="line">            tmp = tmp &amp; <span class="number">1</span>;</div><div class="line">            <span class="comment">// 2. 然后通过位运算将其放置到反转后的位置.</span></div><div class="line">            tmp = tmp &lt;&lt; (<span class="number">31</span> - i);</div><div class="line">            <span class="comment">// 3. 将上述结果再次通过运算结合到一起</span></div><div class="line">            result |= tmp;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> result;</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<h4 id="6-不用额外变量交换两个整数"><a href="#6-不用额外变量交换两个整数" class="headerlink" title="6. 不用额外变量交换两个整数"></a>6. 不用额外变量交换两个整数</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">a = a ^ b;</div><div class="line">b = a ^ b;</div><div class="line">a = a ^ b;</div></pre></td></tr></table></figure>
<h4 id="7-判断一个数是不是-2-的-n-次方"><a href="#7-判断一个数是不是-2-的-n-次方" class="headerlink" title="7. 判断一个数是不是 2 的 n 次方"></a>7. 判断一个数是不是 2 的 n 次方</h4><p>思路：1二进制表示只有一个 1 存在。【 return n &gt; 0 &amp;&amp; Integer.bitCount(n) == 1;】2利用 1000 &amp; 0111 == 0 这种性质【return n &gt; 0 &amp;&amp; (n &amp; (n - 1)) == 0;】</p>
<h4 id="8-判断一个数是不是-4-的-n-次方"><a href="#8-判断一个数是不是-4-的-n-次方" class="headerlink" title="8. 判断一个数是不是 4 的 n 次方"></a>8. 判断一个数是不是 4 的 n 次方</h4><p>思路：1这种数在二进制表示中有且只有一个奇数位为 1，例如 16（10000）。【return num &gt; 0 &amp;&amp; (num &amp; (num - 1)) == 0 &amp;&amp; (num &amp; 0b01010101010101010101010101010101) != 0;】2使用正则表达式进行匹配【return Integer.toString(num, 4).matches(“10*”);】</p>
<p>【public static String toString(int i, int radix)//<code>radix</code> 为进制】</p>
<h4 id="9-判断一个数的位级表示是否不会出现连续的-0-和-1"><a href="#9-判断一个数的位级表示是否不会出现连续的-0-和-1" class="headerlink" title="9. 判断一个数的位级表示是否不会出现连续的 0 和 1"></a>9. 判断一个数的位级表示是否不会出现连续的 0 和 1</h4><p>给定一个正整数，检查他是否为交替位二进制数：换句话说，就是他的二进制数相邻的两个位数永不相等。</p>
<p>示例 1:</p>
<p>输入: 5<br>输出: True<br>解释:<br>5的二进制数是: 101</p>
<p>思路：对于 1010 这种位级表示的数，把它向右移动 1 位得到 101，这两个数每个位都不同，因此异或得到的结果为 1111。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">hasAlternatingBits</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> a = (n ^ (n &gt;&gt; <span class="number">1</span>));</div><div class="line">    <span class="keyword">return</span> (a &amp; (a + <span class="number">1</span>)) == <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="10-求一个数的补码"><a href="#10-求一个数的补码" class="headerlink" title="10. 求一个数的补码"></a>10. 求一个数的补码</h4><p>给定一个正整数，输出它的补数。补数是对该数的二进制表示取反。</p>
<p>题目描述：不考虑二进制表示中的首 0 部分。</p>
<p>对于 00000101，要求补码可以将它与 00000111 进行异或操作。那么问题就转换为求掩码 00000111。</p>
<p>可以利用 Java 的 Integer.highestOneBit() 方法来获得含有首 1 的数。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">findComplement</span><span class="params">(<span class="keyword">int</span> num)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (num == <span class="number">0</span>) <span class="keyword">return</span> <span class="number">1</span>;</div><div class="line">    <span class="keyword">int</span> mask = Integer.highestOneBit(num);<span class="comment">//例如Integer.highestOneBit(11)等于8</span></div><div class="line">    mask = (mask &lt;&lt; <span class="number">1</span>) - <span class="number">1</span>;</div><div class="line">    <span class="keyword">return</span> num ^ mask;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="11-实现整数的加法"><a href="#11-实现整数的加法" class="headerlink" title="11. 实现整数的加法"></a>11. 实现整数的加法</h4><p><strong>a ^ b 表示没有考虑进位的情况下两数的和，(a &amp; b) &lt;&lt; 1 就是进位。</strong></p>
<p>递归会终止的原因是 (a &amp; b) &lt;&lt; 1 最右边会多一个 0，那么继续递归，进位最右边的 0 会慢慢增多，最后进位会变为 0，递归终止。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getSum</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> b == <span class="number">0</span> ? a : getSum((a ^ b), (a &amp; b) &lt;&lt; <span class="number">1</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="12-字符串数组最大乘积"><a href="#12-字符串数组最大乘积" class="headerlink" title="12. 字符串数组最大乘积"></a>12. 字符串数组最大乘积</h4><p>给定一个字符串数组 words，找到 length(word[i]) * length(word[j]) 的最大值，并且这两个单词不含有公共字母。你可以认为每个单词只包含小写字母。如果不存在这样的两个单词，返回 0。</p>
<p>思路：1.暴力2.本题主要问题是判断两个字符串是否含相同字符，由于字符串只含有小写字符，总共 26 位，因此可以用一个 32 位的整数来存储每个字符是否出现过。【例如int[] val = new int[n];中val[0]=11的话就代表1011就代表a,b,d已经出现过了】</p>
<h4 id="13-统计从-0-n-每个数的二进制表示中-1-的个数"><a href="#13-统计从-0-n-每个数的二进制表示中-1-的个数" class="headerlink" title="13. 统计从 0 ~ n 每个数的二进制表示中 1 的个数"></a>13. 统计从 0 ~ n 每个数的二进制表示中 1 的个数</h4><p>给定一个非负整数 <strong>num</strong>。对于 <strong>0 ≤ i ≤ num </strong>范围中的每个数字 <strong>i </strong>，计算其二进制数中的 1 的数目并将它们作为数组返回。</p>
<p>思路:1.Integer.bitCount;2对于数字 6(110)，它可以看成是 4(100) 再加一个 2(10)，因此 dp[i] = dp[i&amp;(i-1)] + 1;</p>
<blockquote>
<p>n&amp;(n-1) 去除 n 的位级表示中最低的那一位。</p>
<p>n&amp;(-n) 得到 n 的位级表示中最低的那一位。</p>
<p>n-n&amp;(~n+1) 去除 n 的位级表示中最高的那一位。</p>
</blockquote>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[spark性能调优]]></title>
      <url>http://haitaochen.github.io/2019/05/08/spark%E6%80%A7%E8%83%BD%E8%B0%83%E4%BC%98/</url>
      <content type="html"><![CDATA[<h4 id="性能调优之在实际项目中分配更多资源"><a href="#性能调优之在实际项目中分配更多资源" class="headerlink" title="性能调优之在实际项目中分配更多资源"></a>性能调优之在实际项目中分配更多资源</h4><a id="more"></a>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line">分配更多资源：性能调优的王道，就是增加和分配更多的资源，性能和速度上的提升，是显而易见的；基本上，在一定范围之内，增加资源与性能的提升，是成正比的；写完了一个复杂的spark作业之后，进行性能调优的时候，首先第一步，我觉得，就是要来调节最优的资源配置；在这个基础之上，如果说你的spark作业，能够分配的资源达到了你的能力范围的顶端之后，无法再分配更多的资源了，公司资源有限；那么才是考虑去做后面的这些性能调优的点。</div><div class="line"></div><div class="line">问题：</div><div class="line">1、分配哪些资源？</div><div class="line">2、在哪里分配这些资源？</div><div class="line">3、为什么多分配了这些资源以后，性能会得到提升？</div><div class="line"></div><div class="line">答案：</div><div class="line"></div><div class="line">1、分配哪些资源？executor、cpu per executor、memory per executor、driver memory</div><div class="line"></div><div class="line">2、在哪里分配这些资源？在我们在生产环境中，提交spark作业时，用的spark-submit shell脚本，里面调整对应的参数</div><div class="line"></div><div class="line">/usr/local/spark/bin/spark-submit \</div><div class="line">--class cn.spark.sparktest.core.WordCountCluster \</div><div class="line">--num-executors 3 \  配置executor的数量</div><div class="line">--driver-memory 100m \  配置driver的内存（影响不大）</div><div class="line">--executor-memory 100m \  配置每个executor的内存大小</div><div class="line">--executor-cores 3 \  配置每个executor的cpu core数量</div><div class="line">/usr/local/SparkTest-0.0.1-SNAPSHOT-jar-with-dependencies.jar \</div><div class="line"></div><div class="line">3、调节到多大，算是最大呢？</div><div class="line"></div><div class="line">第一种，Spark Standalone，公司集群上，搭建了一套Spark集群，你心里应该清楚每台机器还能够给你使用的，大概有多少内存，多少cpu core；那么，设置的时候，就根据这个实际的情况，去调节每个spark作业的资源分配。比如说你的每台机器能够给你使用4G内存，2个cpu core；20台机器；executor，20；4G内存，2个cpu core，平均每个executor。</div><div class="line"></div><div class="line">第二种，Yarn。资源队列。资源调度。应该去查看，你的spark作业，要提交到的资源队列，大概有多少资源？500G内存，100个cpu core；executor，50；10G内存，2个cpu core，平均每个executor。</div><div class="line"></div><div class="line">一个原则，你能使用的资源有多大，就尽量去调节到最大的大小（executor的数量，几十个到上百个不等；executor内存；executor cpu core）</div><div class="line"></div><div class="line">4、为什么调节了资源以后，性能可以提升？</div></pre></td></tr></table></figure>
<p><img src="https://tva4.sinaimg.cn/large/007DFXDhgy1g4no8346a1j30hm0cu75b.jpg" alt="image"></p>
<h4 id="性能调优之在实际项目中调节并行度"><a href="#性能调优之在实际项目中调节并行度" class="headerlink" title="性能调优之在实际项目中调节并行度"></a>性能调优之在实际项目中调节并行度</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line">并行度：其实就是指的是，Spark作业中，各个stage的task数量，也就代表了Spark作业的在各个阶段（stage）的并行度。</div><div class="line"></div><div class="line">如果不调节并行度，导致并行度过低，会怎么样？</div><div class="line"></div><div class="line">假设，现在已经在spark-submit脚本里面，给我们的spark作业分配了足够多的资源，比如50个executor，每个executor有10G内存，每个executor有3个cpu core。基本已经达到了集群或者yarn队列的资源上限。</div><div class="line"></div><div class="line">task没有设置，或者设置的很少，比如就设置了，100个task。50个executor，每个executor有3个cpu core，也就是说，你的Application任何一个stage运行的时候，都有总数在150个cpu core，可以并行运行。但是你现在，只有100个task，平均分配一下，每个executor分配到2个task，ok，那么同时在运行的task，只有100个，每个executor只会并行运行2个task。每个executor剩下的一个cpu core，就浪费掉了。</div><div class="line"></div><div class="line">你的资源虽然分配足够了，但是问题是，并行度没有与资源相匹配，导致你分配下去的资源都浪费掉了。</div><div class="line"></div><div class="line">合理的并行度的设置，应该是要设置的足够大，大到可以完全合理的利用你的集群资源；比如上面的例子，总共集群有150个cpu core，可以并行运行150个task。那么就应该将你的Application的并行度，至少设置成150，才能完全有效的利用你的集群资源，让150个task，并行执行；而且task增加到150个以后，即可以同时并行运行，还可以让每个task要处理的数据量变少；比如总共150G的数据要处理，如果是100个task，每个task计算1.5G的数据；现在增加到150个task，可以并行运行，而且每个task主要处理1G的数据就可以。</div><div class="line"></div><div class="line">很简单的道理，只要合理设置并行度，就可以完全充分利用你的集群计算资源，并且减少每个task要处理的数据量，最终，就是提升你的整个Spark作业的性能和运行速度。</div><div class="line"></div><div class="line">1、task数量，至少设置成与Spark application的总cpu core数量相同（最理想情况，比如总共150个cpu core，分配了150个task，一起运行，差不多同一时间运行完毕）</div><div class="line"></div><div class="line">2、官方是推荐，task数量，设置成spark application总cpu core数量的2~3倍，比如150个cpu core，基本要设置task数量为300~500；</div><div class="line"></div><div class="line">实际情况，与理想情况不同的，有些task会运行的快一点，比如50s就完了，有些task，可能会慢一点，要1分半才运行完，所以如果你的task数量，刚好设置的跟cpu core数量相同，可能还是会导致资源的浪费，因为，比如150个task，10个先运行完了，剩余140个还在运行，但是这个时候，有10个cpu core就空闲出来了，就导致了浪费。那如果task数量设置成cpu core总数的2~3倍，那么一个task运行完了以后，另一个task马上可以补上来，就尽量让cpu core不要空闲，同时也是尽量提升spark作业运行的效率和速度，提升性能。</div><div class="line"></div><div class="line">3、如何设置一个Spark Application的并行度？</div><div class="line">spark.default.parallelism </div><div class="line">SparkConf conf = new SparkConf()</div><div class="line">  .set(&quot;spark.default.parallelism&quot;, &quot;500&quot;)</div><div class="line"></div><div class="line">“重剑无锋”：真正有分量的一些技术和点，其实都是看起来比较平凡，看起来没有那么“炫酷”，但是其实是你每次写完一个spark作业，进入性能调优阶段的时候，应该优先调节的事情，就是这些（大部分时候，可能资源和并行度到位了，spark作业就很快了，几分钟就跑完了）</div><div class="line"></div><div class="line">“炫酷”：数据倾斜（100个spark作业，最多10个会出现真正严重的数据倾斜问题），感冒和发烧，你不能上来就用一些偏方（癌症，用癞蛤蟆熬煮汤药）；JVM调优；</div></pre></td></tr></table></figure>
<h4 id="性能调优之在实际项目中重构RDD架构以及RDD持久化"><a href="#性能调优之在实际项目中重构RDD架构以及RDD持久化" class="headerlink" title="性能调优之在实际项目中重构RDD架构以及RDD持久化"></a>性能调优之在实际项目中重构RDD架构以及RDD持久化</h4><p><img src="https://tva2.sinaimg.cn/large/007DFXDhly1g4np4mwozdj30nx0dj0ud.jpg" alt="image"><br><img src="https://tva3.sinaimg.cn/large/007DFXDhly1g4np5051uwj308k0c3t95.jpg" alt="image"></p>
<p>首先避免第二种情况（上上图红圈2），优化成第一种情况 然后在第一种情况的基础上去持久化RDD</p>
<p><img src="https://tva3.sinaimg.cn/large/007DFXDhgy1g4np85dynrj30nt02d75j.jpg" alt="image"><br><img src="https://tva2.sinaimg.cn/large/007DFXDhgy1g4np8fxw5yj30lt074dk2.jpg" alt="image"></p>
<h4 id="性能调优之在实际项目中广播大变量"><a href="#性能调优之在实际项目中广播大变量" class="headerlink" title="性能调优之在实际项目中广播大变量"></a>性能调优之在实际项目中广播大变量</h4><p><img src="https://tva2.sinaimg.cn/large/007DFXDhgy1g4npm4v7m5j30u01a30y4.jpg" alt="image"></p>
<h4 id="性能调优之在实际项目中使用Kryo序列化"><a href="#性能调优之在实际项目中使用Kryo序列化" class="headerlink" title="性能调优之在实际项目中使用Kryo序列化"></a>性能调优之在实际项目中使用Kryo序列化</h4><p><img src="https://tva4.sinaimg.cn/large/007DFXDhgy1g4nptl33f4j30v60u00wn.jpg" alt="image"></p>
<h4 id="性能调优之在实际项目中使用fastutil优化数据格式"><a href="#性能调优之在实际项目中使用fastutil优化数据格式" class="headerlink" title="性能调优之在实际项目中使用fastutil优化数据格式"></a>性能调优之在实际项目中使用fastutil优化数据格式</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div></pre></td><td class="code"><pre><div class="line">fastutil介绍：</div><div class="line"></div><div class="line">fastutil是扩展了Java标准集合框架（Map、List、Set；HashMap、ArrayList、HashSet）的类库，提供了特殊类型的map、set、list和queue；</div><div class="line">fastutil能够提供更小的内存占用，更快的存取速度；我们使用fastutil提供的集合类，来替代自己平时使用的JDK的原生的Map、List、Set，好处在于，fastutil集合类，可以减小内存的占用，并且在进行集合的遍历、根据索引（或者key）获取元素的值和设置元素的值的时候，提供更快的存取速度；</div><div class="line">fastutil也提供了64位的array、set和list，以及高性能快速的，以及实用的IO类，来处理二进制和文本类型的文件；</div><div class="line">fastutil最新版本要求Java 7以及以上版本；</div><div class="line"></div><div class="line">fastutil的每一种集合类型，都实现了对应的Java中的标准接口（比如fastutil的map，实现了Java的Map接口），因此可以直接放入已有系统的任何代码中。</div><div class="line">fastutil还提供了一些JDK标准类库中没有的额外功能（比如双向迭代器）。</div><div class="line"></div><div class="line">fastutil除了对象和原始类型为元素的集合，fastutil也提供引用类型的支持，但是对引用类型是使用等于号（=）进行比较的，而不是equals()方法。</div><div class="line"></div><div class="line">fastutil尽量提供了在任何场景下都是速度最快的集合类库。</div><div class="line"></div><div class="line">Spark中应用fastutil的场景：</div><div class="line"></div><div class="line">1、如果算子函数使用了外部变量；那么第一，你可以使用Broadcast广播变量优化；第二，可以使用Kryo序列化类库，提升序列化性能和效率；第三，如果外部变量是某种比较大的集合，那么可以考虑使用fastutil改写外部变量，首先从源头上就减少内存的占用，通过广播变量进一步减少内存占用，再通过Kryo序列化类库进一步减少内存占用。</div><div class="line"></div><div class="line">2、在你的算子函数里，也就是task要执行的计算逻辑里面，如果有逻辑中，出现，要创建比较大的Map、List等集合，可能会占用较大的内存空间，而且可能涉及到消耗性能的遍历、存取等集合操作；那么此时，可以考虑将这些集合类型使用fastutil类库重写，使用了fastutil集合类以后，就可以在一定程度上，减少task创建出来的集合类型的内存占用。避免executor内存频繁占满，频繁唤起GC，导致性能下降。</div><div class="line"></div><div class="line">关于fastutil调优的说明：</div><div class="line"></div><div class="line">fastutil其实没有你想象中的那么强大，也不会跟官网上说的效果那么一鸣惊人。广播变量、Kryo序列化类库、fastutil，都是之前所说的，对于性能来说，类似于一种调味品，烤鸡，本来就很好吃了，然后加了一点特质的孜然麻辣粉调料，就更加好吃了一点。分配资源、并行度、RDD架构与持久化，这三个就是烤鸡；broadcast、kryo、fastutil，类似于调料。</div><div class="line"></div><div class="line">比如说，你的spark作业，经过之前一些调优以后，大概30分钟运行完，现在加上broadcast、kryo、fastutil，也许就是优化到29分钟运行完、或者更好一点，也许就是28分钟、25分钟。</div><div class="line"></div><div class="line">shuffle调优，15分钟；groupByKey用reduceByKey改写，执行本地聚合，也许10分钟；跟公司申请更多的资源，比如资源更大的YARN队列，1分钟。</div><div class="line"></div><div class="line">fastutil的使用：</div><div class="line"></div><div class="line">第一步：在pom.xml中引用fastutil的包</div><div class="line">&lt;dependency&gt;</div><div class="line">    &lt;groupId&gt;fastutil&lt;/groupId&gt;</div><div class="line">    &lt;artifactId&gt;fastutil&lt;/artifactId&gt;</div><div class="line">    &lt;version&gt;5.0.9&lt;/version&gt;</div><div class="line">&lt;/dependency&gt;</div><div class="line">速度比较慢，可能是从国外的网去拉取jar包，可能要等待5分钟，甚至几十分钟，不等</div><div class="line"></div><div class="line">List&lt;Integer&gt; =&gt; IntList</div><div class="line"></div><div class="line">基本都是类似于IntList的格式，前缀就是集合的元素类型；特殊的就是Map，Int2IntMap，代表了key-value映射的元素类型。除此之外，刚才也看到了，还支持object、reference。</div></pre></td></tr></table></figure>
<h4 id="性能调优之在实际项目中调节数据本地化等待时长"><a href="#性能调优之在实际项目中调节数据本地化等待时长" class="headerlink" title="性能调优之在实际项目中调节数据本地化等待时长"></a>性能调优之在实际项目中调节数据本地化等待时长</h4><p>这一节印象不是很深<br><img src="https://tva1.sinaimg.cn/large/007DFXDhgy1g4nsbwk9bfj30u01ahdk4.jpg" alt="image"></p>
<p>我理解这个调优的点在于：好的本地化级别，就像是进程间的本地化级别，它计算起来性能高，没错。但是我可能整个集群资源不是很富裕，可能80%的情况都不是task和数据处在同一进程的情况，那这个时候<code>spark.locality.wait.process</code> 就可以设短一点，因为大部分情况你等不到嘛，那你何苦再花时间去尝试走捷径呢（捷径大概率不存在啊）</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[spark数据倾斜解决方案]]></title>
      <url>http://haitaochen.github.io/2019/05/08/spark%E6%95%B0%E6%8D%AE%E5%80%BE%E6%96%9C%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/</url>
      <content type="html"><![CDATA[<h4 id="数据倾斜解决方案之原理以及现象分析"><a href="#数据倾斜解决方案之原理以及现象分析" class="headerlink" title="数据倾斜解决方案之原理以及现象分析"></a>数据倾斜解决方案之原理以及现象分析</h4><a id="more"></a>
<p><img src="https://tva2.sinaimg.cn/large/007DFXDhgy1g4nxxcbt4sj30u0134gpk.jpg" alt="image"></p>
<h4 id="数据倾斜解决方案之聚合源数据以及过滤导致倾斜的key"><a href="#数据倾斜解决方案之聚合源数据以及过滤导致倾斜的key" class="headerlink" title="数据倾斜解决方案之聚合源数据以及过滤导致倾斜的key"></a>数据倾斜解决方案之聚合源数据以及过滤导致倾斜的key</h4><p><img src="https://tva1.sinaimg.cn/large/007DFXDhgy1g4nyb51bf9j30s21gujv1.jpg" alt="image"></p>
<h4 id="084-用户访问session分析-数据倾斜解决方案之提高shuffle操作reduce并行度"><a href="#084-用户访问session分析-数据倾斜解决方案之提高shuffle操作reduce并行度" class="headerlink" title="084.用户访问session分析-数据倾斜解决方案之提高shuffle操作reduce并行度"></a>084.用户访问session分析-数据倾斜解决方案之提高shuffle操作reduce并行度</h4><p><img src="https://tva2.sinaimg.cn/large/007DFXDhgy1g4nyvdqjzaj30u00uqq5f.jpg" alt="image"></p>
<h4 id="数据倾斜解决方案之使用随机key实现双重聚合"><a href="#数据倾斜解决方案之使用随机key实现双重聚合" class="headerlink" title="数据倾斜解决方案之使用随机key实现双重聚合"></a>数据倾斜解决方案之使用随机key实现双重聚合</h4><p><img src="https://tva3.sinaimg.cn/large/007DFXDhgy1g4nyznn598j30y20ocq4j.jpg" alt="image"></p>
<h4 id="数据倾斜解决方案之将reduce-join转换为map-join"><a href="#数据倾斜解决方案之将reduce-join转换为map-join" class="headerlink" title="数据倾斜解决方案之将reduce join转换为map join"></a>数据倾斜解决方案之将reduce join转换为map join</h4><p><img src="https://tva3.sinaimg.cn/large/007DFXDhgy1g4nz95z8xbj30y20skgnt.jpg" alt="image"></p>
<h4 id="数据倾斜解决方案之sample采样倾斜key单独进行join"><a href="#数据倾斜解决方案之sample采样倾斜key单独进行join" class="headerlink" title="数据倾斜解决方案之sample采样倾斜key单独进行join"></a>数据倾斜解决方案之sample采样倾斜key单独进行join</h4><p><img src="https://tva3.sinaimg.cn/large/007DFXDhgy1g4nzm7xempj30u01bhgp4.jpg" alt="image"></p>
<h4 id="数据倾斜解决方案之使用随机数以及扩容表进行join"><a href="#数据倾斜解决方案之使用随机数以及扩容表进行join" class="headerlink" title="数据倾斜解决方案之使用随机数以及扩容表进行join"></a>数据倾斜解决方案之使用随机数以及扩容表进行join</h4><p><img src="https://tva1.sinaimg.cn/large/007DFXDhgy1g4o0857rfzj30w20skgnh.jpg" alt="image"></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">Rdd2 （比如n=10）,就扩成1_1,3/2_1,3/3_1,3/…/9_1,3/10_1,3; 1_2,1/2_2,1/3_2,1/…/9_2,1/10_2,1;(共20个)</div><div class="line">RDD1(比如n=10),就随机阔成2_1,1/3_1,2（2个）</div></pre></td></tr></table></figure>
<h4 id="spark-SQL-数据倾斜"><a href="#spark-SQL-数据倾斜" class="headerlink" title="spark SQL 数据倾斜"></a>spark SQL 数据倾斜</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">1、聚合源数据</div><div class="line">2、过滤导致倾斜的key</div><div class="line">3、提高shuffle并行度：spark.sql.shuffle.partitions</div><div class="line">4、双重group by</div><div class="line">5、reduce join转换为map join：spark.sql.autoBroadcastJoinThreshold</div><div class="line">6、采样倾斜key并单独进行join</div><div class="line">7、随机key与扩容表</div><div class="line"></div><div class="line">由于Spark的这种都是基于RDD的特性；哪怕是Spark SQL，原本你是用纯的SQL来实现的；各位想一想，其实你用纯RDD，也能够实现一模一样的功能。</div><div class="line"></div><div class="line">之前使用在Spark Core中的数据倾斜解决方案，全部都可以直接套用在Spark SQL上。（它意思是不用spark sql 这种一条SQL 就能解决业务逻辑的方法 反而 用写代码的方式 比如 group by 明明可以 放在 SQL 语句中 但这里他要 用 spark core 里面的 rdd 的groupByKey算子 实现业务需求 那样 自然就能用之前讲的 spark core的数据倾斜解决方案 解决数据倾斜了）</div><div class="line"></div><div class="line">我们要讲一下，之前讲解的方案，如果是用纯的Spark SQL来实现，应该如何来实现。</div><div class="line"></div><div class="line">1、聚合源数据：Spark Core和Spark SQL没有任何的区别</div><div class="line">2、过滤导致倾斜的key：在sql中用where条件</div><div class="line">3、提高shuffle并行度：groupByKey(1000)，spark.sql.shuffle.partitions（默认是200）</div><div class="line">4、双重group by：改写SQL，两次group by(cht注：给某一个字段对应数据的值加上随机前缀（用sparkSQL的自定义函数实现）)</div><div class="line">5、reduce join转换为map join：spark.sql.autoBroadcastJoinThreshold（默认是10485760 ）</div><div class="line">  你可以自己将表做成RDD，自己手动去实现map join</div><div class="line">  Spark SQL内置的map join，默认是如果有一个小表，是在10M以内，默认就会将该表进行broadcast，然后执行map join；调节这个阈值，比如调节到20M、50M、甚至1G。20 971 520</div><div class="line">6、采样倾斜key并单独进行join：纯Spark Core的一种方式，sample、filter等算子（不是特别适用于spark SQL，如果要用这个 就得把业务逻辑用spark core 去实现）</div><div class="line">7、随机key与扩容表：Spark SQL+Spark Core</div></pre></td></tr></table></figure>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[spark的JVM调优]]></title>
      <url>http://haitaochen.github.io/2019/05/08/spark%E7%9A%84JVM%E8%B0%83%E4%BC%98/</url>
      <content type="html"><![CDATA[<h4 id="JVM调优之原理概述以及降低cache操作的内存占比"><a href="#JVM调优之原理概述以及降低cache操作的内存占比" class="headerlink" title="JVM调优之原理概述以及降低cache操作的内存占比"></a>JVM调优之原理概述以及降低cache操作的内存占比</h4><a id="more"></a>
<p><img src="https://tva2.sinaimg.cn/large/007DFXDhgy1g4nstgmah0j30u01fodla.jpg" alt="image"><br>总结：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">内存不充足的时候，问题：</div><div class="line">1、频繁minor gc，也会导致频繁spark停止工作</div><div class="line">2、老年代囤积大量活跃对象（短生命周期的对象），导致频繁full gc，full gc时间很长，短则数十秒，长则数分钟，甚至数小时。可能导致spark长时间停止工作。</div><div class="line">3、严重影响咱们的spark的性能和运行的速度。</div></pre></td></tr></table></figure></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">JVM调优的第一个点：降低cache操作的内存占比</div><div class="line"></div><div class="line">spark中，堆内存又被划分成了两块儿，一块儿是专门用来给RDD的cache、persist操作进行RDD数据缓存用的；另外一块儿，就是我们刚才所说的，用来给spark算子函数的运行使用的，存放函数中自己创建的对象。</div><div class="line"></div><div class="line">默认情况下，给RDD cache操作的内存占比，是0.6，60%的内存都给了cache操作了。但是问题是，如果某些情况下，cache不是那么的紧张，问题在于task算子函数中创建的对象过多，然后内存又不太大，导致了频繁的minor gc，甚至频繁full gc，导致spark频繁的停止工作。性能影响会很大。</div></pre></td></tr></table></figure>
<h4 id="调节executor堆外内存与连接等待时长"><a href="#调节executor堆外内存与连接等待时长" class="headerlink" title="调节executor堆外内存与连接等待时长"></a>调节executor堆外内存与连接等待时长</h4><p>这个印象也不深<br><img src="https://tva1.sinaimg.cn/large/007DFXDhgy1g4ntu3pnduj30u01ra0yi.jpg" alt="image"><br><img src="https://tva1.sinaimg.cn/large/007DFXDhgy1g4ntuqhhs9j30ry0d6gmu.jpg" alt="image"></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[spark算子调优]]></title>
      <url>http://haitaochen.github.io/2019/05/07/spark%E7%AE%97%E5%AD%90%E8%B0%83%E4%BC%98/</url>
      <content type="html"><![CDATA[<h3 id="算子调优"><a href="#算子调优" class="headerlink" title="算子调优"></a>算子调优</h3><h4 id="算子调优之MapPartitions提升Map类操作性能"><a href="#算子调优之MapPartitions提升Map类操作性能" class="headerlink" title="算子调优之MapPartitions提升Map类操作性能"></a>算子调优之MapPartitions提升Map类操作性能</h4><a id="more"></a>
<p><img src="https://tva4.sinaimg.cn/large/007DFXDhgy1g4nve5lnn0j30w20ridhq.jpg" alt="image"></p>
<h4 id="算子调优之filter过后使用coalesce减少分区数量"><a href="#算子调优之filter过后使用coalesce减少分区数量" class="headerlink" title="算子调优之filter过后使用coalesce减少分区数量"></a>算子调优之filter过后使用coalesce减少分区数量</h4><p>印象不深<br><img src="https://tva2.sinaimg.cn/large/007DFXDhgy1g4nvm7giqdj30w20rijti.jpg" alt="image"></p>
<h4 id="算子调优之使用foreachPartition优化写数据库性能"><a href="#算子调优之使用foreachPartition优化写数据库性能" class="headerlink" title="算子调优之使用foreachPartition优化写数据库性能"></a>算子调优之使用foreachPartition优化写数据库性能</h4><p><img src="https://tva2.sinaimg.cn/large/007DFXDhgy1g4nvs5p4oxj30u00zm76x.jpg" alt="image"></p>
<h4 id="算子调优之使用repartition解决Spark-SQL低并行度的性能问题"><a href="#算子调优之使用repartition解决Spark-SQL低并行度的性能问题" class="headerlink" title="算子调优之使用repartition解决Spark SQL低并行度的性能问题"></a>算子调优之使用repartition解决Spark SQL低并行度的性能问题</h4><p><img src="https://tva4.sinaimg.cn/large/007DFXDhgy1g4nw8r8sb3j30u00zv0w0.jpg" alt="image"><br><img src="https://tva2.sinaimg.cn/large/007DFXDhgy1g4nwabrkcvj30m20e0gn9.jpg" alt="image"></p>
<h4 id="算子调优之reduceByKey本地聚合介绍"><a href="#算子调优之reduceByKey本地聚合介绍" class="headerlink" title="算子调优之reduceByKey本地聚合介绍"></a>算子调优之reduceByKey本地聚合介绍</h4><p><img src="https://tva1.sinaimg.cn/large/007DFXDhgy1g4nwxttj1uj30y20tmacj.jpg" alt="image"></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[spark的shuffle调优]]></title>
      <url>http://haitaochen.github.io/2019/05/07/spark%E7%9A%84shuffle%E8%B0%83%E4%BC%98/</url>
      <content type="html"><![CDATA[<h3 id="shuffle调优"><a href="#shuffle调优" class="headerlink" title="shuffle调优"></a>shuffle调优</h3><h4 id="原理概述"><a href="#原理概述" class="headerlink" title="原理概述"></a>原理概述</h4><a id="more"></a>
<p><img src="https://tva3.sinaimg.cn/large/007DFXDhgy1g4nu2h0zgfj30xw0u0dir.jpg" alt="image"></p>
<h4 id="Shuffle调优之合并map端输出文件"><a href="#Shuffle调优之合并map端输出文件" class="headerlink" title="Shuffle调优之合并map端输出文件"></a>Shuffle调优之合并map端输出文件</h4><p><img src="https://tva1.sinaimg.cn/large/007DFXDhgy1g4nunwg84bj30u01mndlq.jpg" alt="image"></p>
<h4 id="Shuffle调优之调节map端内存缓冲与reduce端内存占比"><a href="#Shuffle调优之调节map端内存缓冲与reduce端内存占比" class="headerlink" title="Shuffle调优之调节map端内存缓冲与reduce端内存占比"></a>Shuffle调优之调节map端内存缓冲与reduce端内存占比</h4><p><img src="https://tva3.sinaimg.cn/large/007DFXDhgy1g4nuvt2p2sj30u01hw790.jpg" alt="image"></p>
<h4 id="Shuffle调优之HashShuffleManager与SortShuffleManager"><a href="#Shuffle调优之HashShuffleManager与SortShuffleManager" class="headerlink" title="Shuffle调优之HashShuffleManager与SortShuffleManager"></a>Shuffle调优之HashShuffleManager与SortShuffleManager</h4><p>好复杂。。。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[spark的troubleshooting]]></title>
      <url>http://haitaochen.github.io/2019/05/07/spark%E7%9A%84troubleshooting/</url>
      <content type="html"><![CDATA[<h3 id="troubleshooting"><a href="#troubleshooting" class="headerlink" title="troubleshooting"></a>troubleshooting</h3><h4 id="troubleshooting之控制shuffle-reduce端缓冲大小以避免OOM"><a href="#troubleshooting之控制shuffle-reduce端缓冲大小以避免OOM" class="headerlink" title="troubleshooting之控制shuffle reduce端缓冲大小以避免OOM"></a>troubleshooting之控制shuffle reduce端缓冲大小以避免OOM</h4><a id="more"></a>
<p><img src="https://tva2.sinaimg.cn/large/007DFXDhgy1g4nx5fa9alj30u00uajuc.jpg" alt="image"></p>
<p>画的图 所举的例子  以 hashshufflemanager</p>
<h4 id="troubleshooting之解决JVM-GC导致的shuffle文件拉取失败"><a href="#troubleshooting之解决JVM-GC导致的shuffle文件拉取失败" class="headerlink" title="troubleshooting之解决JVM GC导致的shuffle文件拉取失败"></a>troubleshooting之解决JVM GC导致的shuffle文件拉取失败</h4><p><img src="https://tva3.sinaimg.cn/large/007DFXDhgy1g4nxbe3b0xj30uo0u0tbr.jpg" alt="image"></p>
<p>总结来说就是executor拉取上一个stage的数据时，不巧，遇到了别人在gc.</p>
<p>关于blockmanager：<br>见word笔记</p>
<h4 id="troubleshooting之解决YARN队列资源不足导致的application直接失败"><a href="#troubleshooting之解决YARN队列资源不足导致的application直接失败" class="headerlink" title="troubleshooting之解决YARN队列资源不足导致的application直接失败"></a>troubleshooting之解决YARN队列资源不足导致的application直接失败</h4><p>yarn 什么的不懂。。不记了。。</p>
<h4 id="troubleshooting之解决各种序列化导致的报错"><a href="#troubleshooting之解决各种序列化导致的报错" class="headerlink" title="troubleshooting之解决各种序列化导致的报错"></a>troubleshooting之解决各种序列化导致的报错</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div></pre></td><td class="code"><pre><div class="line">你会看到什么样的序列化导致的报错？</div><div class="line"></div><div class="line">用client模式去提交spark作业，观察本地打印出来的log。如果出现了类似于Serializable、Serialize等等字眼，报错的log，那么恭喜大家，就碰到了序列化问题导致的报错。</div><div class="line"></div><div class="line">虽然是报错，但是序列化报错，应该是属于比较简单的了，很好处理。</div><div class="line"></div><div class="line">序列化报错要注意的三个点：</div><div class="line"></div><div class="line">1、你的算子函数里面，如果使用到了外部的自定义类型的变量，那么此时，就要求你的自定义类型，必须是可序列化的。</div><div class="line"></div><div class="line">final Teacher teacher = new Teacher(&quot;leo&quot;);</div><div class="line"></div><div class="line">studentsRDD.foreach(new VoidFunction() &#123;</div><div class="line"> </div><div class="line">public void call(Row row) throws Exception &#123;</div><div class="line">  String teacherName = teacher.getName();</div><div class="line">  ....  </div><div class="line">&#125;</div><div class="line"></div><div class="line">&#125;);</div><div class="line"></div><div class="line">public class Teacher implements Serializable &#123;</div><div class="line">  </div><div class="line">&#125;</div><div class="line"></div><div class="line">2、如果要将自定义的类型，作为RDD的元素类型，那么自定义的类型也必须是可以序列化的</div><div class="line"></div><div class="line">JavaPairRDD&lt;Integer, Teacher&gt; teacherRDD</div><div class="line">JavaPairRDD&lt;Integer, Student&gt; studentRDD</div><div class="line">studentRDD.join(teacherRDD)</div><div class="line"></div><div class="line">public class Teacher implements Serializable &#123;</div><div class="line">  </div><div class="line">&#125;</div><div class="line"></div><div class="line">public class Student implements Serializable &#123;</div><div class="line">  </div><div class="line">&#125;</div><div class="line"></div><div class="line">3、不能在上述两种情况下，去使用一些第三方的，不支持序列化的类型</div><div class="line"></div><div class="line">Connection conn = </div><div class="line"></div><div class="line">studentsRDD.foreach(new VoidFunction() &#123;</div><div class="line"> </div><div class="line">public void call(Row row) throws Exception &#123;</div><div class="line">  conn.....</div><div class="line">&#125;</div><div class="line"></div><div class="line">&#125;);</div><div class="line"></div><div class="line">Connection是不支持序列化的</div></pre></td></tr></table></figure>
<h4 id="troubleshooting之解决算子函数返回NULL导致的问题"><a href="#troubleshooting之解决算子函数返回NULL导致的问题" class="headerlink" title="troubleshooting之解决算子函数返回NULL导致的问题"></a>troubleshooting之解决算子函数返回NULL导致的问题</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">在算子函数中，返回null</div><div class="line"></div><div class="line">//		return actionRDD.mapToPair(new PairFunction&lt;Row, String, Row&gt;() &#123;</div><div class="line">//</div><div class="line">//			private static final long serialVersionUID = 1L;</div><div class="line">//			</div><div class="line">//			@Override</div><div class="line">//			public Tuple2&lt;String, Row&gt; call(Row row) throws Exception &#123;</div><div class="line">//				return new Tuple2&lt;String, Row&gt;(&quot;-999&quot;, RowFactory.createRow(&quot;-999&quot;));  </div><div class="line">//			&#125;</div><div class="line">//			</div><div class="line">//		&#125;);</div><div class="line"></div><div class="line">大家可以看到，在有些算子函数里面，是需要我们有一个返回值的。但是，有时候，我们可能对某些值，就是不想有什么返回值。我们如果直接返回NULL的话，那么可以不幸的告诉大家，是不行的，会报错的。</div><div class="line"></div><div class="line">Scala.Math(NULL)，异常</div><div class="line"></div><div class="line">如果碰到你的确是对于某些值，不想要有返回值的话，有一个解决的办法：</div><div class="line"></div><div class="line">1、在返回的时候，返回一些特殊的值，不要返回null，比如“-999”</div><div class="line">2、在通过算子获取到了一个RDD之后，可以对这个RDD执行filter操作，进行数据过滤。filter内，可以对数据进行判定，如果是-999，那么就返回false，给过滤掉就可以了。</div><div class="line">3、大家不要忘了，之前咱们讲过的那个算子调优里面的coalesce算子，在filter之后，可以使用coalesce算子压缩一下RDD的partition的数量，让各个partition的数据比较紧凑一些。也能提升一些性能。</div></pre></td></tr></table></figure>
<h4 id="troubleshooting之解决yarn-client模式导致的网卡流量激增问题"><a href="#troubleshooting之解决yarn-client模式导致的网卡流量激增问题" class="headerlink" title="troubleshooting之解决yarn-client模式导致的网卡流量激增问题"></a>troubleshooting之解决yarn-client模式导致的网卡流量激增问题</h4><p>什么client模式的。。不记了。。。</p>
<h4 id="troubleshooting之解决yarn-client模式导致的网卡流量激增问题-1"><a href="#troubleshooting之解决yarn-client模式导致的网卡流量激增问题-1" class="headerlink" title="troubleshooting之解决yarn-client模式导致的网卡流量激增问题"></a>troubleshooting之解决yarn-client模式导致的网卡流量激增问题</h4><p>什么client模式的。。不记了。。。</p>
<h4 id="troubleshooting之错误的持久化方式以及checkpoint的使用"><a href="#troubleshooting之错误的持久化方式以及checkpoint的使用" class="headerlink" title="troubleshooting之错误的持久化方式以及checkpoint的使用"></a>troubleshooting之错误的持久化方式以及checkpoint的使用</h4><ul>
<li>错误的持久化使用方式：</li>
</ul>
<p><img src="https://tva2.sinaimg.cn/large/007DFXDhgy1g4nxolyq3xj30ly0bddio.jpg" alt="image"></p>
<ul>
<li>checkpoint<br><img src="https://tva1.sinaimg.cn/large/007DFXDhgy1g4nxs24ih4j30xw0u0whi.jpg" alt="image"></li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[wordcount生成几个RDD]]></title>
      <url>http://haitaochen.github.io/2019/03/04/wordcount%E7%94%9F%E6%88%90%E5%87%A0%E4%B8%AARDD/</url>
      <content type="html"><![CDATA[<h4 id="wordCount执行过程详解"><a href="#wordCount执行过程详解" class="headerlink" title="wordCount执行过程详解"></a>wordCount执行过程详解</h4><blockquote>
<p>wc过程有几个RDD？</p>
</blockquote>
<a id="more"></a>
<h5 id="wc代码"><a href="#wc代码" class="headerlink" title="wc代码"></a>wc代码</h5><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//创建spark配置，设置应用程序名字</span></div><div class="line"><span class="comment">//val conf = new SparkConf().setAppName("ScalaWordCount")</span></div><div class="line"><span class="keyword">val</span> conf = <span class="keyword">new</span> <span class="type">SparkConf</span>().setAppName(<span class="string">"ScalaWordCount"</span>).setMaster(<span class="string">"local[4]"</span>)</div><div class="line"><span class="comment">//创建spark执行的入口</span></div><div class="line"><span class="keyword">val</span> sc = <span class="keyword">new</span> <span class="type">SparkContext</span>(conf)</div><div class="line"><span class="comment">//指定以后从哪里读取数据创建RDD（弹性分布式数据集）</span></div><div class="line"><span class="keyword">val</span> lines: <span class="type">RDD</span>[<span class="type">String</span>] = sc.textFile(<span class="string">"hdfs://node-4:9000/wc1"</span>, <span class="number">1</span>)<span class="comment">//no1</span></div><div class="line">lines.cache()</div><div class="line"><span class="comment">//lines.partitions.length</span></div><div class="line"><span class="comment">//切分压平</span></div><div class="line"><span class="keyword">val</span> words: <span class="type">RDD</span>[<span class="type">String</span>] = lines.flatMap(_.split(<span class="string">" "</span>))<span class="comment">//no2</span></div><div class="line"><span class="comment">//将单词和一组合</span></div><div class="line"><span class="keyword">val</span> wordAndOne: <span class="type">RDD</span>[(<span class="type">String</span>, <span class="type">Int</span>)] = words.map((_, <span class="number">1</span>))<span class="comment">//no3</span></div><div class="line"><span class="comment">//按key进行聚合</span></div><div class="line"><span class="keyword">val</span> reduced:<span class="type">RDD</span>[(<span class="type">String</span>, <span class="type">Int</span>)] = wordAndOne.reduceByKey(_+_)<span class="comment">//no4</span></div><div class="line"></div><div class="line">reduced.saveAsTextFile(args(<span class="number">1</span>))<span class="comment">//no5</span></div><div class="line"><span class="comment">//释放资源</span></div><div class="line">sc.stop()</div></pre></td></tr></table></figure>
<!-- more -->
<p>no1 查看textFile源码<br><img src="https://tva2.sinaimg.cn/large/007DFXDhgy1g4j8qqe5v0j30ly0dbdmp.jpg" alt="image"></p>
<p>继续查看hadoopFile源码<br><img src="https://tva3.sinaimg.cn/large/007DFXDhgy1g4j9dry0yzj30pl0g3wfw.jpg" alt="image"></p>
<p>可以看到会返回一个hadooprdd<br>同样可以看到line:1000 里的K是偏移量 V 是内容<br>但是ScalaWorldCount代码里的<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">val lines: RDD[String] = sc.textFile(&quot;hdfs://node-4:9000/wc1&quot;, 1)//no1</div></pre></td></tr></table></figure></p>
<p>返回的RDD 只有String即内容 而没有偏移量;为什么呢？<br>原因就是下图还有一个map操作<br><img src="https://tva2.sinaimg.cn/large/007DFXDhgy1g4j9myz7yaj30p20andgq.jpg" alt="image"></p>
<p>所以说ScalaWordCount代码里的：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">val lines: RDD[String] = sc.textFile(&quot;hdfs://node-4:9000/wc1&quot;, 1)//no1</div></pre></td></tr></table></figure></p>
<p>就生成2个RDD(第一个是上面的hadoopfile 生成的rdd 另一个就是这里的map操作再生成一个RDD)</p>
<p>no2 和no3 再生成2个RDD</p>
<p>no4</p>
<p>查看reduceByKey源码，-&gt;reduceByKey-&gt;combineByKeyWithClassTag<br>来到PairRDDFunctions.scala 的combineByKeyWithClassTag方法</p>
<p><img src="https://tva4.sinaimg.cn/large/007DFXDhgy1g4j9t6knmoj30pk0f00u1.jpg" alt="image"></p>
<p>里面会生成一个shuffledRDD</p>
<p>no5<br>然后再看saveAsTextFile 他是一个action 但也会生成一个RDD(我感觉就是因为下面saveAsTextFile源码里面有个mapPartition)</p>
<p>查看跟踪saveAsTextFile源码</p>
<p><img src="https://tva2.sinaimg.cn/large/007DFXDhgy1g4j9y5h65nj30i40dhdi7.jpg" alt="image"></p>
<p>因此，总共6种RDD</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[spark安装]]></title>
      <url>http://haitaochen.github.io/2018/10/15/spark%E5%AE%89%E8%A3%85/</url>
      <content type="html"><![CDATA[<h3 id="spark-2-1-0-源码安装"><a href="#spark-2-1-0-源码安装" class="headerlink" title="spark-2.1.0 源码安装"></a>spark-2.1.0 源码安装</h3><h4 id="前置"><a href="#前置" class="headerlink" title="前置"></a>前置</h4><p>jdk1.7.0_79</p>
<p>scala-2.11.8</p>
<p>apache-maven-3.3.9 </p>
<a id="more"></a>
<h4 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h4><h4 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h4><p>./build/mvn -Dhttps.protocols=TLSv1,TLSv1.1,TLSv1.2 -Pyarn -Phadoop-2.6 -Dhadoop.version=2.6.0-cdh5.7.0 -DskipTests clean package</p>
<ul>
<li><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">export MAVEN_OPTS=&quot;-Xmx2g -XX:MaxPermSize=512M -XX:ReservedCodeCacheSize=512M -XX：MaxPermSize = 512M&quot;</div></pre></td></tr></table></figure>
</li>
<li><p>######指定scala版本</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">./dev/change-scala-version.sh 2.11</div></pre></td></tr></table></figure>
<p>​</p>
</li>
</ul>
<h4 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h4><p>./dev/make-distribution.sh –name 2.6.0-cdh5.7.0 –tgz  -Pyarn -Phadoop-2.6 -Phive -Phive-thriftserver -Dhadoop.version=2.6.0-cdh5.7.0</p>
<ul>
<li><p>修改/dev/make-distribution.sh里面的脚本</p>
<p>1.将VERSION ，SCALA_VERSION ，SPARK_HADOOP_VERSION ，SPARK_HIVE注释掉，直接写上自己的版本</p>
<p>#VERSION=$(“$MVN” help:evaluate -Dexpression=project.version $@ 2&gt;/dev/null | grep -v “INFO” | tail -n 1)        指的是spark2.1.0这个版本</p>
<p>#SCALA_VERSION=$(“$MVN” help:evaluate -Dexpression=scala.binary.version $@ 2&gt;/dev/null\    指的是scala 2.11</p>
<p>#    | grep -v “INFO”\</p>
<p>#    | tail -n 1)</p>
<p>#SPARK_HADOOP_VERSION=$(“$MVN” help:evaluate -Dexpression=hadoop.version $@ 2&gt;/dev/null\  指的是hadoop.version=2.6.0-cdh5.7.0</p>
<p>#    | grep -v “INFO”\</p>
<p>#    | tail -n 1)</p>
<p>#SPARK_HIVE=$(“$MVN” help:evaluate -Dexpression=project.activeProfiles -pl sql/hive $@ 2&gt;/dev/null\    SPARK_HIVE为1表示支持</p>
<p>#    | grep -v “INFO”\</p>
<p>#    | fgrep –count “<id>hive</id>“;\</p>
<p>#    # Reset exit status to 0, otherwise the script stops here if the last grep finds nothing\</p>
<p>#    # because we use “set -o pipefail”</p>
<p>#    echo -n)</p>
<p>将以下的内容贴在注释掉的那个脚本的后面即可</p>
<p>VERSION=2.1.0</p>
<p>SCALA_VERSION=2.11   </p>
<p>SPARK_HADOOP_VERSION=2.6.0-cdh5.7.0</p>
<p>SPARK_HIVE=1</p>
</li>
</ul>
<ul>
<li><h6 id="指定scala版本"><a href="#指定scala版本" class="headerlink" title="指定scala版本"></a>指定scala版本</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">./dev/change-scala-version.sh 2.11</div></pre></td></tr></table></figure>
</li>
</ul>
<h4 id="坑0"><a href="#坑0" class="headerlink" title="坑0"></a>坑0</h4><p>问题1：[ERROR] Failed to execute goal on project spark-launcher_2.11: Could not resolve dependencies for project org.apache.spark:spark-launcher_2.11:jar:2.2.0: Failure to find org.apache.hadoop:hadoop-client:jar:2.6.0-cdh5.7.0 in <a href="https://repo1.maven.org/maven2" target="_blank" rel="external">https://repo1.maven.org/maven2</a> was cached in the local repository, resolution will not be reattempted until the update interval of central has elapsed or updates are forced -&gt; [Help 1]</p>
<p>######这是因为默认的是apache的仓库，但是我们hadoop的版本写的是CDH，这时要将CDH的仓库配进来，打开spark目录下的pom.xml文件，将CDH的仓库配进去</p>
<p>​          vi  /usr/local/spark-test/app/spark-2.2.0/pom.xml     添加如下   </p>
<p>​               <repository></repository></p>
<p>​                <id>cloudera</id></p>
<p>​                <name>cloudera Repository</name></p>
<p>​                <url><a href="https://repository.cloudera.com/artifactory/cloudera-repos" target="_blank" rel="external">https://repository.cloudera.com/artifactory/cloudera-repos</a></url></p>
<p>​               </p>
<h6 id="添加时注意区分空格和tab，格式不对会在mvn-编译时报错"><a href="#添加时注意区分空格和tab，格式不对会在mvn-编译时报错" class="headerlink" title="添加时注意区分空格和tab，格式不对会在mvn 编译时报错"></a>添加时注意区分空格和tab，格式不对会在mvn 编译时报错</h6><h4 id="坑一"><a href="#坑一" class="headerlink" title="坑一"></a>坑一</h4><p>Failed to execute goal net.alchim31.maven:scala-maven-plugin:3.2.2:compile (scala-compile-first) on project spark-tags_2.11: wrap: java.io.IOException: Cannot run program “/home/c/hadoop/jdk1.7.0_79/jre/bin/java” (in directory “.”): error=13, Permission denied -&gt; [</p>
<h6 id="解决：将jdk1-7-0-79-整个文件夹-chmod-R-777"><a href="#解决：将jdk1-7-0-79-整个文件夹-chmod-R-777" class="headerlink" title="解决：将jdk1.7.0_79 整个文件夹 chmod -R 777"></a>解决：将jdk1.7.0_79 整个文件夹 chmod -R 777</h6><h4 id="坑二"><a href="#坑二" class="headerlink" title="坑二"></a>坑二</h4><p>maven 编译时 报错：</p>
<p>Received fatal alert: handshake_failure还有ssl 提醒之类的错误</p>
<p>解决：将pom.xml</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">repository</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">id</span>&gt;</span>cloudera<span class="tag">&lt;/<span class="name">id</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">name</span>&gt;</span>cloudera Repository<span class="tag">&lt;/<span class="name">name</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">url</span>&gt;</span>https://repository.cloudera.com/artifactory/cloudera-repos<span class="tag">&lt;/<span class="name">url</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">repository</span>&gt;</span></div></pre></td></tr></table></figure>
<p>里的https 改成 http</p>
<h4 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h4><p><a href="https://blog.csdn.net/chen_1122/article/details/77935149" target="_blank" rel="external">https://blog.csdn.net/chen_1122/article/details/77935149</a></p>
<p><a href="https://blog.csdn.net/jiaotangX/article/details/78635133" target="_blank" rel="external">https://blog.csdn.net/jiaotangX/article/details/78635133</a></p>
<p><a href="https://blog.csdn.net/suisongtiao1799/article/details/80223068" target="_blank" rel="external">https://blog.csdn.net/suisongtiao1799/article/details/80223068</a></p>
<p><a href="http://feitianbenyue.iteye.com/blog/2429045" target="_blank" rel="external">http://feitianbenyue.iteye.com/blog/2429045</a></p>
<h4 id="坑四"><a href="#坑四" class="headerlink" title="坑四"></a>坑四</h4><p>因为之前的命令里面没有编译安装hive模块，所以在用spark-sql 访问 hive 时报错（提示你需要build hive和hive-thriftserver 类似的信息）以及用spark-shell访问没反应（明明hive里面有表，运行spark.sql(“show tables”).show 不显示应有数据）</p>
<p>执行：</p>
<figure class="highlight powershell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">./build/mvn -Dhttps.protocols=TLSv1,TLSv1.<span class="number">1</span>,TLSv1.<span class="number">2</span> -Pyarn -Phadoop-<span class="number">2.6</span> -Phive -Phive-thriftserver -Dhadoop.version=<span class="number">2.6</span>.<span class="number">0</span>-cdh5.<span class="number">7.0</span> -DskipTests clean package</div></pre></td></tr></table></figure>
<p>把hive 的依赖 加上去重新编译</p>
<p>重新编译过程中可能出现的问题</p>
<p><a href="https://stackoverflow.com/questions/36651611/failed-to-execute-goal-net-alchim31-mavenscala-maven-plugin3-2-2" target="_blank" rel="external">https://stackoverflow.com/questions/36651611/failed-to-execute-goal-net-alchim31-mavenscala-maven-plugin3-2-2</a></p>
<p>确保编译过程中有网</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[ubuntu16.04配置静态IP]]></title>
      <url>http://haitaochen.github.io/2018/09/22/vmware%E4%B8%8B%E4%B8%BAubuntu16-04-desktop-%E9%85%8D%E7%BD%AE%E9%9D%99%E6%80%81IP-%E5%B9%B6-%E5%8F%AF%E4%BE%9Bssh-%E8%AE%BF%E9%97%AE/</url>
      <content type="html"><![CDATA[<h3 id="vmware下为ubuntu16-04-desktop-配置静态IP-并-可供ssh-访问"><a href="#vmware下为ubuntu16-04-desktop-配置静态IP-并-可供ssh-访问" class="headerlink" title="vmware下为ubuntu16.04 desktop 配置静态IP 并 可供ssh 访问"></a>vmware下为ubuntu16.04 desktop 配置静态IP 并 可供ssh 访问</h3><p><a href="https://blog.csdn.net/LiuMiao1128/article/details/52449683" target="_blank" rel="external">https://blog.csdn.net/LiuMiao1128/article/details/52449683</a></p>
<h4 id="一-。为ubuntu-设置静态IP"><a href="#一-。为ubuntu-设置静态IP" class="headerlink" title="一 。为ubuntu 设置静态IP"></a>一 。为ubuntu 设置静态IP</h4><h5 id="1-在vmware下配置网络环境"><a href="#1-在vmware下配置网络环境" class="headerlink" title="1.在vmware下配置网络环境"></a>1.在vmware下配置网络环境</h5><h5 id="VMware在默认安装完成之后，会创建三个虚拟的网络环境：VMnet0、VMnet1和VMnet8。其类型分别为：桥接网络，Host-only和NAT。其中，NAT表示VMWware内安装的Ubuntu将会在一个子网中，VMware通过网络地址转换，通过物理机的IP上网。"><a href="#VMware在默认安装完成之后，会创建三个虚拟的网络环境：VMnet0、VMnet1和VMnet8。其类型分别为：桥接网络，Host-only和NAT。其中，NAT表示VMWware内安装的Ubuntu将会在一个子网中，VMware通过网络地址转换，通过物理机的IP上网。" class="headerlink" title="VMware在默认安装完成之后，会创建三个虚拟的网络环境：VMnet0、VMnet1和VMnet8。其类型分别为：桥接网络，Host-only和NAT。其中，NAT表示VMWware内安装的Ubuntu将会在一个子网中，VMware通过网络地址转换，通过物理机的IP上网。"></a>VMware在默认安装完成之后，会创建三个虚拟的网络环境：VMnet0、VMnet1和VMnet8。其类型分别为：桥接网络，Host-only和NAT。其中，NAT表示VMWware内安装的Ubuntu将会在一个子网中，VMware通过网络地址转换，通过物理机的IP上网。</h5><h5 id="这里，我们选择NAT方式，来实现Ubuntu的静态IP地址配置。"><a href="#这里，我们选择NAT方式，来实现Ubuntu的静态IP地址配置。" class="headerlink" title="这里，我们选择NAT方式，来实现Ubuntu的静态IP地址配置。"></a>这里，我们选择NAT方式，来实现Ubuntu的静态IP地址配置。</h5><h5 id="打开VMware，在顶部依次选择：编辑-gt-虚拟网路编辑器，打开虚拟网路编辑器："><a href="#打开VMware，在顶部依次选择：编辑-gt-虚拟网路编辑器，打开虚拟网路编辑器：" class="headerlink" title="打开VMware，在顶部依次选择：编辑 &gt; 虚拟网路编辑器，打开虚拟网路编辑器："></a>打开VMware，在顶部依次选择：编辑 &gt; 虚拟网路编辑器，打开虚拟网路编辑器：</h5><a id="more"></a>
<h5 id="首先，去掉VMnet0和VMnet1，只保留VMnet8。然后，去掉如下图中的“使用本地DHCP服务奖IP地址分配给虚拟机”："><a href="#首先，去掉VMnet0和VMnet1，只保留VMnet8。然后，去掉如下图中的“使用本地DHCP服务奖IP地址分配给虚拟机”：" class="headerlink" title="首先，去掉VMnet0和VMnet1，只保留VMnet8。然后，去掉如下图中的“使用本地DHCP服务奖IP地址分配给虚拟机”："></a>首先，去掉VMnet0和VMnet1，只保留VMnet8。然后，去掉如下图中的“使用本地DHCP服务奖IP地址分配给虚拟机”：</h5><h5 id="此外，这里的子网IP为：192-168-8-0，子网掩码为：255-255-255-0，因此，在Ubuntu中，设置IP地址的时候，可以设置为192-168-8-x，x可以为1-255（下面我们就设置为192-168-8-100）。"><a href="#此外，这里的子网IP为：192-168-8-0，子网掩码为：255-255-255-0，因此，在Ubuntu中，设置IP地址的时候，可以设置为192-168-8-x，x可以为1-255（下面我们就设置为192-168-8-100）。" class="headerlink" title="此外，这里的子网IP为：192.168.8.0，子网掩码为：255.255.255.0，因此，在Ubuntu中，设置IP地址的时候，可以设置为192.168.8.x，x可以为1~255（下面我们就设置为192.168.8.100）。"></a>此外，这里的子网IP为：192.168.8.0，子网掩码为：255.255.255.0，因此，在Ubuntu中，设置IP地址的时候，可以设置为192.168.8.x，x可以为1~255（下面我们就设置为192.168.8.100）。</h5><h5 id="选择“NAT设置”，打开NAT设置面板："><a href="#选择“NAT设置”，打开NAT设置面板：" class="headerlink" title="选择“NAT设置”，打开NAT设置面板："></a>选择“NAT设置”，打开NAT设置面板：</h5><h5 id="查看自己的网关地址，例如，此处的网关应该为：192-168-8-2。最后，在VMWare的虚拟机管理界面，选择Ubuntu的“编辑虚拟机设置”，打开Ubuntu这个虚拟的设置界面。选择网络适配器，然后确定网络连接选中的是“自定义”中的VMnet8-NAT模式-："><a href="#查看自己的网关地址，例如，此处的网关应该为：192-168-8-2。最后，在VMWare的虚拟机管理界面，选择Ubuntu的“编辑虚拟机设置”，打开Ubuntu这个虚拟的设置界面。选择网络适配器，然后确定网络连接选中的是“自定义”中的VMnet8-NAT模式-：" class="headerlink" title="查看自己的网关地址，例如，此处的网关应该为：192.168.8.2。最后，在VMWare的虚拟机管理界面，选择Ubuntu的“编辑虚拟机设置”，打开Ubuntu这个虚拟的设置界面。选择网络适配器，然后确定网络连接选中的是“自定义”中的VMnet8(NAT模式)："></a>查看自己的网关地址，例如，此处的网关应该为：192.168.8.2。最后，在VMWare的虚拟机管理界面，选择Ubuntu的“编辑虚拟机设置”，打开Ubuntu这个虚拟的设置界面。选择网络适配器，然后确定网络连接选中的是“自定义”中的VMnet8(NAT模式)：</h5><h5 id="完成以上步骤，VMWare的网络环境也就设置完成。"><a href="#完成以上步骤，VMWare的网络环境也就设置完成。" class="headerlink" title="完成以上步骤，VMWare的网络环境也就设置完成。"></a>完成以上步骤，VMWare的网络环境也就设置完成。</h5><h5 id="2-为Ubuntu设置静态IP地址"><a href="#2-为Ubuntu设置静态IP地址" class="headerlink" title="2 为Ubuntu设置静态IP地址"></a>2 为Ubuntu设置静态IP地址</h5><h5 id="在terminal-中输入"><a href="#在terminal-中输入" class="headerlink" title="在terminal 中输入"></a>在terminal 中输入</h5><figure class="highlight powershell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">sudo gedit /etc/network/interfaces</div><div class="line">sudo vi /etc/network/interfaces</div></pre></td></tr></table></figure>
<h5 id="在打开的文件中，若有内容，先全部删除。然后输入如下代码："><a href="#在打开的文件中，若有内容，先全部删除。然后输入如下代码：" class="headerlink" title="在打开的文件中，若有内容，先全部删除。然后输入如下代码："></a>在打开的文件中，若有内容，先全部删除。然后输入如下代码：</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"># interfaces(5) file used by ifup(8) and ifdown(8)</div><div class="line">auto lo</div><div class="line">iface lo inet loopback</div><div class="line"></div><div class="line">auto ens33</div><div class="line">iface ens33 inet static</div><div class="line">address 192.168.159.100</div><div class="line">netmask 255.255.255.0</div><div class="line">gateway 192.168.159.2</div><div class="line"></div><div class="line">dns-nameservers 8.8.8.8</div></pre></td></tr></table></figure>
<h5 id="接下来关于配置DNS-与原文不一样。这里我没有："><a href="#接下来关于配置DNS-与原文不一样。这里我没有：" class="headerlink" title="接下来关于配置DNS 与原文不一样。这里我没有："></a>接下来关于配置DNS 与原文不一样。这里我没有：</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo gedit /etc/resolv.conf</div></pre></td></tr></table></figure>
<p>而是直接将DNS信息写入/etc/network/interfaces中：即(添加在最后一行)：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">auto lo </div><div class="line">iface lo inet loopback</div><div class="line"></div><div class="line">auto ens33 </div><div class="line">iface ens33 inet static </div><div class="line">address 192.168.8.100 </div><div class="line">netmask 255.255.255.0 </div><div class="line">gateway 192.168.8.2</div><div class="line"></div><div class="line">dns-nameserver 8.8.8.8</div></pre></td></tr></table></figure>
<h5 id="然后执行"><a href="#然后执行" class="headerlink" title="然后执行"></a>然后执行</h5><figure class="highlight powershell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo /etc/init.d/networking restart</div></pre></td></tr></table></figure>
<h5 id="如果出现无法上网的情况，就在"><a href="#如果出现无法上网的情况，就在" class="headerlink" title="如果出现无法上网的情况，就在"></a>如果出现无法上网的情况，就在</h5><figure class="highlight powershell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo gedit /etc/NetworkManager/NetworkManager.conf</div></pre></td></tr></table></figure>
<h5 id="打开该文件，将“managed-false”修改为“managed-true”"><a href="#打开该文件，将“managed-false”修改为“managed-true”" class="headerlink" title="打开该文件，将“managed=false”修改为“managed=true”"></a>打开该文件，将“managed=false”修改为“managed=true”</h5><h5 id="重启network-manager："><a href="#重启network-manager：" class="headerlink" title="重启network manager："></a>重启network manager：</h5><figure class="highlight powershell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo service network-manager restart</div></pre></td></tr></table></figure>
<h5 id="然后每次重启后又会出现-上不了网的情况"><a href="#然后每次重启后又会出现-上不了网的情况" class="headerlink" title="然后每次重启后又会出现 上不了网的情况"></a>然后每次重启后又会出现 上不了网的情况</h5><h5 id="在虚拟机的虚拟网络编辑器里面还原默认设置按上述步骤重装一遍"><a href="#在虚拟机的虚拟网络编辑器里面还原默认设置按上述步骤重装一遍" class="headerlink" title="在虚拟机的虚拟网络编辑器里面还原默认设置按上述步骤重装一遍"></a>在虚拟机的虚拟网络编辑器里面还原默认设置按上述步骤重装一遍</h5><h5 id="没找到其他更好的办法"><a href="#没找到其他更好的办法" class="headerlink" title="没找到其他更好的办法"></a>没找到其他更好的办法</h5><h4 id="二。用xshell连接linux"><a href="#二。用xshell连接linux" class="headerlink" title="二。用xshell连接linux"></a>二。用xshell连接linux</h4><p><a href="https://blog.csdn.net/u013068789/article/details/80296260" target="_blank" rel="external">https://blog.csdn.net/u013068789/article/details/80296260</a></p>
<h4 id="1-开启SSH服务"><a href="#1-开启SSH服务" class="headerlink" title="1 开启SSH服务"></a>1 开启SSH服务</h4><p><a href="https://www.linuxidc.com/Linux/2017-08/146222.htm" target="_blank" rel="external">https://www.linuxidc.com/Linux/2017-08/146222.htm</a></p>
<figure class="highlight powershell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo apt-get install openssh-server</div></pre></td></tr></table></figure>
<p>使用</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ps -e | grep ssh</div></pre></td></tr></table></figure>
<p>如果只有ssh-agent表示还没启动，需要</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">root@ubuntu:~# /etc/init.d/ssh start</div></pre></td></tr></table></figure>
<h4 id="2-使windows-可以ping-通vmware下的linux，即ping通linux的ip-192-168-159-100"><a href="#2-使windows-可以ping-通vmware下的linux，即ping通linux的ip-192-168-159-100" class="headerlink" title="2 使windows 可以ping 通vmware下的linux，即ping通linux的ip(192.168.159.100)"></a>2 使windows 可以ping 通vmware下的linux，即ping通linux的ip(192.168.159.100)</h4><p>1.打开网络与共享中心–&gt;更改适配器设置–&gt;点击vmnet8–&gt;属性–&gt;internet 协议版本4（TCP/IPv4）属性</p>
<p>–》选中“使用下面的IP地址”，ip地址填192.168.159.2（NAT设置里面的网关IP)–&gt;子网IP 填255.255.255.0</p>
<p>默认网关那儿不用填–》使用下面的DNS服务器地址，填8.8.8.8，备用DNS服务器地址不填–》确定</p>
<h5 id="此时windows用cmd-即可ping-通linux-，那么就可以用xshell-连linux了"><a href="#此时windows用cmd-即可ping-通linux-，那么就可以用xshell-连linux了" class="headerlink" title="此时windows用cmd 即可ping 通linux ，那么就可以用xshell 连linux了"></a>此时windows用cmd 即可ping 通linux ，那么就可以用xshell 连linux了</h5><h4 id="其他参考链接"><a href="#其他参考链接" class="headerlink" title="其他参考链接"></a>其他参考链接</h4><p><a href="https://blog.csdn.net/u013068789/article/details/80296260" target="_blank" rel="external">https://blog.csdn.net/u013068789/article/details/80296260</a></p>
<p><a href="https://blog.csdn.net/shaonaozu/article/details/12869185" target="_blank" rel="external">https://blog.csdn.net/shaonaozu/article/details/12869185</a></p>
<p><a href="https://blog.csdn.net/LiuMiao1128/article/details/52449683" target="_blank" rel="external">https://blog.csdn.net/LiuMiao1128/article/details/52449683</a></p>
<p><a href="https://blog.csdn.net/greyfreedom/article/details/41943713#commentBox" target="_blank" rel="external">https://blog.csdn.net/greyfreedom/article/details/41943713#commentBox</a></p>
<p><a href="https://blog.csdn.net/limo120621/article/details/52447358" target="_blank" rel="external">https://blog.csdn.net/limo120621/article/details/52447358</a></p>
<p><a href="https://www.linuxidc.com/Linux/2017-08/146222.htm" target="_blank" rel="external">https://www.linuxidc.com/Linux/2017-08/146222.htm</a></p>
<h4 id="20190317更新"><a href="#20190317更新" class="headerlink" title="20190317更新"></a>20190317更新</h4><h5 id="关于重启后不能上网问题"><a href="#关于重启后不能上网问题" class="headerlink" title="关于重启后不能上网问题"></a>关于重启后不能上网问题</h5><p>查了些博客，好像是我们在设置虚拟机ip的时候都是设置的100，而100可能不再dhcp 规定的子网ip的范围之类</p>
<p>故改成200，然后又看了另一篇博客，保留vmnet1和vmnet 8；不知道是哪个起作用，反正最后解决了</p>
<h4 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h4><p><a href="https://jingyan.baidu.com/article/15622f242d2fb5fdfcbea58b.html" target="_blank" rel="external">https://jingyan.baidu.com/article/15622f242d2fb5fdfcbea58b.html</a></p>
<p><a href="https://www.cnblogs.com/liermao12/p/6079471.html" target="_blank" rel="external">https://www.cnblogs.com/liermao12/p/6079471.html</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[lamp(笔记待完善)]]></title>
      <url>http://haitaochen.github.io/2018/04/16/ssl-1/</url>
      <content type="html"><![CDATA[<p>安装sudo apt-get install tasksel</p>
<p>sudo apt-get install phpmyadmin</p>
<p>sudo apt-get install phpmyadmin</p>
<a id="more"></a>
<p>安装配置完有一步要注意，那就是默认情况下phpMyAdmin的安装路径为/usr/share/phpmyadmin,教程上告诉我要修改</p>
<p>sudo mv /usr/share/phpmyadmin /var/www</p>
<p>好嘞，兴高采烈的输入localhost/phpmyadmin，发现404.。。</p>
<p>说好的登录页面呢？？</p>
<p>度娘了一下，发现另外一种解决办法：</p>
<p>sudo ln -s /usr/share/phpmyadmin/  /var/www/</p>
<p>于是我先把phpmyadmin文件夹移回usr文件夹下，再输入，哈哈，这下总行了吧。</p>
<p>“404”</p>
<p>不甘心，我又找了一个方案，输入：</p>
<p>cd var/www/html</p>
<p>sudo ln -s /usr/share/phpmyadmin phpmyadmin</p>
<p>这下再打开，果然可以了。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[ubuntu下apache配置ssl证书]]></title>
      <url>http://haitaochen.github.io/2018/04/16/ssl/</url>
      <content type="html"><![CDATA[<ul>
<li>去阿里云买一个免费的ssl证书（详情:<a href="https://bbs.aliyun.com/read/573933.html?spm=5176.10695662.1996646101.searchclickresult.2acd1cb9dAaa8k）" target="_blank" rel="external">https://bbs.aliyun.com/read/573933.html?spm=5176.10695662.1996646101.searchclickresult.2acd1cb9dAaa8k）</a></li>
<li>支付成功后 点补全，进去后完善信息，提交审核</li>
<li>回到控制台（/订单列表）  点进度 未通过 因为还没有在 西部数码里面配置dns</li>
<li>过了一会儿再点进度 ，里面的‘’域名授权配置‘’才出现，主机记录就是西部数码dns 配置的主机名，记录值就是txt 的对应值（详情：<a href="https://www.west.cn/faq/list.asp?unid=1400）" target="_blank" rel="external">https://www.west.cn/faq/list.asp?unid=1400）</a></li>
<li>过一会儿 就通过了</li>
<li>点下载进去，选apache的下载，这个页面给出了 去服务器配证书的文档。但因为ubuntu 的apache 的目录结构和他给的不一样。所以稍作调整如下：（附参考：<a href="https://blog.csdn.net/setoy/article/details/78441613" target="_blank" rel="external">https://blog.csdn.net/setoy/article/details/78441613</a> <a href="https://blog.csdn.net/mgsky1/article/details/53844332）" target="_blank" rel="external">https://blog.csdn.net/mgsky1/article/details/53844332）</a></li>
</ul>
<a id="more"></a>
<h3 id="一、开启SSL模块"><a href="#一、开启SSL模块" class="headerlink" title="一、开启SSL模块"></a>一、开启SSL模块</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">a2enmod ssl1</div></pre></td></tr></table></figure>
<p>这条命令相当于</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">sudo ln -s /etc/apache2/mods-available/ssl.load /etc/apache2/mods-enabled</div><div class="line">sudo ln -s /etc/apache2/mods-available/ssl.conf /etc/apache2/mods-enabled12</div></pre></td></tr></table></figure>
<p>如果没有<code>a2enmod</code>指令，也可直接在apache2.conf中设置SSL模块加载：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">LoadModule ssl_module /usr/lib/apache2/modules/mod_ssl.so</div></pre></td></tr></table></figure>
<p>##二、创建证书所在目录</p>
<h5 id="文件说明："><a href="#文件说明：" class="headerlink" title="文件说明："></a>文件说明：</h5><h5 id="1-证书文件214599770780511-pem，包含两段内容，请不要删除任何一段内容。"><a href="#1-证书文件214599770780511-pem，包含两段内容，请不要删除任何一段内容。" class="headerlink" title="1. 证书文件214599770780511.pem，包含两段内容，请不要删除任何一段内容。"></a>1. 证书文件214599770780511.pem，包含两段内容，请不要删除任何一段内容。</h5><h5 id="2-如果是证书系统创建的CSR，还包含：证书私钥文件214599770780511-key、证书公钥文件public-pem、证书链文件chain-pem。"><a href="#2-如果是证书系统创建的CSR，还包含：证书私钥文件214599770780511-key、证书公钥文件public-pem、证书链文件chain-pem。" class="headerlink" title="2. 如果是证书系统创建的CSR，还包含：证书私钥文件214599770780511.key、证书公钥文件public.pem、证书链文件chain.pem。"></a>2. 如果是证书系统创建的CSR，还包含：证书私钥文件214599770780511.key、证书公钥文件public.pem、证书链文件chain.pem。</h5><p>##### </p>
<h5 id=""><a href="#" class="headerlink" title=" "></a> </h5><ul>
<li>在Apache的安装目录下创建cert目录（/etc/apache2/cert），并且将下载的全部文件拷贝到cert目录中。</li>
</ul>
<ul>
<li><p>进入/etc/apache2/sites-available下编辑default-ssl.conf</p>
<p>我的配置如下：</p>
<figure class="highlight powershell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div></pre></td><td class="code"><pre><div class="line">&lt;IfModule mod_ssl.c&gt;</div><div class="line">	&lt;VirtualHost _default_:<span class="number">443</span>&gt;</div><div class="line">		ServerAdmin webmaster@localhost</div><div class="line"></div><div class="line">		DocumentRoot /var/www/html/pcxy/</div><div class="line"></div><div class="line">		<span class="comment"># Available loglevels: trace8, ..., trace1, debug, info, notice, warn,</span></div><div class="line">		<span class="comment"># error, crit, alert, emerg.</span></div><div class="line">		<span class="comment"># It is also possible to configure the loglevel for particular</span></div><div class="line">		<span class="comment"># modules, e.g.</span></div><div class="line">		<span class="comment">#LogLevel info ssl:warn</span></div><div class="line"></div><div class="line">		ErrorLog $&#123;APACHE_LOG_DIR&#125;/error.log</div><div class="line">		CustomLog $&#123;APACHE_LOG_DIR&#125;/access.log combined</div><div class="line"></div><div class="line">		<span class="comment"># For most configuration files from conf-available/, which are</span></div><div class="line">		<span class="comment"># enabled or disabled at a global level, it is possible to</span></div><div class="line">		<span class="comment"># include a line for only one particular virtual host. For example the</span></div><div class="line">		<span class="comment"># following line enables the CGI configuration for this host only</span></div><div class="line">		<span class="comment"># after it has been globally disabled with "a2disconf".</span></div><div class="line">		<span class="comment">#Include conf-available/serve-cgi-bin.conf</span></div><div class="line"></div><div class="line">		<span class="comment">#   SSL Engine Switch:</span></div><div class="line">		<span class="comment">#   Enable/Disable SSL for this virtual host.</span></div><div class="line">		SSLEngine on</div><div class="line"></div><div class="line">		<span class="comment">#   A self-signed (snakeoil) certificate can be created by installing</span></div><div class="line">		<span class="comment">#   the ssl-cert package. See</span></div><div class="line">		<span class="comment">#   /usr/share/doc/apache2/README.Debian.gz for more info.</span></div><div class="line">		<span class="comment">#   If both key and certificate are stored in the same file, only the</span></div><div class="line">		<span class="comment">#   SSLCertificateFile directive is needed.</span></div><div class="line">		</div><div class="line">		<span class="comment">#cht zhushi diaole</span></div><div class="line">		<span class="comment">#SSLCertificateFile	/etc/ssl/certs/ssl-cert-snakeoil.pem</span></div><div class="line">		<span class="comment">#SSLCertificateKeyFile /etc/ssl/private/ssl-cert-snakeoil.key</span></div><div class="line">		<span class="comment">#cht end</span></div><div class="line"></div><div class="line"></div><div class="line">		<span class="comment">#cht add conf</span></div><div class="line">		<span class="comment"># 添加 SSL 协议支持协议，去掉不安全的协议</span></div><div class="line">		SSLProtocol all -SSLv2 -SSLv3</div><div class="line">		<span class="comment"># 修改加密套件如下</span></div><div class="line">		SSLCipherSuite HIGH:!RC4:!MD5:!aNULL:!eNULL:!NULL:!DH:!EDH:!EXP:+MEDIUM</div><div class="line">		SSLHonorCipherOrder on</div><div class="line">		<span class="comment"># 证书公钥配置</span></div><div class="line">		SSLCertificateFile /etc/apache2/cert/public.pem</div><div class="line">		<span class="comment"># 证书私钥配置</span></div><div class="line">		SSLCertificateKeyFile /etc/apache2/cert/<span class="number">214599770780511</span>.key</div><div class="line">		<span class="comment"># 证书链配置，如果该属性开头有 '#'字符，请删除掉</span></div><div class="line">		SSLCertificateChainFile /etc/apache2/cert/chain.pem</div><div class="line"></div><div class="line">		<span class="comment">#   Server Certificate Chain:</span></div><div class="line">		<span class="comment">#   Point SSLCertificateChainFile at a file containing the</span></div><div class="line">		<span class="comment">#   concatenation of PEM encoded CA certificates which form the</span></div><div class="line">		<span class="comment">#   certificate chain for the server certificate. Alternatively</span></div><div class="line">		<span class="comment">#   the referenced file can be the same as SSLCertificateFile</span></div><div class="line">		<span class="comment">#   when the CA certificates are directly appended to the server</span></div><div class="line">		<span class="comment">#   certificate for convinience.</span></div><div class="line">		<span class="comment">#SSLCertificateChainFile /etc/apache2/ssl.crt/server-ca.crt</span></div><div class="line"></div><div class="line">		<span class="comment">#   Certificate Authority (CA):</span></div><div class="line">		<span class="comment">#   Set the CA certificate verification path where to find CA</span></div><div class="line">		<span class="comment">#   certificates for client authentication or alternatively one</span></div><div class="line">		<span class="comment">#   huge file containing all of them (file must be PEM encoded)</span></div><div class="line">		<span class="comment">#   Note: Inside SSLCACertificatePath you need hash symlinks</span></div><div class="line">		<span class="comment">#		 to point to the certificate files. Use the provided</span></div><div class="line">		<span class="comment">#		 Makefile to update the hash symlinks after changes.</span></div><div class="line">		<span class="comment">#SSLCACertificatePath /etc/ssl/certs/</span></div><div class="line">		<span class="comment">#SSLCACertificateFile /etc/apache2/ssl.crt/ca-bundle.crt</span></div><div class="line"></div><div class="line">		<span class="comment">#   Certificate Revocation Lists (CRL):</span></div><div class="line">		<span class="comment">#   Set the CA revocation path where to find CA CRLs for client</span></div><div class="line">		<span class="comment">#   authentication or alternatively one huge file containing all</span></div><div class="line">		<span class="comment">#   of them (file must be PEM encoded)</span></div><div class="line">		<span class="comment">#   Note: Inside SSLCARevocationPath you need hash symlinks</span></div><div class="line">		<span class="comment">#		 to point to the certificate files. Use the provided</span></div><div class="line">		<span class="comment">#		 Makefile to update the hash symlinks after changes.</span></div><div class="line">		<span class="comment">#SSLCARevocationPath /etc/apache2/ssl.crl/</span></div><div class="line">		<span class="comment">#SSLCARevocationFile /etc/apache2/ssl.crl/ca-bundle.crl</span></div><div class="line"></div><div class="line">		<span class="comment">#   Client Authentication (Type):</span></div><div class="line">		<span class="comment">#   Client certificate verification type and depth.  Types are</span></div><div class="line">		<span class="comment">#   none, optional, require and optional_no_ca.  Depth is a</span></div><div class="line">		<span class="comment">#   number which specifies how deeply to verify the certificate</span></div><div class="line">		<span class="comment">#   issuer chain before deciding the certificate is not valid.</span></div><div class="line">		<span class="comment">#SSLVerifyClient require</span></div><div class="line">		<span class="comment">#SSLVerifyDepth  10</span></div><div class="line"></div><div class="line">		<span class="comment">#   SSL Engine Options:</span></div><div class="line">		<span class="comment">#   Set various options for the SSL engine.</span></div><div class="line">		<span class="comment">#   o FakeBasicAuth:</span></div><div class="line">		<span class="comment">#	 Translate the client X.509 into a Basic Authorisation.  This means that</span></div><div class="line">		<span class="comment">#	 the standard Auth/DBMAuth methods can be used for access control.  The</span></div><div class="line">		<span class="comment">#	 user name is the `one line' version of the client's X.509 certificate.</span></div><div class="line">		<span class="comment">#	 Note that no password is obtained from the user. Every entry in the user</span></div><div class="line">		<span class="comment">#	 file needs this password: `xxj31ZMTZzkVA'.</span></div><div class="line">		<span class="comment">#   o ExportCertData:</span></div><div class="line">		<span class="comment">#	 This exports two additional environment variables: SSL_CLIENT_CERT and</span></div><div class="line">		<span class="comment">#	 SSL_SERVER_CERT. These contain the PEM-encoded certificates of the</span></div><div class="line">		<span class="comment">#	 server (always existing) and the client (only existing when client</span></div><div class="line">		<span class="comment">#	 authentication is used). This can be used to import the certificates</span></div><div class="line">		<span class="comment">#	 into CGI scripts.</span></div><div class="line">		<span class="comment">#   o StdEnvVars:</span></div><div class="line">		<span class="comment">#	 This exports the standard SSL/TLS related `SSL_*' environment variables.</span></div><div class="line">		<span class="comment">#	 Per default this exportation is switched off for performance reasons,</span></div><div class="line">		<span class="comment">#	 because the extraction step is an expensive operation and is usually</span></div><div class="line">		<span class="comment">#	 useless for serving static content. So one usually enables the</span></div><div class="line">		<span class="comment">#	 exportation for CGI and SSI requests only.</span></div><div class="line">		<span class="comment">#   o OptRenegotiate:</span></div><div class="line">		<span class="comment">#	 This enables optimized SSL connection renegotiation handling when SSL</span></div><div class="line">		<span class="comment">#	 directives are used in per-directory context.</span></div><div class="line">		<span class="comment">#SSLOptions +FakeBasicAuth +ExportCertData +StrictRequire</span></div><div class="line">		&lt;FilesMatch <span class="string">"\.(cgi|shtml|phtml|php)$"</span>&gt;</div><div class="line">				SSLOptions +StdEnvVars</div><div class="line">		&lt;/FilesMatch&gt;</div><div class="line">		&lt;Directory /usr/lib/cgi-bin&gt;</div><div class="line">				SSLOptions +StdEnvVars</div><div class="line">		&lt;/Directory&gt;</div><div class="line"></div><div class="line">		<span class="comment">#   SSL Protocol Adjustments:</span></div><div class="line">		<span class="comment">#   The safe and default but still SSL/TLS standard compliant shutdown</span></div><div class="line">		<span class="comment">#   approach is that mod_ssl sends the close notify alert but doesn't wait for</span></div><div class="line">		<span class="comment">#   the close notify alert from client. When you need a different shutdown</span></div><div class="line">		<span class="comment">#   approach you can use one of the following variables:</span></div><div class="line">		<span class="comment">#   o ssl-unclean-shutdown:</span></div><div class="line">		<span class="comment">#	 This forces an unclean shutdown when the connection is closed, i.e. no</span></div><div class="line">		<span class="comment">#	 SSL close notify alert is send or allowed to received.  This violates</span></div><div class="line">		<span class="comment">#	 the SSL/TLS standard but is needed for some brain-dead browsers. Use</span></div><div class="line">		<span class="comment">#	 this when you receive I/O errors because of the standard approach where</span></div><div class="line">		<span class="comment">#	 mod_ssl sends the close notify alert.</span></div><div class="line">		<span class="comment">#   o ssl-accurate-shutdown:</span></div><div class="line">		<span class="comment">#	 This forces an accurate shutdown when the connection is closed, i.e. a</span></div><div class="line">		<span class="comment">#	 SSL close notify alert is send and mod_ssl waits for the close notify</span></div><div class="line">		<span class="comment">#	 alert of the client. This is 100% SSL/TLS standard compliant, but in</span></div><div class="line">		<span class="comment">#	 practice often causes hanging connections with brain-dead browsers. Use</span></div><div class="line">		<span class="comment">#	 this only for browsers where you know that their SSL implementation</span></div><div class="line">		<span class="comment">#	 works correctly.</span></div><div class="line">		<span class="comment">#   Notice: Most problems of broken clients are also related to the HTTP</span></div><div class="line">		<span class="comment">#   keep-alive facility, so you usually additionally want to disable</span></div><div class="line">		<span class="comment">#   keep-alive for those clients, too. Use variable "nokeepalive" for this.</span></div><div class="line">		<span class="comment">#   Similarly, one has to force some clients to use HTTP/1.0 to workaround</span></div><div class="line">		<span class="comment">#   their broken HTTP/1.1 implementation. Use variables "downgrade-1.0" and</span></div><div class="line">		<span class="comment">#   "force-response-1.0" for this.</span></div><div class="line">		<span class="comment"># BrowserMatch "MSIE [2-6]" \</span></div><div class="line">		<span class="comment">#		nokeepalive ssl-unclean-shutdown \</span></div><div class="line">		<span class="comment">#		downgrade-1.0 force-response-1.0</span></div><div class="line"></div><div class="line">	&lt;/VirtualHost&gt;</div><div class="line">&lt;/IfModule&gt;</div><div class="line"></div><div class="line"><span class="comment"># vim: syntax=apache ts=4 sw=4 sts=4 sr noet</span></div></pre></td></tr></table></figure>
<p>​</p>
</li>
<li><p>建立site-available 到sites-enabled的映射</p>
<p>sudo ln -s /etc/apache2/sites-available/default-ssl.conf /etc/apache2/sites-enabled/default-ssl.conf</p>
</li>
<li><p>重启apache</p>
<p> sudo /etc/init.d/apache2 restart</p>
</li>
<li><p>最后用https 访问</p>
</li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[解决win10下docker访问慢]]></title>
      <url>http://haitaochen.github.io/2018/01/21/docker/</url>
      <content type="html"><![CDATA[<h4 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h4><blockquote>
<p>docker 拉取速度太慢，可以更换成daocloud和阿里云。daocloud没有尝试成功，阿里云可以。</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">docker-machine ssh default </div><div class="line">sudo sed -i &quot;s|EXTRA_ARGS=&apos;|EXTRA_ARGS=&apos;--registry-mirror=【此处为你的加速地址】 |g&quot; /var/lib/boot2docker/profile</div><div class="line">exit</div><div class="line">docker-machine restart default</div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[PHP 在 windows下配置redis扩展]]></title>
      <url>http://haitaochen.github.io/2017/03/11/PHP-%E5%9C%A8-windows%E4%B8%8B%E9%85%8D%E7%BD%AEredis%E6%89%A9%E5%B1%95/</url>
      <content type="html"><![CDATA[<h4 id="PHP-在-windows下配置redis扩展"><a href="#PHP-在-windows下配置redis扩展" class="headerlink" title="PHP 在 windows下配置redis扩展"></a>PHP 在 windows下配置redis扩展</h4><h5 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h5><p>redis 下载：<a href="https://redis.io/download" target="_blank" rel="external">https://redis.io/download</a></p>
<p>redis php 扩展：<a href="http://windows.php.net/downloads/pecl/releases/redis/" target="_blank" rel="external">http://windows.php.net/downloads/pecl/releases/redis/</a></p>
<p>igbinary php 扩展： <a href="http://windows.php.net/downloads/pecl/releases/igbinary/" target="_blank" rel="external">http://windows.php.net/downloads/pecl/releases/igbinary/</a><br><a id="more"></a></p>
<p>将上述两个扩展文件放在php/ext/下，且在php.ini 添加代码如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">; php_redis</div><div class="line">extension=php_igbinary.dll</div><div class="line">extension=php_redis.dll</div></pre></td></tr></table></figure>
<p>注意书写顺序。</p>
<h5 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h5><p>1、要下载对应php版本的phpredis模块；</p>
<p>2、注意是32位还是64位。这个要看phpinfo()输出的Architecture，而不是<a href="http://lib.csdn.net/base/operatingsystem" target="_blank" rel="external">操作系统</a>的位数。</p>
<p>3、下载时候，带-ts-的是线程安全的，带-nts-是非线程安全的。</p>
<p>重启apache服务器</p>
<p>示例代码：</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line">	$redis = <span class="keyword">new</span> Redis();    </div><div class="line">	$redis-&gt;connect(<span class="string">"localhost"</span>,<span class="string">"6379"</span>);  </div><div class="line">	$redis-&gt;set(<span class="string">"say"</span>,<span class="string">"Hello World"</span>);    </div><div class="line">	<span class="keyword">echo</span> $redis-&gt;get(<span class="string">"say"</span>);	</div><div class="line"><span class="meta">?&gt;</span></div></pre></td></tr></table></figure>
<p>redis 开启：双击两个exe 打开两个窗口redis-server.exe和redis-cli.exe</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[note]]></title>
      <url>http://haitaochen.github.io/2017/02/21/note/</url>
      <content type="html"><![CDATA[<h4 id="笔记"><a href="#笔记" class="headerlink" title="笔记"></a>笔记</h4><h4 id="rails"><a href="#rails" class="headerlink" title="rails"></a>rails</h4><p>控制器处理完ajax请求后，两种返回方式时：</p>
<ul>
<li><p>render :text =&gt; ‘aa’,此时前端的回调函数的</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span>(<span class="params">data</span>)</span>&#123;</div><div class="line">  alert(data);<span class="comment">//此时打印:'aa'</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>​</p>
</li>
<li><p>redirect_to :back,此时前端的回调函数的</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span>(<span class="params">data</span>)</span>&#123;</div><div class="line">  alert(data);<span class="comment">//返回xml代码吧</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>​</p>
</li>
</ul>
<h4 id="Nginx"><a href="#Nginx" class="headerlink" title="Nginx"></a>Nginx</h4><a id="more"></a>
<p>作为文件下载器</p>
<figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">location / &#123;</div><div class="line">            <span class="comment">#root html;</span></div><div class="line">            <span class="comment">#index index.html index.htm;</span></div><div class="line">            <span class="keyword">if</span> ($request_filename ~* ^.*?\.(txt<span class="params">|doc|</span>pdf<span class="params">|rar|</span>gz<span class="params">|zip|</span>docx<span class="params">|exe|</span>xlsx<span class="params">|ppt|</span>pptx)$)&#123;</div><div class="line">            add_header Content-<span class="symbol">Disposition:</span> <span class="string">'attachment;'</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div></pre></td></tr></table></figure>
<ul>
<li>在nginx 目录下放置待下载文件</li>
<li>打开浏览器输localhost/panda.mp4</li>
</ul>
<p>参考链接</p>
<p><a href="http://blog.chinaunix.net/uid-26000296-id-5757745.html" target="_blank" rel="external">http://blog.chinaunix.net/uid-26000296-id-5757745.html</a></p>
<h4 id="Unicorn见习"><a href="#Unicorn见习" class="headerlink" title="Unicorn见习"></a>Unicorn见习</h4><h5 id="参考链接（http-blog-yoosan-me-2015-08-09-Linux-Ubuntu-E4-B8-8A-E9-83-A8-E7-BD-B2rails-E5-BA-94-E7-94-A8-E4-BD-BF-E7-94-A8unicorn-E5-92-8Cnginx-）"><a href="#参考链接（http-blog-yoosan-me-2015-08-09-Linux-Ubuntu-E4-B8-8A-E9-83-A8-E7-BD-B2rails-E5-BA-94-E7-94-A8-E4-BD-BF-E7-94-A8unicorn-E5-92-8Cnginx-）" class="headerlink" title="参考链接（http://blog.yoosan.me/2015/08/09/Linux(Ubuntu)%E4%B8%8A%E9%83%A8%E7%BD%B2rails%E5%BA%94%E7%94%A8,%E4%BD%BF%E7%94%A8unicorn%E5%92%8Cnginx/）"></a>参考链接（<a href="http://blog.yoosan.me/2015/08/09/Linux(Ubuntu)%E4%B8%8A%E9%83%A8%E7%BD%B2rails%E5%BA%94%E7%94%A8,%E4%BD%BF%E7%94%A8unicorn%E5%92%8Cnginx/）" target="_blank" rel="external">http://blog.yoosan.me/2015/08/09/Linux(Ubuntu)%E4%B8%8A%E9%83%A8%E7%BD%B2rails%E5%BA%94%E7%94%A8,%E4%BD%BF%E7%94%A8unicorn%E5%92%8Cnginx/）</a></h5><ul>
<li>新建/appname/config/unicorn.rb，配置如下</li>
</ul>
<figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># set path to application</span></div><div class="line"><span class="comment"># app_dir is your rails app directory path</span></div><div class="line">app_dir = File.expand_path(<span class="string">"../.."</span>, __FILE_<span class="number">_</span>)</div><div class="line">shared_dir = <span class="string">"<span class="subst">#&#123;app_dir&#125;</span>/shared"</span></div><div class="line">working_directory app_dir</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment"># Set unicorn options</span></div><div class="line">worker_processes <span class="number">2</span></div><div class="line">preload_app <span class="literal">true</span></div><div class="line">timeout <span class="number">30</span></div><div class="line"></div><div class="line"><span class="comment"># Set up socket location</span></div><div class="line">listen <span class="string">"<span class="subst">#&#123;shared_dir&#125;</span>/sockets/unicorn.sock"</span>, <span class="symbol">:backlog</span> =&gt; <span class="number">64</span></div><div class="line"></div><div class="line"><span class="comment"># Logging</span></div><div class="line">stderr_path <span class="string">"<span class="subst">#&#123;shared_dir&#125;</span>/log/unicorn.stderr.log"</span></div><div class="line">stdout_path <span class="string">"<span class="subst">#&#123;shared_dir&#125;</span>/log/unicorn.stdout.log"</span></div><div class="line"></div><div class="line"><span class="comment"># Set master PID location</span></div><div class="line">pid <span class="string">"<span class="subst">#&#123;shared_dir&#125;</span>/pids/unicorn.pid"</span></div></pre></td></tr></table></figure>
  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">* 创建目录mkdir -p shared/pids shared/sockets shared/log（在更目录中）</div><div class="line"></div><div class="line">* 运行命令bundle exec unicorn -c config/unicorn.rb -p 3000 -D</div></pre></td></tr></table></figure>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Ubuntu 安装配置nginx记录]]></title>
      <url>http://haitaochen.github.io/2017/02/15/nginx/</url>
      <content type="html"><![CDATA[<h4 id="Ubuntu-安装配置nginx记录"><a href="#Ubuntu-安装配置nginx记录" class="headerlink" title="Ubuntu 安装配置nginx记录"></a>Ubuntu 安装配置nginx记录</h4><p>下载地址：<a href="http://nginx.org/download/" target="_blank" rel="external">http://nginx.org/download/</a></p>
<ul>
<li><p>下载后解压</p>
</li>
<li><p>安装相关依赖</p>
<blockquote>
<p>sudo apt-get install openssl libssl-dev </p>
<p>sudo apt-get install libpcre3 libpcre3-dev  </p>
<p>sudo apt-get install zlib1g-dev  </p>
</blockquote>
</li>
</ul>
<a id="more"></a>
<ul>
<li><p>进入解压后的目录，运行</p>
<ul>
<li>$./configure</li>
<li>$ make &amp; make install</li>
</ul>
<p>这边报错：</p>
<p>[alert]: could not open error log file: open() “/usr/local/nginx/logs/error.log” failed (13: Permission denied)<br>2011/03/21 06:09:33 [emerg] 24855#0: mkdir() “/usr/local/nginx/client_body_temp” failed (13: Permission denied) 　　</p>
<p>解决：</p>
<p>sudo chmod a+rwx -R logs<br>sudo chmod a+rwx -R /usr/local/nginx</p>
</li>
<li><p>运行:</p>
<blockquote>
<figure class="highlight powershell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">&gt; $ sudo sbin/nginx</div><div class="line">&gt;</div></pre></td></tr></table></figure>
</blockquote>
</li>
<li><p>启动运行</p>
<blockquote>
<figure class="highlight powershell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">&gt; $ sudo nginx -s reload</div><div class="line">&gt;</div></pre></td></tr></table></figure>
</blockquote>
</li>
<li><p>重新启动</p>
<blockquote>
<figure class="highlight powershell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">&gt; $ sudo service nginx restart</div><div class="line">&gt;</div></pre></td></tr></table></figure>
</blockquote>
</li>
<li><p>停止运行</p>
<blockquote>
<figure class="highlight powershell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">&gt; $ sudo nginx -s stop</div><div class="line">&gt;</div></pre></td></tr></table></figure>
</blockquote>
</li>
</ul>
<h4 id="nginx-部署静态页面"><a href="#nginx-部署静态页面" class="headerlink" title="nginx 部署静态页面"></a>nginx 部署静态页面</h4><figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">server &#123;</div><div class="line">        listen <span class="number">80</span>;               <span class="comment"># 监听本机所有 ip 上的 80 端口</span></div><div class="line">        server_name <span class="number">_</span>;           <span class="comment"># 域名：www.example.com 这里 "_" 代表获取匹配所有</span></div><div class="line">        root /home/filename/;    <span class="comment"># 站点根目录</span></div><div class="line">		 index  index.html index.htm;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>我将我的blog文件夹作为根目录，pwd:/home/ubuntu/blog</p>
<p>blog 目录 index.html      css(文件夹)      js(文件夹)</p>
<p>root即为   /home/ubuntu/blog/</p>
<h5 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h5><ul>
<li><a href="http://blog.csdn.net/z920954494/article/details/52132125" target="_blank" rel="external">http://blog.csdn.net/z920954494/article/details/52132125</a></li>
<li><a href="http://blog.csdn.net/shiyuezhong/article/details/39396487" target="_blank" rel="external">http://blog.csdn.net/shiyuezhong/article/details/39396487</a></li>
<li><a href="http://blog.csdn.net/fuyuehua22/article/details/33765883" target="_blank" rel="external">http://blog.csdn.net/fuyuehua22/article/details/33765883</a></li>
<li><a href="http://showzeng.itscoder.com/nginx/2016/10/03/use-nginx-to-deploy-static-pages-easily.html" target="_blank" rel="external">http://showzeng.itscoder.com/nginx/2016/10/03/use-nginx-to-deploy-static-pages-easily.html</a></li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[laravel见习]]></title>
      <url>http://haitaochen.github.io/2017/02/12/laravel/</url>
      <content type="html"><![CDATA[<h4 id="Laravel-见习"><a href="#Laravel-见习" class="headerlink" title="Laravel 见习"></a>Laravel 见习</h4><h5 id="安装配置"><a href="#安装配置" class="headerlink" title="安装配置"></a>安装配置</h5><a id="more"></a>
<ul>
<li><p>windows<br>1集成环境</p>
<p>这里我们使用的是XAMPP，最新版下载地址：PHP 5.5.27 版（32位） | PHP 5.6.11 版（32位）。这两个版本的XAMPP都不再支持Windows XP操作系统，这意味着你需要更高版本的Windows操作系统。</p>
<p>注意：由于Laravel 5.1要求PHP 5.5.9+（含）版本，所以要针对该PHP版本要求选择合适的XAMPP。<br>2 <a href="http://laravelacademy.org/tags/%e5%ae%89%e8%a3%85" target="_blank" rel="external">安装</a><a href="http://laravelacademy.org/tags/composer" target="_blank" rel="external">Composer</a></p>
<p>Windows下最新版本Composer下载：<a href="https://getcomposer.org/Composer-Setup.exe" target="_blank" rel="external">Composer-Setup.exe</a>。</p>
<p>安装完成后，如果Composer安装包安装/更新缓慢，可以配置使用国内镜像进行包依赖的安装和升级，具体可参考这篇文章《<a href="http://pkg.phpcomposer.com/" target="_blank" rel="external">Composer中国全量镜像</a>》。</p>
<blockquote>
<p>PS：想当年Composer安装慢如牛，一个更新需要几个小时，不过现在明显感觉速度快了好多，不需要设置国内镜像，也可以顺利进行操作。</p>
</blockquote>
<p>（安装完成后一路next，出现composer-choose-the-command-line-php-you-want-to-use提示，选择xampp下的php.exe）</p>
<p>3下载laravel</p>
<p>进入www文件夹目录下，运行composer create-project laravel/laravel learnlaravel</p>
<p>4 测速</p>
<p>访问<a href="http://localhost/learnlaravel/public/" target="_blank" rel="external">http://localhost/learnlaravel/public/</a></p>
<p>5补充 </p>
<p> <a href="http://blog.csdn.net/u014017121/article/details/53053302" target="_blank" rel="external">laravel 指定 版本安装</a></p>
<p>composer create-project laravel/laravel=5.0.* –prefer-dist</p>
<p>composer create-project laravel/laravel=5.0.* demo –prefer-dist</p>
<p>laravel 调整root 目录（默认路径：public）</p>
<ul>
<li>rename root目录中的server.php为index.php</li>
<li>把public 中的.htaccess移动到root目录下</li>
</ul>
<p>查看laravel版本</p>
<p>php artisan –version（在项目目录下运行命令）</p>
<p>6参考链接</p>
<p><a href="http://laravelacademy.org/post/306.html" target="_blank" rel="external">http://laravelacademy.org/post/306.html</a></p>
<p><a href="http://blog.csdn.net/simplty/article/details/42584693" target="_blank" rel="external">http://blog.csdn.net/simplty/article/details/42584693</a></p>
<p><a href="http://blog.csdn.net/zjiang1994/article/details/52600135（数据库配置）" target="_blank" rel="external">http://blog.csdn.net/zjiang1994/article/details/52600135（数据库配置）</a></p>
<p><a href="http://www.jb51.net/article/39454.htm（MySQL——修改root密码的4种方法(以windows为例)）" target="_blank" rel="external">http://www.jb51.net/article/39454.htm（MySQL——修改root密码的4种方法(以windows为例)）</a></p>
<p><a href="https://lvwenhan.com/laravel/432.html（教程）" target="_blank" rel="external">https://lvwenhan.com/laravel/432.html（教程）</a></p>
<p><a href="http://stackoverflow.com/questions/37391068/composer-choose-the-command-line-php-you-want-to-use-there-is-nothing-there#" target="_blank" rel="external">http://stackoverflow.com/questions/37391068/composer-choose-the-command-line-php-you-want-to-use-there-is-nothing-there#</a></p>
<p>​</p>
<p>​</p>
</li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[rails whenever cron]]></title>
      <url>http://haitaochen.github.io/2016/12/16/rails-whenever-cron/</url>
      <content type="html"><![CDATA[<h4 id="Rails-利用whenever-配合Linux下的cron-实现周期性任务"><a href="#Rails-利用whenever-配合Linux下的cron-实现周期性任务" class="headerlink" title="Rails 利用whenever 配合Linux下的cron 实现周期性任务"></a>Rails 利用whenever 配合Linux下的cron 实现周期性任务</h4><h5 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h5> <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">gem &apos;whenever&apos;, :require =&gt; false</div></pre></td></tr></table></figure>
<h5 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h5> <figure class="highlight powershell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ cd /apps/my-great-project</div><div class="line">$ wheneverize .</div></pre></td></tr></table></figure>
<p>执行后生成：</p>
<blockquote>
<p>config/schedule.rb</p>
</blockquote>
<h5 id="更新cron-很关键，当初我就忘了"><a href="#更新cron-很关键，当初我就忘了" class="headerlink" title="更新cron(很关键，当初我就忘了)"></a>更新cron(很关键，当初我就忘了)</h5><a id="more"></a>
<figure class="highlight powershell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ whenever --update-crontab</div></pre></td></tr></table></figure>
<h5 id="执行"><a href="#执行" class="headerlink" title="执行"></a>执行</h5><figure class="highlight powershell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ whenever</div></pre></td></tr></table></figure>
<p>cron用法：</p>
<ul>
<li>如上的更新</li>
<li>查看cron 的任务列表</li>
</ul>
<blockquote>
<p>crontab -l</p>
</blockquote>
<ul>
<li>终止任务</li>
</ul>
<blockquote>
<p>crontab -e</p>
</blockquote>
<h5 id="举例"><a href="#举例" class="headerlink" title="举例"></a>举例</h5><p>1：schedule.rb:</p>
<figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">every <span class="number">1</span>.minute <span class="keyword">do</span> <span class="comment"># 1.minute 1.day 1.week 1.month 1.year is also supported</span></div><div class="line">  command <span class="string">"rm '/Users/cht/Desktop/cron/tmp/relation.png'"</span></div><div class="line"><span class="keyword">end</span></div><div class="line"><span class="comment">#举例1：每间隔一秒删除tmp文件夹下的图片文件</span></div></pre></td></tr></table></figure>
<p>2: schedule.rb:(执行模型操作，对数据库做周期性操作)</p>
<figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">every <span class="number">1</span>.minute <span class="keyword">do</span> <span class="comment"># 1.minute 1.day 1.week 1.month 1.year is also supported</span></div><div class="line">  runner <span class="string">"Post.shanchu"</span>, <span class="symbol">:environment</span> =&gt; <span class="symbol">:development</span></div><div class="line">  <span class="comment">#指定开发环境</span></div><div class="line"><span class="keyword">end</span></div><div class="line"><span class="comment">#举例2：没间隔一分钟删除Post表的第一条数据</span></div></pre></td></tr></table></figure>
<p>post.rb:</p>
<figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Post</span> &lt; ActiveRecord::Base</span></div><div class="line">	<span class="function"><span class="keyword">def</span> <span class="title">self</span>.<span class="title">shanchu</span></span></div><div class="line">		id = Post.first.id</div><div class="line">		Post.delete(id)</div><div class="line">	<span class="keyword">end</span></div><div class="line"><span class="keyword">end</span></div></pre></td></tr></table></figure>
<p>上述操作可以用以下命令直接在命令行里测试：</p>
<blockquote>
<p> bundle exec bin/rails runner -e development “Post.shanchu”</p>
</blockquote>
<p>nice</p>
<p>等一分钟，或许下一分钟</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[nginx笔记]]></title>
      <url>http://haitaochen.github.io/2016/12/09/%C2%96nginx%E7%AC%94%E8%AE%B0/</url>
      <content type="html"><![CDATA[<h5 id="nginx笔记"><a href="#nginx笔记" class="headerlink" title="nginx笔记"></a>nginx笔记</h5><blockquote>
<p>sudo ../sbin/nginx -c ~/nginx_build/conf/nginx.conf </p>
</blockquote>
<p>取消默认配置，选择自定义配置</p>
<blockquote>
<p> sudo pkill -9 nginx</p>
</blockquote>
<p>杀死nginx</p>
<a id="more"></a>
<p>添加如下，同时监听多个端口</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">server&#123;</div><div class="line">listen 9999;</div><div class="line">server_name localhost;</div><div class="line">location /&#123;</div><div class="line">proxy_pass http://localhost:8000/;</div><div class="line">&#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>完整配置如下</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div></pre></td><td class="code"><pre><div class="line">user  weike;</div><div class="line">worker_processes  2;</div><div class="line"></div><div class="line">#error_log  logs/error.log;</div><div class="line">#error_log  logs/error.log  notice;</div><div class="line">#error_log  logs/error.log  info;</div><div class="line"></div><div class="line">#pid        logs/nginx.pid;</div><div class="line"></div><div class="line"></div><div class="line">events &#123;</div><div class="line">    worker_connections  1024;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line">http &#123;</div><div class="line">    include       mime.types;</div><div class="line">    default_type  application/octet-stream;</div><div class="line"></div><div class="line">    #log_format  main  &apos;$remote_addr - $remote_user [$time_local] &quot;$request&quot; &apos;</div><div class="line">    #                  &apos;$status $body_bytes_sent &quot;$http_referer&quot; &apos;</div><div class="line">    #                  &apos;&quot;$http_user_agent&quot; &quot;$http_x_forwarded_for&quot;&apos;;</div><div class="line"></div><div class="line">    #access_log  logs/access.log  main;</div><div class="line"></div><div class="line">    sendfile        on;</div><div class="line">    #tcp_nopush     on;</div><div class="line"></div><div class="line">    #keepalive_timeout  0;</div><div class="line">    keepalive_timeout  65;</div><div class="line"></div><div class="line">    #gzip  on;</div><div class="line"></div><div class="line">   </div><div class="line"></div><div class="line"></div><div class="line">    upstream mio &#123;</div><div class="line">        server 127.0.0.1:3000;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">server&#123;</div><div class="line">listen 9999;</div><div class="line">server_name localhost;</div><div class="line">location /&#123;</div><div class="line">proxy_pass http://localhost:8000/;</div><div class="line">&#125;</div><div class="line"></div><div class="line">&#125;</div><div class="line">    server &#123;</div><div class="line">        listen       80;</div><div class="line">        server_name  localhost;</div><div class="line">        #server_name  161v0r4754.iask.in;</div><div class="line"></div><div class="line">        location / &#123;</div><div class="line">            proxy_pass http://mio;</div><div class="line">            proxy_redirect off;</div><div class="line">            proxy_set_header Host $http_host;</div><div class="line">            proxy_set_header X-Real-IP $remote_addr;</div><div class="line">            proxy_set_header X-Forwarded-Host $server_name;</div><div class="line">            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;</div><div class="line"></div><div class="line">                        #</div><div class="line">                        #CORS</div><div class="line">                        #</div><div class="line">                             if ($request_method = &apos;OPTIONS&apos;) &#123;</div><div class="line">                    add_header &apos;Access-Control-Allow-Origin&apos; &apos;*&apos;;</div><div class="line">                    add_header &apos;Access-Control-Allow-Methods&apos; &apos;GET, POST, OPTIONS&apos;;</div><div class="line">                    #</div><div class="line">                    # Custom headers and headers various browsers *should* be OK with but aren&apos;t</div><div class="line">                    #</div><div class="line">                    add_header &apos;Access-Control-Allow-Headers&apos; &apos;DNT,X-CustomHeader,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type&apos;;</div><div class="line">                    #</div><div class="line">                    # Tell client that this pre-flight info is valid for 20 days</div><div class="line">                    #</div><div class="line">                    add_header &apos;Access-Control-Max-Age&apos; 1728000;</div><div class="line">                    add_header &apos;Content-Type&apos; &apos;text/plain charset=UTF-8&apos;;</div><div class="line">                    add_header &apos;Content-Length&apos; 0;</div><div class="line">                    return 204;</div><div class="line">                 &#125;</div><div class="line">                 if ($request_method = &apos;POST&apos;) &#123;</div><div class="line">                    add_header &apos;Access-Control-Allow-Origin&apos; &apos;*&apos;;</div><div class="line">                    add_header &apos;Access-Control-Allow-Methods&apos; &apos;GET, POST, OPTIONS&apos;;</div><div class="line">                    add_header &apos;Access-Control-Allow-Headers&apos; &apos;DNT,X-CustomHeader,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type&apos;;</div><div class="line">                 &#125;</div><div class="line">                 if ($request_method = &apos;GET&apos;) &#123;</div><div class="line">                    add_header &apos;Access-Control-Allow-Origin&apos; &apos;*&apos;;</div><div class="line">                    add_header &apos;Access-Control-Allow-Methods&apos; &apos;GET, POST, OPTIONS&apos;;</div><div class="line">                    add_header &apos;Access-Control-Allow-Headers&apos; &apos;DNT,X-CustomHeader,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type&apos;;</div><div class="line">                 &#125;</div><div class="line">                 #</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        location /dash &#123;</div><div class="line">            alias /tmp;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        location /videolib &#123;</div><div class="line">            alias /home/weike/video/lib;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        location /videofile&#123;</div><div class="line">            alias /home/weike/cht/miot/public/system/dragonfly/development;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        location /upload &#123;</div><div class="line">            # Pass altered request body to this location</div><div class="line">            upload_pass   @test;</div><div class="line"></div><div class="line">            # Store files to this directory</div><div class="line">            # The directory is hashed, subdirectories 0 1 2 3 4 5 6 7 8 9 should exist</div><div class="line">            upload_store /home/weike/video/tmp;</div><div class="line"></div><div class="line">            # Allow uploaded files to be read only by user</div><div class="line">            upload_store_access user:r;</div><div class="line"></div><div class="line">            # Set specified fields in request body</div><div class="line">            upload_set_form_field $upload_field_name.name &quot;$upload_file_name&quot;;</div><div class="line">            upload_set_form_field $upload_field_name.content_type &quot;$upload_content_type&quot;;</div><div class="line">            upload_set_form_field $upload_field_name.path &quot;$upload_tmp_path&quot;;</div><div class="line"></div><div class="line">            # Inform backend about hash and size of a file</div><div class="line">            upload_aggregate_form_field &quot;$upload_field_name.md5&quot; &quot;$upload_file_md5&quot;;</div><div class="line">            upload_aggregate_form_field &quot;$upload_field_name.size&quot; &quot;$upload_file_size&quot;;</div><div class="line"></div><div class="line">            upload_pass_form_field &quot;^submit$|^description$&quot;;</div><div class="line"></div><div class="line">            # upload_cleanup 400 404 499 500-505;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        # Pass altered request body to a backend</div><div class="line">        location @test &#123;</div><div class="line">            proxy_pass   http://mio;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        client_max_body_size 4G;</div><div class="line">        keepalive_timeout 10;</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">    # HTTPS server</div><div class="line">    #</div><div class="line">    #server &#123;</div><div class="line">    #    listen       443 ssl;</div><div class="line">    #    server_name  localhost;</div><div class="line"></div><div class="line">    #    ssl_certificate      cert.pem;</div><div class="line">    #    ssl_certificate_key  cert.key;</div><div class="line"></div><div class="line">    #    ssl_session_cache    shared:SSL:1m;</div><div class="line">    #    ssl_session_timeout  5m;</div><div class="line"></div><div class="line">    #    ssl_ciphers  HIGH:!aNULL:!MD5;</div><div class="line">    #    ssl_prefer_server_ciphers  on;</div><div class="line"></div><div class="line">    #    location / &#123;</div><div class="line">    #        root   html;</div><div class="line">    #        index  index.html index.htm;</div><div class="line">    #    &#125;</div><div class="line">    #&#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>用python 开启8000端口</p>
<blockquote>
<p>python -m SimpleHTTPServer</p>
</blockquote>
<p><a href="http://learning.sohu.com/20160301/n439032760.shtml" target="_blank" rel="external">http://learning.sohu.com/20160301/n439032760.shtml</a></p>
<p><a href="http://blog.sina.com.cn/s/blog_6bd47f760100lawe.html" target="_blank" rel="external">http://blog.sina.com.cn/s/blog_6bd47f760100lawe.html</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[安装Typora问题]]></title>
      <url>http://haitaochen.github.io/2016/12/06/%E5%AE%89%E8%A3%85Typora%E9%97%AE%E9%A2%98/</url>
      <content type="html"><![CDATA[<p>为什么</p>
<p>两台学妹的电脑去装Typora</p>
<p>1台只能这样装<a href="http://www.linuxdiyf.com/linux/25196.html" target="_blank" rel="external">http://www.linuxdiyf.com/linux/25196.html</a></p>
<p>还有一台只能按官网装<a href="http://www.typora.io/#linux" target="_blank" rel="external">http://www.typora.io/#linux</a></p>
<h5 id="导出"><a href="#导出" class="headerlink" title="导出"></a>导出</h5><p>pg_dump -h localhost -U postgres [databasename] &gt; [filename].bak</p>
<h5 id="导入"><a href="#导入" class="headerlink" title="导入"></a>导入</h5><p>psql -h localhost -U postgres -d [databasename] &lt; [filename].bak</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[activeadmin]]></title>
      <url>http://haitaochen.github.io/2016/11/30/%C2%96activeadmin/</url>
      <content type="html"><![CDATA[<h4 id="ActiveAdmin"><a href="#ActiveAdmin" class="headerlink" title="ActiveAdmin"></a>ActiveAdmin</h4><h5 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h5><p>1.修改gemfile</p>
<p>因为rails 版本4以上</p>
<p>一种方式安装，亲测有效，安装快</p>
<blockquote>
<p>gem ‘activeadmin’, ‘~&gt; 1.0.0.pre4’</p>
</blockquote>
<a id="more"></a>
<p>另一种方式安装，亲测，一直卡在那儿，就没试</p>
<blockquote>
<p>gem ‘activeadmin’, github: ‘activeadmin’</p>
</blockquote>
<p>2.命令行安装</p>
<blockquote>
<p>rails g active_admin:install</p>
</blockquote>
<p>安装可能遇到问题:</p>
<ul>
<li>1.Please remove gem ‘meta_search’ and try again</li>
</ul>
<p>解决：如以上方式安装（版本问题）</p>
<ul>
<li>2.Sprockets::FileNotFound: couldn’t find file ‘jquery-ui/datepicker’ after upgrade to jquery-ui-rails 6.0</li>
</ul>
<p>解决：按提示来，然后在application.js添加</p>
<blockquote>
<p>//= require jquery-ui</p>
</blockquote>
<ul>
<li>3.数据库迁移</li>
</ul>
<blockquote>
<p>rake db:migrate</p>
</blockquote>
<ul>
<li>4.默认账号登不上去，提示重定向</li>
</ul>
<p>解决： 清除缓存cookie，关闭浏览器重新登录</p>
<p>3.管理已有model，做curd操作</p>
<blockquote>
<p>rails generate active_admin:resource MyModel</p>
</blockquote>
<h5 id="汉化"><a href="#汉化" class="headerlink" title="汉化"></a>汉化</h5><p>1.局部汉化</p>
<figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line">ActiveAdmin.register AdminUser <span class="keyword">do</span></div><div class="line">  menu <span class="symbol">:label</span> =&gt; <span class="string">"用户管理"</span></div><div class="line"></div><div class="line">  index <span class="keyword">do</span></div><div class="line">    column <span class="string">"邮箱"</span>,<span class="symbol">:email</span></div><div class="line">    column <span class="string">"最近登录"</span>,<span class="symbol">:current_sign_in_at</span></div><div class="line">    column <span class="string">"上次登录"</span>,<span class="symbol">:last_sign_in_at</span></div><div class="line">    column <span class="string">"登录次数"</span>,<span class="symbol">:sign_in_count</span></div><div class="line">    default_actions</div><div class="line">  <span class="keyword">end</span></div><div class="line"></div><div class="line">  filter <span class="symbol">:email</span>, <span class="symbol">:label=&gt;<span class="string">"邮箱"</span></span></div><div class="line"></div><div class="line">  form <span class="keyword">do</span> <span class="params">|f|</span></div><div class="line">    f.inputs <span class="string">"用户资料"</span> <span class="keyword">do</span></div><div class="line">      f.input <span class="symbol">:email</span> ,<span class="symbol">:label=&gt;<span class="string">"邮箱"</span></span></div><div class="line">      f.input <span class="symbol">:password</span> ,<span class="symbol">:label=&gt;<span class="string">"密码"</span></span></div><div class="line">      f.input <span class="symbol">:password_confirmation</span> ,<span class="symbol">:label=&gt;<span class="string">"重复密码"</span></span></div><div class="line">    <span class="keyword">end</span></div><div class="line">    f.actions</div><div class="line">  <span class="keyword">end</span></div><div class="line">  sidebar <span class="symbol">:help</span>,<span class="symbol">:only</span> =&gt; <span class="symbol">:index</span> <span class="keyword">do</span></div><div class="line">    <span class="string">"如果您在使用后台管理时遇到问题，请联系robot.zhu@icitymobile.com"</span></div><div class="line">  <span class="keyword">end</span></div><div class="line"><span class="keyword">end</span></div></pre></td></tr></table></figure>
<p>2.框架汉化</p>
<ul>
<li><p>1.修改config/application.rb文件，添加下面两行。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">config.i18n.available_locales = [:&quot;zh-CN&quot;, :en]</div><div class="line">config.i18n.default_locale = :&quot;zh-CN&quot;</div></pre></td></tr></table></figure>
</li>
<li><p>2.将zh-CN.yml复制到自己的 config/locales/目录下。</p>
<p>：<a href="https://github.com/activeadmin/activeadmin/blob/master/config/locales/zh-CN.yml" target="_blank" rel="external">https://github.com/activeadmin/activeadmin/blob/master/config/locales/zh-CN.yml</a></p>
<p>3.继续添加在zh-CN</p>
<p><a href="https://github.com/plataformatec/devise/wiki/I18n" target="_blank" rel="external">https://github.com/plataformatec/devise/wiki/I18n</a></p>
<p>4 可能报错</p>
<blockquote>
<p>ActionView::Template::Error (translation missing: zh-CN.time.formats.long):<br>​    1: insert_tag renderer_for(:index)<br>  app/admin/admin_user.rb:6:in `block (2 levels) in <top (required)="">‘</top></p>
</blockquote>
<p>解决：zh.yml 修改如下</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div><div class="line">183</div><div class="line">184</div><div class="line">185</div><div class="line">186</div><div class="line">187</div><div class="line">188</div><div class="line">189</div><div class="line">190</div><div class="line">191</div><div class="line">192</div><div class="line">193</div><div class="line">194</div><div class="line">195</div><div class="line">196</div><div class="line">197</div><div class="line">198</div><div class="line">199</div><div class="line">200</div><div class="line">201</div><div class="line">202</div><div class="line">203</div><div class="line">204</div><div class="line">205</div><div class="line">206</div><div class="line">207</div><div class="line">208</div><div class="line">209</div><div class="line">210</div><div class="line">211</div><div class="line">212</div><div class="line">213</div><div class="line">214</div><div class="line">215</div><div class="line">216</div><div class="line">217</div><div class="line">218</div><div class="line">219</div><div class="line">220</div><div class="line">221</div><div class="line">222</div><div class="line">223</div><div class="line">224</div><div class="line">225</div><div class="line">226</div><div class="line">227</div><div class="line">228</div><div class="line">229</div><div class="line">230</div><div class="line">231</div><div class="line">232</div><div class="line">233</div><div class="line">234</div><div class="line">235</div><div class="line">236</div><div class="line">237</div><div class="line">238</div><div class="line">239</div><div class="line">240</div><div class="line">241</div><div class="line">242</div><div class="line">243</div><div class="line">244</div><div class="line">245</div><div class="line">246</div><div class="line">247</div><div class="line">248</div><div class="line">249</div><div class="line">250</div><div class="line">251</div><div class="line">252</div><div class="line">253</div><div class="line">254</div><div class="line">255</div><div class="line">256</div><div class="line">257</div><div class="line">258</div><div class="line">259</div><div class="line">260</div><div class="line">261</div><div class="line">262</div><div class="line">263</div><div class="line">264</div><div class="line">265</div><div class="line">266</div><div class="line">267</div><div class="line">268</div><div class="line">269</div><div class="line">270</div><div class="line">271</div><div class="line">272</div><div class="line">273</div><div class="line">274</div><div class="line">275</div><div class="line">276</div><div class="line">277</div><div class="line">278</div><div class="line">279</div><div class="line">280</div><div class="line">281</div><div class="line">282</div><div class="line">283</div><div class="line">284</div><div class="line">285</div><div class="line">286</div><div class="line">287</div><div class="line">288</div><div class="line">289</div><div class="line">290</div><div class="line">291</div><div class="line">292</div><div class="line">293</div><div class="line">294</div><div class="line">295</div><div class="line">296</div><div class="line">297</div><div class="line">298</div><div class="line">299</div><div class="line">300</div><div class="line">301</div><div class="line">302</div><div class="line">303</div><div class="line">304</div><div class="line">305</div><div class="line">306</div><div class="line">307</div><div class="line">308</div><div class="line">309</div><div class="line">310</div></pre></td><td class="code"><pre><div class="line">&quot;zh-CN&quot;:</div><div class="line">  active_admin:</div><div class="line">    dashboard: &quot;控制面板&quot;</div><div class="line">    dashboard_welcome:</div><div class="line">      welcome: &quot;欢迎使用Active Admin. 这是默认的控制面板页.&quot;</div><div class="line">      call_to_action: &quot;若要添加新的面板内容, 请修改 &apos;app/admin/dashboard.rb&apos;&quot;</div><div class="line">    view: &quot;查看&quot;</div><div class="line">    edit: &quot;编辑&quot;</div><div class="line">    delete: &quot;删除&quot;</div><div class="line">    delete_confirmation: &quot;确定删除?&quot;</div><div class="line">    new_model: &quot;新建%&#123;model&#125;&quot;</div><div class="line">    edit_model: &quot;编辑%&#123;model&#125;&quot;</div><div class="line">    delete_model: &quot;删除%&#123;model&#125;&quot;</div><div class="line">    details: &quot;%&#123;model&#125;详情&quot;</div><div class="line">    cancel: &quot;取消&quot;</div><div class="line">    empty: &quot;清空&quot;</div><div class="line">    previous: &quot;上一个&quot;</div><div class="line">    next: &quot;下一个&quot;</div><div class="line">    download: &quot;下载:&quot;</div><div class="line">    has_many_new: &quot;新建一个%&#123;model&#125;&quot;</div><div class="line">    has_many_delete: &quot;删除&quot;</div><div class="line">    has_many_remove: &quot;清除&quot;</div><div class="line">    filters:</div><div class="line">      buttons:</div><div class="line">        filter: &quot;过滤&quot;</div><div class="line">        clear: &quot;清除条件&quot;</div><div class="line">      predicates:</div><div class="line">        contains: &quot;包含&quot;</div><div class="line">        equals: &quot;等于&quot;</div><div class="line">        starts_with: &quot;开头&quot;</div><div class="line">        ends_with: &quot;完与&quot;</div><div class="line">        greater_than: &quot;大于&quot;</div><div class="line">        less_than: &quot;小于&quot;</div><div class="line">    search_status:</div><div class="line">      headline: &quot;搜索条件：&quot;</div><div class="line">      current_scope: &quot;搜索范围：&quot;</div><div class="line">      current_filters: &quot;过滤条件：&quot;</div><div class="line">      no_current_filters: &quot;无&quot;</div><div class="line">    status_tag:</div><div class="line">      &quot;yes&quot;: &quot;是的&quot;</div><div class="line">      &quot;no&quot;: &quot;无&quot;</div><div class="line">    main_content: &quot;请执行 %&#123;model&#125;#main_content 来显示内容.&quot;</div><div class="line">    logout: &quot;退出&quot;</div><div class="line">    powered_by: &quot;Powered by %&#123;active_admin&#125; %&#123;version&#125;&quot;</div><div class="line">    sidebars:</div><div class="line">      filters: &quot;所有条件&quot;</div><div class="line">      search_status: &quot;搜索条件&quot;</div><div class="line">    pagination:</div><div class="line">      empty: &quot;暂时没有%&#123;model&#125;&quot;</div><div class="line">      one: &quot;显示 &lt;b&gt;1&lt;/b&gt; %&#123;model&#125;&quot;</div><div class="line">      one_page: &quot;显示 &lt;b&gt;所有 %&#123;n&#125;&lt;/b&gt; %&#123;model&#125;&quot;</div><div class="line">      multiple: &quot;显示所有 &lt;b&gt;%&#123;total&#125;&lt;/b&gt; %&#123;model&#125;中的&lt;b&gt;%&#123;from&#125;&amp;nbsp;-&amp;nbsp;%&#123;to&#125;&lt;/b&gt; 条&quot;</div><div class="line">      multiple_without_total: &quot;%&#123;model&#125;中的&lt;b&gt;%&#123;from&#125;&amp;nbsp;-&amp;nbsp;%&#123;to&#125;&lt;/b&gt; 条&quot;</div><div class="line">      entry:</div><div class="line">        one: &quot;条目&quot;</div><div class="line">        other: &quot;条目&quot;</div><div class="line">    any: &quot;任何&quot;</div><div class="line">    blank_slate:</div><div class="line">      content: &quot;暂时还没有%&#123;resource_name&#125;.&quot;</div><div class="line">      link: &quot;新建一个&quot;</div><div class="line">    dropdown_actions:</div><div class="line">      button_label: &quot;行动&quot;</div><div class="line">    batch_actions:</div><div class="line">      button_label: &quot;批处理&quot;</div><div class="line">      default_confirmation: &quot;你确定你要这样做？&quot;</div><div class="line">      delete_confirmation: &quot;你确定要删除所有%&#123;plural_model&#125;?&quot;</div><div class="line">      succesfully_destroyed:</div><div class="line">        one: &quot;成功删除 1 %&#123;model&#125;&quot;</div><div class="line">        other: &quot;成功删除 %&#123;count&#125; %&#123;plural_model&#125;&quot;</div><div class="line">      selection_toggle_explanation: &quot;(切换选择)&quot;</div><div class="line">      link: &quot;新建一个&quot;</div><div class="line">      action_label: &quot;%&#123;title&#125; 被选中&quot;</div><div class="line">      labels:</div><div class="line">        destroy: &quot;删除&quot;</div><div class="line">    comments:</div><div class="line">      body: &quot;内容&quot;</div><div class="line">      author: &quot;作者&quot;</div><div class="line">      title: &quot;评论&quot;</div><div class="line">      add: &quot;添加评论&quot;</div><div class="line">      resource: &quot;资源&quot;</div><div class="line">      no_comments_yet: &quot;暂时没有评论&quot;</div><div class="line">      title_content: &quot;(%&#123;count&#125;)条评论&quot;</div><div class="line">      errors:</div><div class="line">        empty_text: &quot;评论保存失败，内空不能为空.&quot;</div><div class="line">    devise:</div><div class="line">      username:</div><div class="line">        title: &quot;用户名&quot;</div><div class="line">      email:</div><div class="line">        title: &quot;邮箱&quot;</div><div class="line">      subdomain:</div><div class="line">        title: &quot;子域&quot;</div><div class="line">      password:</div><div class="line">        title: &quot;密码&quot;</div><div class="line">      login:</div><div class="line">        title: &quot;登录&quot;</div><div class="line">        remember_me: &quot;记住我&quot;</div><div class="line">        submit: &quot;登录&quot;</div><div class="line">      reset_password:</div><div class="line">        title: &quot;忘记了密码？&quot;</div><div class="line">        submit: &quot;重置我的密码&quot;</div><div class="line">      unlock:</div><div class="line">        title: &quot;重新发送送解锁命令&quot;</div><div class="line">        submit: &quot;重新发送送解锁命令&quot;</div><div class="line">      resend_confirmation_instructions:</div><div class="line">        title: &quot; 重新发送确认指示&quot;</div><div class="line">        submit: &quot; 重新发送确认指示&quot;</div><div class="line">      links:</div><div class="line">        sign_in: &quot;登录&quot;</div><div class="line">        forgot_your_password: &quot;忘记了密码？&quot;</div><div class="line">        sign_in_with_omniauth_provider: &quot;登入%&#123;provider&#125;&quot;</div><div class="line">    access_denied:</div><div class="line">      message: &quot;您无权处理此操作&quot;</div><div class="line">  date:</div><div class="line">    abbr_day_names:</div><div class="line">    - 日</div><div class="line">    - 一</div><div class="line">    - 二</div><div class="line">    - 三</div><div class="line">    - 四</div><div class="line">    - 五</div><div class="line">    - 六</div><div class="line">    abbr_month_names:</div><div class="line">    -</div><div class="line">    - 1月</div><div class="line">    - 2月</div><div class="line">    - 3月</div><div class="line">    - 4月</div><div class="line">    - 5月</div><div class="line">    - 6月</div><div class="line">    - 7月</div><div class="line">    - 8月</div><div class="line">    - 9月</div><div class="line">    - 10月</div><div class="line">    - 11月</div><div class="line">    - 12月</div><div class="line">    day_names:</div><div class="line">    - 星期日</div><div class="line">    - 星期一</div><div class="line">    - 星期二</div><div class="line">    - 星期三</div><div class="line">    - 星期四</div><div class="line">    - 星期五</div><div class="line">    - 星期六</div><div class="line">    formats:</div><div class="line">      default: ! &apos;%Y-%m-%d&apos;</div><div class="line">      long: ! &apos;%Y年%b%d日&apos;</div><div class="line">      short: ! &apos;%b%d日&apos;</div><div class="line">    month_names:</div><div class="line">    -</div><div class="line">    - 一月</div><div class="line">    - 二月</div><div class="line">    - 三月</div><div class="line">    - 四月</div><div class="line">    - 五月</div><div class="line">    - 六月</div><div class="line">    - 七月</div><div class="line">    - 八月</div><div class="line">    - 九月</div><div class="line">    - 十月</div><div class="line">    - 十一月</div><div class="line">    - 十二月</div><div class="line">    order:</div><div class="line">    - :year</div><div class="line">    - :month</div><div class="line">    - :day</div><div class="line">  datetime:</div><div class="line">    distance_in_words:</div><div class="line">      about_x_hours:</div><div class="line">        one: 大约一小时</div><div class="line">        other: 大约 %&#123;count&#125; 小时</div><div class="line">      about_x_months:</div><div class="line">        one: 大约一个月</div><div class="line">        other: 大约 %&#123;count&#125; 个月</div><div class="line">      about_x_years:</div><div class="line">        one: 大约一年</div><div class="line">        other: 大约 %&#123;count&#125; 年</div><div class="line">      almost_x_years:</div><div class="line">        one: 接近一年</div><div class="line">        other: 接近 %&#123;count&#125; 年</div><div class="line">      half_a_minute: 半分钟</div><div class="line">      less_than_x_minutes:</div><div class="line">        one: 不到一分钟</div><div class="line">        other: 不到 %&#123;count&#125; 分钟</div><div class="line">      less_than_x_seconds:</div><div class="line">        one: 不到一秒</div><div class="line">        other: 不到 %&#123;count&#125; 秒</div><div class="line">      over_x_years:</div><div class="line">        one: 一年多</div><div class="line">        other: ! &apos;%&#123;count&#125; 年多&apos;</div><div class="line">      x_days:</div><div class="line">        one: 一天</div><div class="line">        other: ! &apos;%&#123;count&#125; 天&apos;</div><div class="line">      x_minutes:</div><div class="line">        one: 一分钟</div><div class="line">        other: ! &apos;%&#123;count&#125; 分钟&apos;</div><div class="line">      x_months:</div><div class="line">        one: 一个月</div><div class="line">        other: ! &apos;%&#123;count&#125; 个月&apos;</div><div class="line">      x_seconds:</div><div class="line">        one: 一秒</div><div class="line">        other: ! &apos;%&#123;count&#125; 秒&apos;</div><div class="line">    prompts:</div><div class="line">      day: 日</div><div class="line">      hour: 时</div><div class="line">      minute: 分</div><div class="line">      month: 月</div><div class="line">      second: 秒</div><div class="line">      year: 年</div><div class="line">  errors: &amp;errors</div><div class="line">    format: ! &apos;%&#123;attribute&#125; %&#123;message&#125;&apos;</div><div class="line">    messages:</div><div class="line">      accepted: 必须是可被接受的</div><div class="line">      blank: 不能为空字符</div><div class="line">      confirmation: 与确认值不匹配</div><div class="line">      empty: 不能留空</div><div class="line">      equal_to: 必须等于 %&#123;count&#125;</div><div class="line">      even: 必须为双数</div><div class="line">      exclusion: 是保留关键字</div><div class="line">      greater_than: 必须大于 %&#123;count&#125;</div><div class="line">      greater_than_or_equal_to: 必须大于或等于 %&#123;count&#125;</div><div class="line">      inclusion: 不包含于列表中</div><div class="line">      invalid: 是无效的</div><div class="line">      less_than: 必须小于 %&#123;count&#125;</div><div class="line">      less_than_or_equal_to: 必须小于或等于 %&#123;count&#125;</div><div class="line">      not_a_number: 不是数字</div><div class="line">      not_an_integer: 必须是整数</div><div class="line">      odd: 必须为单数</div><div class="line">      record_invalid: ! &apos;验证失败: %&#123;errors&#125;&apos;</div><div class="line">      taken: 已经被使用</div><div class="line">      too_long: 过长（最长为 %&#123;count&#125; 个字符）</div><div class="line">      too_short: 过短（最短为 %&#123;count&#125; 个字符）</div><div class="line">      wrong_length: 长度非法（必须为 %&#123;count&#125; 个字符）</div><div class="line">    template:</div><div class="line">      body: 如下字段出现错误：</div><div class="line">      header:</div><div class="line">        one: 有 1 个错误发生导致「%&#123;model&#125;」无法被保存。</div><div class="line">        other: 有 %&#123;count&#125; 个错误发生导致「%&#123;model&#125;」无法被保存。</div><div class="line">  helpers:</div><div class="line">    select:</div><div class="line">      prompt: 请选择</div><div class="line">    submit:</div><div class="line">      create: 新增%&#123;model&#125;</div><div class="line">      submit: 储存%&#123;model&#125;</div><div class="line">      update: 更新%&#123;model&#125;</div><div class="line">  number:</div><div class="line">    currency:</div><div class="line">      format:</div><div class="line">        delimiter: ! &apos;,&apos;</div><div class="line">        format: ! &apos;%u %n&apos;</div><div class="line">        precision: 2</div><div class="line">        separator: .</div><div class="line">        significant: false</div><div class="line">        strip_insignificant_zeros: false</div><div class="line">        unit: CN¥</div><div class="line">    format:</div><div class="line">      delimiter: ! &apos;,&apos;</div><div class="line">      precision: 3</div><div class="line">      separator: .</div><div class="line">      significant: false</div><div class="line">      strip_insignificant_zeros: false</div><div class="line">    human:</div><div class="line">      decimal_units:</div><div class="line">        format: ! &apos;%n %u&apos;</div><div class="line">        units:</div><div class="line">          billion: 十亿</div><div class="line">          million: 百万</div><div class="line">          quadrillion: 千兆</div><div class="line">          thousand: 千</div><div class="line">          trillion: 兆</div><div class="line">          unit: &apos;&apos;</div><div class="line">      format:</div><div class="line">        delimiter: &apos;&apos;</div><div class="line">        precision: 1</div><div class="line">        significant: false</div><div class="line">        strip_insignificant_zeros: false</div><div class="line">      storage_units:</div><div class="line">        format: ! &apos;%n %u&apos;</div><div class="line">        units:</div><div class="line">          byte:</div><div class="line">            one: Byte</div><div class="line">            other: Bytes</div><div class="line">          gb: GB</div><div class="line">          kb: KB</div><div class="line">          mb: MB</div><div class="line">          tb: TB</div><div class="line">    percentage:</div><div class="line">      format:</div><div class="line">        delimiter: &apos;&apos;</div><div class="line">    precision:</div><div class="line">      format:</div><div class="line">        delimiter: &apos;&apos;</div><div class="line">  support:</div><div class="line">    array:</div><div class="line">      last_word_connector: ! &apos;, 和 &apos;</div><div class="line">      two_words_connector: ! &apos; 和 &apos;</div><div class="line">      words_connector: ! &apos;, &apos;</div><div class="line">  time:</div><div class="line">    am: 上午</div><div class="line">    formats:</div><div class="line">      default: ! &apos;%Y年%b%d日 %A %H:%M:%S %Z&apos;</div><div class="line">      long: ! &apos;%Y年%b%d日 %H:%M&apos;</div><div class="line">      short: ! &apos;%b%d日 %H:%M&apos;</div><div class="line">    pm: 下午</div><div class="line">  # remove these aliases after &apos;activemodel&apos; and &apos;activerecord&apos; namespaces are removed from Rails repository</div><div class="line">  activemodel:</div><div class="line">    errors:</div><div class="line">      &lt;&lt;: *errors</div><div class="line">  activerecord:</div><div class="line">    errors:</div><div class="line">      &lt;&lt;: *errors</div></pre></td></tr></table></figure>
<p>​</p>
</li>
</ul>
<h5 id="富文本编辑器（http-blog-csdn-net-feng88724-article-details-49181143）"><a href="#富文本编辑器（http-blog-csdn-net-feng88724-article-details-49181143）" class="headerlink" title="富文本编辑器（http://blog.csdn.net/feng88724/article/details/49181143）"></a>富文本编辑器（<a href="http://blog.csdn.net/feng88724/article/details/49181143）" target="_blank" rel="external">http://blog.csdn.net/feng88724/article/details/49181143）</a></h5><h6 id="1-ckeditor-亲测有效"><a href="#1-ckeditor-亲测有效" class="headerlink" title="1.ckeditor(亲测有效)"></a>1.ckeditor(亲测有效)</h6><pre><code>1、gem &apos;ckeditor&apos;
2、rails g ckeditor:install
3、rake db:migrate
4、active_admin.js里加上  //= require ckeditor/init
5、f.input [字段名], :as =&gt; :ckeditor
6、样式表中加上
</code></pre><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">#cke_article_content &#123;       //此处的id是ckeditor为字段生成的,格式是cke_[模型]_[字段]</div><div class="line">        width: 77.5%;   //宽度根据实际情况作调整</div><div class="line">        overflow: hidden;</div><div class="line">     &#125;</div></pre></td></tr></table></figure>
<h6 id="2-kindeditor（failed）"><a href="#2-kindeditor（failed）" class="headerlink" title="2.kindeditor（failed）"></a>2.kindeditor（failed）</h6><p>​    s1、gem ‘rails_kindeditor’<br>    2、rails generate rails_kindeditor:install<br>    3、f.input [字段名], :as =&gt; :kindeditor<br>    4、ke-<a href="http://lib.csdn.net/base/docker" target="_blank" rel="external">Container</a> ke-container-default<br>       这是kindeditor自动生成的div默认类，可另加一个类，在样式表加上：<br>       .[新加的类] {<br>        width: 79%;   //宽度根据实际情况作调整<br>       }</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[onenote]]></title>
      <url>http://haitaochen.github.io/2016/11/30/onenote/</url>
      <content type="html"><![CDATA[<h6 id="js控制a标签跳转"><a href="#js控制a标签跳转" class="headerlink" title="js控制a标签跳转"></a>js控制a标签跳转</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">var a = document.getElementById(&quot;aHref&quot;);  </div><div class="line">a.href = &apos;/user&apos;;     </div><div class="line">//取消&lt;a&gt;标签原先的onclick事件,使&lt;a&gt;标签点击后通过href跳转(因为无法用js跳转)^-^     </div><div class="line">a.setAttribute(&quot;onclick&quot;,&apos;&apos;);     </div><div class="line">//激发标签点击事件OVER        </div><div class="line">a.click(&quot;return false&quot;);</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">&lt;script&gt;</div><div class="line">  $(&quot;input:text&quot;).bind(&quot;input propertychange&quot;,function()&#123;</div><div class="line">    var length = $(this).val().length;</div><div class="line"> 　　console.log(length);//打印输入框字符长度</div><div class="line">  var a = 3;</div><div class="line">  var b =10;</div><div class="line">    $(&quot;#aa&quot;).attr(&quot;href&quot;,&quot;/search/ajax_search/&quot;+a+&quot;/&quot;+b+&quot;/&quot;);</div><div class="line"></div><div class="line"></div><div class="line">    var aa = document.getElementById(&quot;aa&quot;);  </div><div class="line">//取消&lt;a&gt;标签原先的onclick事件,使&lt;a&gt;标签点击后通过href跳转(因为无法用js跳转)^-^     </div><div class="line">aa.setAttribute(&quot;onclick&quot;,&apos;&apos;);     </div><div class="line">//激发标签点击事件OVER        </div><div class="line">aa.click(&quot;return false&quot;);   </div><div class="line">   // $(&quot;#aa&quot;).setAttribute(&quot;onclick&quot;,&apos;&apos;);  </div><div class="line">            //激发标签点击事件OVER  </div><div class="line">   // $(&quot;#aa&quot;).click(&quot;return false&quot;);  </div><div class="line"> &#125;);</div><div class="line">&lt;/script&gt;</div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[2条笔记]]></title>
      <url>http://haitaochen.github.io/2016/11/19/%C2%96two-notes/</url>
      <content type="html"><![CDATA[<h4 id="两条笔记"><a href="#两条笔记" class="headerlink" title="两条笔记"></a>两条笔记</h4><h5 id="ajax-返回并且不继承layout"><a href="#ajax-返回并且不继承layout" class="headerlink" title="ajax 返回并且不继承layout"></a>ajax 返回并且不继承layout</h5><pre><code>def edit
               @user = current_user
               @e =Publisher.new
               @video = Video.find(params[:id])
                @list = @video.video_files.order(&apos;created_at DESC&apos;)
               gon.test = @video.video_files.order(&apos;show_time ASC&apos;)
               gon.video = @video.mpd_path.to_s
               @videoFile = VideoFile.new
               @videoFile.video_id = @video.id

               @vtt = WebVTT.read(@@vtt_path.to_s + @video.vtt_path.to_s)
               gon.vtt = @vtt

               respond_to do |format|
                  format.html {render &apos;edit&apos;,layout:false}
               end
  end
</code></pre><a id="more"></a>
<h5 id="a标签删除后弹出确认框"><a href="#a标签删除后弹出确认框" class="headerlink" title="a标签删除后弹出确认框"></a>a标签删除后弹出确认框</h5><p>一开始以为<br> <a class="delete" onclick="javascript:return del(&lt;%= c.id %>)">删除</a><br>  function del() {<br>  var msg = “您真的确定要删除吗？请确认！”;<br>  if (confirm(msg)==true){ </p>
<p>   return true;<br>  }else{<br>    return false;<br>  }<br>} </p>
<p>然后不管点确认和取消都点击了a的链接</p>
<p>问题在于用onclick 并不能控制a 的执行顺序，需要用on()绑定点击事件</p>
<p>&lt;%= link_to ‘delete’,user_video_com_path(@user.id,c.video_id,c.id),method: :delete,:class=&gt;”dddd” %&gt;</p>
<p>$(“.dddd”).on(‘click’,function(){<br>       var msg = “您真的确定要删除吗？请确认！”;<br>  if (confirm(msg)==true){ </p>
<p>   return true;<br>  }else{<br>    return false;<br>  }<br>})</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[rails用pdfkit将html转化为pdf]]></title>
      <url>http://haitaochen.github.io/2016/11/14/pdfkit/</url>
      <content type="html"><![CDATA[<h4 id="rails-html-convert-to-pdf"><a href="#rails-html-convert-to-pdf" class="headerlink" title="rails html convert to pdf"></a>rails html convert to pdf</h4><blockquote>
<p>gem ‘pdfkit’<br>gem ‘wkhtmltopdf-binary’</p>
</blockquote>
<h4 id="Github"><a href="#Github" class="headerlink" title="Github"></a><a href="https://github.com/pdfkit/pdfkit" target="_blank" rel="external">Github</a></h4><h4 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h4><h6 id="gemfile"><a href="#gemfile" class="headerlink" title="gemfile"></a>gemfile</h6><p>gem ‘pdfkit’<br>gem ‘wkhtmltopdf-binary’</p>
<h4 id="Configuration"><a href="#Configuration" class="headerlink" title="Configuration"></a>Configuration</h4><h6 id="config-initializers-pdfkit-rb"><a href="#config-initializers-pdfkit-rb" class="headerlink" title="config/initializers/pdfkit.rb"></a>config/initializers/pdfkit.rb</h6><a id="more"></a>
<figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">PDFKit.configure <span class="keyword">do</span> <span class="params">|config|</span></div><div class="line"></div><div class="line">config.wkhtmltopdf = <span class="string">'/path/to/wkhtmltopdf'</span> </div><div class="line"></div><div class="line">config.default_options = &#123;</div><div class="line"></div><div class="line">  <span class="symbol">:page_size</span> =&gt; <span class="string">'Legal'</span>,</div><div class="line"></div><div class="line">  <span class="symbol">:print_media_type</span> =&gt; <span class="literal">true</span></div><div class="line"></div><div class="line">&#125;</div><div class="line">config.root_url = <span class="string">"http://localhost"</span></div><div class="line"></div><div class="line">config.protocol = <span class="string">'http'</span></div><div class="line"></div><div class="line">config.verbose = <span class="literal">false</span></div><div class="line"></div><div class="line"><span class="keyword">end</span></div></pre></td></tr></table></figure>
<blockquote>
<p> config.wkhtmltopdf = ‘/path/to/wkhtmltopdf’<br> (路径为wkhtmltopdf的安装目录，linux 下用which wkhtmltopdf命令获取)<br> 该文件自己手动创建，目录为： config/initializers/pdfkit.rb</p>
</blockquote>
<h6 id="application-rb-Rails3-or-environment-rb-Rails2"><a href="#application-rb-Rails3-or-environment-rb-Rails2" class="headerlink" title="application.rb(Rails3) or environment.rb(Rails2)"></a>application.rb(Rails3) or environment.rb(Rails2)</h6><blockquote>
<p>require ‘pdfkit’<br>config.middleware.use PDFKit::Middleware</p>
<p>该文件目录为：application.rb(Rails3) or environment.rb(Rails2)。修改如上即可</p>
</blockquote>
<h6 id="注"><a href="#注" class="headerlink" title="注"></a>注</h6><p>转出pdf 乱码问题</p>
<ul>
<li><ol>
<li>字符集编码问题  例如： 4/watch_onevideo_notes/724</li>
</ol>
</li>
<li><ol>
<li>系统未安装中文字体（因为pdfkit生成pdf功能其实调用的是webkit的子模块wkhtmltopdf(通过命令行方式)，所以pdfkit生成中文乱码其实是wkhtmltopdf中文乱码导致的；而wkhtmltopdf中文乱码是因为系统中不存在中文字体导致的 ）</li>
</ol>
<ul>
<li><h6 id="查看系统类型"><a href="#查看系统类型" class="headerlink" title="查看系统类型"></a>查看系统类型</h6><blockquote>
<p>​    cat /proc/version</p>
</blockquote>
</li>
<li><h6 id="查看中文字体"><a href="#查看中文字体" class="headerlink" title="查看中文字体"></a>查看中文字体</h6><blockquote>
<p>​    fc-list :lang=zh-cn</p>
</blockquote>
</li>
<li><h6 id="安装字体"><a href="#安装字体" class="headerlink" title="安装字体"></a>安装字体</h6><blockquote>
<p>​    sudo apt-get install -y –force-yes –no-install-recommends fonts-wqy-microhei</p>
<p>​    sudo apt-get install -y –force-yes –no-install-recommends ttf-wqy-zenhei</p>
</blockquote>
</li>
</ul>
</li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[搭建 Ruby on rails 环境]]></title>
      <url>http://haitaochen.github.io/2016/11/09/installrails/</url>
      <content type="html"><![CDATA[<h3 id="搭建-Ruby-on-Rails-环境"><a href="#搭建-Ruby-on-Rails-环境" class="headerlink" title="搭建 Ruby on Rails 环境"></a>搭建 Ruby on Rails 环境</h3><h4 id="以下安装过程在-Ubuntu-14-04-LTS"><a href="#以下安装过程在-Ubuntu-14-04-LTS" class="headerlink" title="以下安装过程在 Ubuntu 14.04 LTS"></a>以下安装过程在 Ubuntu 14.04 LTS</h4><h4 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h4><h5 id="更新系统软件"><a href="#更新系统软件" class="headerlink" title="更新系统软件"></a>更新系统软件</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo apt-get update &amp;&amp; sudo apt-get upgrade</div></pre></td></tr></table></figure>
<h5 id="安装必要的软件包"><a href="#安装必要的软件包" class="headerlink" title="安装必要的软件包"></a>安装必要的软件包</h5><a id="more"></a>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo apt-get install build-essential curl git</div></pre></td></tr></table></figure>
<h4 id="安装-RVM"><a href="#安装-RVM" class="headerlink" title="安装 RVM"></a>安装 RVM</h4><h5 id="导入公钥"><a href="#导入公钥" class="headerlink" title="导入公钥"></a>导入公钥</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">gpg --keyserver hkp://keys.gnupg.net --recv-keys 409B6B1796C275462A1703113804BB82D39DC0E3</div></pre></td></tr></table></figure>
<h5 id="安装-RVM-1"><a href="#安装-RVM-1" class="headerlink" title="安装 RVM"></a>安装 RVM</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">curl -sSL https://get.rvm.io | bash -s stable</div></pre></td></tr></table></figure>
<p>安装完成之后执行 <code>source $HOME/.rvm/scripts/rvm</code> 或重启终端。</p>
<p>执行 <code>rvm -v</code> 测试 RVM 是否安装成功</p>
<h4 id="安装-Ruby"><a href="#安装-Ruby" class="headerlink" title="安装 Ruby"></a>安装 Ruby</h4><h5 id="使用淘宝提供的下载源"><a href="#使用淘宝提供的下载源" class="headerlink" title="使用淘宝提供的下载源"></a>使用淘宝提供的下载源</h5><p>在终端中执行以下命令</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sed -i -E &apos;s!https?://cache.ruby-lang.org/pub/ruby!https://ruby.taobao.org/mirrors/ruby!&apos; $rvm_path/config/db</div></pre></td></tr></table></figure>
<h5 id="安装-Ruby-2-3-1"><a href="#安装-Ruby-2-3-1" class="headerlink" title="安装 Ruby 2.3.1"></a>安装 Ruby 2.3.1</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">rvm install 2.3.1</div></pre></td></tr></table></figure>
<h5 id="测试-Ruby-是否安装成功"><a href="#测试-Ruby-是否安装成功" class="headerlink" title="测试 Ruby 是否安装成功"></a>测试 Ruby 是否安装成功</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ruby -v</div></pre></td></tr></table></figure>
<h4 id="安装-Rails"><a href="#安装-Rails" class="headerlink" title="安装 Rails"></a>安装 Rails</h4><h5 id="使用淘宝的-RubyGems-镜像"><a href="#使用淘宝的-RubyGems-镜像" class="headerlink" title="使用淘宝的 RubyGems 镜像"></a>使用淘宝的 RubyGems 镜像</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">gem sources --add https://ruby.taobao.org/ --remove https://rubygems.org/</div></pre></td></tr></table></figure>
<h5 id="安装-Rails-1"><a href="#安装-Rails-1" class="headerlink" title="安装 Rails"></a>安装 Rails</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">gem install rails -v &apos;4.2.5.2&apos;  --no-ri</div></pre></td></tr></table></figure>
<p>使用 <code>rails -v</code> 测试 Rails 是否安装成功，如安装成功则输出 Rails 的版本</p>
<p>配置 Bundler 使用淘宝的镜像</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">bundle config mirror.https://rubygems.org https://ruby.taobao.org</div></pre></td></tr></table></figure>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[《Git教程-廖雪峰》]]></title>
      <url>http://haitaochen.github.io/2016/10/02/%E3%80%8AGit%E6%95%99%E7%A8%8B-%E5%BB%96%E9%9B%AA%E5%B3%B0%E3%80%8B/</url>
      <content type="html"><![CDATA[<p>消灭git 拦路虎，好教程！</p>
<a id="more"></a>
<p><a href="http://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000" target="_blank" rel="external">http://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000</a></p>
<h1 id="一-创建版本库"><a href="#一-创建版本库" class="headerlink" title="一.创建版本库"></a>一.创建版本库</h1><ul>
<li><p>①初始化一个Git仓库：git init</p>
</li>
<li><p>②添加文件到Git仓库：1.git add<file> ;  2.git commit</file></p>
<p>​</p>
</li>
</ul>
<h1 id="二-时光机穿梭"><a href="#二-时光机穿梭" class="headerlink" title="二.时光机穿梭"></a>二.时光机穿梭</h1><ul>
<li><p>①查看工作区状态，文件是否被修改过：git status</p>
</li>
<li><p>②查看修改的内容：git diff</p>
<h2 id="1-版本回退"><a href="#1-版本回退" class="headerlink" title="1.版本回退"></a>1.版本回退</h2><p>①HEAD:当前版本</p>
<p>②HEAD^:上个版本</p>
<p>③定位版本：<code>git reset --hard commit_id</code></p>
<p>④git log：穿梭前，用<code>git log</code>可以查看提交历史，以便确定要回退到哪个版本</p>
<p>⑤git reflog：要重返未来，用<code>git reflog</code>查看命令历史，以便确定要回到未来的哪个版本。</p>
<h2 id="2-工作区和暂存区"><a href="#2-工作区和暂存区" class="headerlink" title="2.工作区和暂存区"></a>2.工作区和暂存区</h2><p>①工作区：就是你在电脑里能看到的目录，比如我的<code>learngit</code>文件夹就是一个工作区</p>
<p>②版本库：工作区有一个隐藏目录<code>.git</code>，这个不算工作区，而是Git的版本库。</p>
<p>③暂存区：Git的版本库里存了很多东西，其中最重要的就是称为stage（或者叫index）的暂存区。           </p>
<pre><code>第一步是用`git add`把文件添加进去，实际上就是把文件修改添加到暂存区；

第二步是用`git commit`提交更改，实际上就是把暂存区的所有内容提交到当前分支。
</code></pre><h2 id="3-管理修改"><a href="#3-管理修改" class="headerlink" title="3.管理修改"></a>3.管理修改</h2><p>①每次修改，如果不add到暂存区，就不会加入到commit中</p>
<h2 id="4-撤销修改"><a href="#4-撤销修改" class="headerlink" title="4.撤销修改"></a>4.撤销修改</h2><p>①git checkout – file：丢弃工作区的修改</p>
<p>②git reset HEAD file：把暂存区的修改撤销掉，重新放回工作区</p>
<h2 id="5-删除文件"><a href="#5-删除文件" class="headerlink" title="5.删除文件"></a>5.删除文件</h2><p>①git rm：从版本库中删除文件</p>
<p>​</p>
</li>
</ul>
<h1 id="三-远程仓库"><a href="#三-远程仓库" class="headerlink" title="三.远程仓库"></a>三.远程仓库</h1><h2 id="1-添加远程库"><a href="#1-添加远程库" class="headerlink" title="1.添加远程库"></a>1.添加远程库</h2><p>①关联一个远程库：git remote add origin git@server-name:path/repo-name.git</p>
<p>②关联后第一次推送master分支的所有内容：<code>git push -u origin master</code></p>
<p>③此后，每次本地提交后，只要有必要，就可以使用命令<code>git push origin master</code>推送最新修改</p>
<p>ps:由于远程库是空的，我们第一次推送<code>master</code>分支时，加上了<code>-u</code>参数，Git不但会把本地的<code>master</code>分支内容推送的远程新的<code>master</code>分支，还会把本地的<code>master</code>分支和远程的<code>master</code>分支关联起来，在以后的推送或者拉取时就可以简化命令。</p>
<h2 id="2-从远程库克隆"><a href="#2-从远程库克隆" class="headerlink" title="2.从远程库克隆"></a>2.从远程库克隆</h2><p>①要克隆一个仓库，首先必须知道仓库的地址，然后使用<code>git clone</code>命令克隆</p>
<p>②Git支持多种协议，包括<code>https</code>，但通过<code>ssh</code>支持的原生<code>git</code>协议速度最快</p>
<h1 id="四-分支管理"><a href="#四-分支管理" class="headerlink" title="四.分支管理"></a>四.分支管理</h1><h2 id="1-创建与合并分支"><a href="#1-创建与合并分支" class="headerlink" title="1.创建与合并分支"></a>1.创建与合并分支</h2><p>①查看分支：git branch</p>
<p>②创建分支：git branch<name></name></p>
<p>③切换分支：git cheakout<name></name></p>
<p>④创建+切换分支：git cheakout -b <name></name></p>
<p>⑤合并某分支到当前分支：git merge<name></name></p>
<p>⑥删除分支：git branch - d <name></name></p>
<h2 id="2-解决冲突"><a href="#2-解决冲突" class="headerlink" title="2.解决冲突"></a>2.解决冲突</h2><p>①查看分支合并图：git log – graph</p>
<p>  eg：git log –graph –pretty =oneline –abbrev -commit</p>
<h2 id="3-分支管理策略"><a href="#3-分支管理策略" class="headerlink" title="3.分支管理策略"></a>3.分支管理策略</h2><p>①合并分支时加–no-ff参数：普通模式合并，合并后的历史有分支，禁用fast forward</p>
<p>eg:git log –no-ff-m”merge with no–ff”dev</p>
<h2 id="4-Bug分支"><a href="#4-Bug分支" class="headerlink" title="4.Bug分支"></a>4.Bug分支</h2><p>①git stash：把当前工作现场隐藏起来，去修复bug</p>
<p>②git stash pop：恢复工作现场同时删除stash内容</p>
<h2 id="5-Feature分支"><a href="#5-Feature分支" class="headerlink" title="5.Feature分支"></a>5.Feature分支</h2><p>①开发一个新feature，最好新建一个分支；</p>
<p>②如果要丢弃一个没有被合并过的分支，可以通过<code>git branch -D</code>强行删除</p>
<h2 id="6-多人协作"><a href="#6-多人协作" class="headerlink" title="6.多人协作"></a>6.多人协作</h2><p>①git remote -v：查看远程库信息</p>
<p>②git push origin branch-name：从本地推送分支</p>
<p>③git pull：推送失败时，抓取远程的新提交</p>
<p>④git checkout -b branch-name origin/branch-name：在本地创建和远程分支对应的分支（本地和远程分支的名称最好一致）</p>
<p>⑤git branch –set-upstream branch-name origin/branch-name：建立本地分支和远程分支的关联</p>
<h1 id="五-标签管理"><a href="#五-标签管理" class="headerlink" title="五.标签管理"></a>五.标签管理</h1><h2 id="1-创建标签"><a href="#1-创建标签" class="headerlink" title="1.创建标签"></a>1.创建标签</h2><p>①git tag <name>：新建一个标签（默认为HEAD，也可以指定commit id）</name></p>
<p>②git tag -a <tagname> -m “blablabla…”：可以指定标签信息</tagname></p>
<p>③git tag -s <tagname> -m “blablabla…”：可以用PGP签名信息</tagname></p>
<p>④git tag：查看所有标签</p>
<h2 id="2-操作标签"><a href="#2-操作标签" class="headerlink" title="2.操作标签"></a>2.操作标签</h2><p>①git push origin <tagname>：推送一个本地标签</tagname></p>
<p>②git push origin –tags：推送全部未推送过的本地标签</p>
<p>③git tag -d <tagname>：删除一个本地标签</tagname></p>
<p>④git push origin :refs/tags/<tagname>：删除一个远程标签</tagname></p>
<h1 id="六-使用GitHub"><a href="#六-使用GitHub" class="headerlink" title="六.使用GitHub"></a>六.使用GitHub</h1><p>①在GitHub上，可以任意Fork开源仓库；</p>
<p>②自己拥有Fork后的仓库的读写权限；</p>
<p>③可以推送pull request给官方仓库来贡献代码。</p>
<h1 id="七-自定义Git"><a href="#七-自定义Git" class="headerlink" title="七.自定义Git"></a>七.自定义Git</h1><h2 id="1-忽略特殊文件"><a href="#1-忽略特殊文件" class="headerlink" title="1.忽略特殊文件"></a>1.忽略特殊文件</h2><p>①忽略某些文件时，需要编写<code>.gitignore</code>；</p>
<h2 id="2-配置别名"><a href="#2-配置别名" class="headerlink" title="2.配置别名"></a>2.配置别名</h2><p><code>①我们只需要敲一行命令，告诉Git，以后st就表示status：``git config --global alias.st status</code></p>
<p> eg：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">$ git config --global alias.co checkout</div><div class="line">$ git config --global alias.ci commit</div><div class="line">$ git config --global alias.br branch</div><div class="line"></div><div class="line">$ git config --global alias.unstage &apos;reset HEAD&apos;</div><div class="line"></div><div class="line">$ git config --global alias.last &apos;log -1&apos;</div><div class="line"></div><div class="line"></div><div class="line">git config --global alias.lg &quot;log --color --graph --pretty=format:&apos;%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)&lt;%an&gt;%Creset&apos; --abbrev-commit&quot;</div></pre></td></tr></table></figure>
<h2 id="3-搭建Git服务器"><a href="#3-搭建Git服务器" class="headerlink" title="3.搭建Git服务器"></a>3.搭建Git服务器</h2><p>GitHub就是一个免费托管开源代码的远程仓库。但是对于某些视源代码如生命的商业公司来说，既不想公开源代码，又舍不得给GitHub交保护费，那就只能自己搭建一台Git服务器作为私有仓库使用。</p>
<p>例如大众点评code.dianpingoa.com</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[migration]]></title>
      <url>http://haitaochen.github.io/2016/10/01/migration/</url>
      <content type="html"><![CDATA[<blockquote>
<p>老windows下面的blog文件夹md文件都找不到了还好以前写的不多</p>
</blockquote>
<h3 id="拷贝需要文件"><a href="#拷贝需要文件" class="headerlink" title="拷贝需要文件"></a>拷贝需要文件</h3><blockquote>
<p>hexo/source<br>hexo/themes/next<br>_config.yml<br>package.json</p>
</blockquote>
<h3 id="在windows部署新的hexo"><a href="#在windows部署新的hexo" class="headerlink" title="在windows部署新的hexo"></a>在windows部署新的hexo</h3><ul>
<li>hexo init 创建一个新的hexo目录</li>
<li>拷贝package.json覆盖原有文件</li>
<li>npm install</li>
<li>拷贝剩余文件</li>
<li>hexo g</li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Hello World]]></title>
      <url>http://haitaochen.github.io/2016/09/29/hello-world/</url>
      <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="external">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="external">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="external">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="external">GitHub</a>.<br><a id="more"></a></p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo new <span class="string">"My New Post"</span></div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="external">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo server</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="external">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo generate</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="external">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo deploy</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="external">Deployment</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[我开始学python]]></title>
      <url>http://haitaochen.github.io/2016/09/29/python/</url>
      <content type="html"><![CDATA[<h1 id="写爬虫"><a href="#写爬虫" class="headerlink" title="写爬虫"></a>写爬虫</h1>]]></content>
    </entry>
    
  
  
</search>

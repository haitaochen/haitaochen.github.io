<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
    
    <entry>
      <title><![CDATA[《Git教程-廖雪峰》]]></title>
      <url>http://haitaochen.github.io/2016/10/02/%E3%80%8AGit%E6%95%99%E7%A8%8B-%E5%BB%96%E9%9B%AA%E5%B3%B0%E3%80%8B/</url>
      <content type="html"><![CDATA[<p>消灭git 拦路虎，好教程！</p>
<a id="more"></a>
<p><a href="http://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000" target="_blank" rel="external">http://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000</a></p>
<h1 id="一-创建版本库"><a href="#一-创建版本库" class="headerlink" title="一.创建版本库"></a>一.创建版本库</h1><ul>
<li><p>①初始化一个Git仓库：git init</p>
</li>
<li><p>②添加文件到Git仓库：1.git add<file> ;  2.git commit</file></p>
<p>​</p>
</li>
</ul>
<h1 id="二-时光机穿梭"><a href="#二-时光机穿梭" class="headerlink" title="二.时光机穿梭"></a>二.时光机穿梭</h1><ul>
<li><p>①查看工作区状态，文件是否被修改过：git status</p>
</li>
<li><p>②查看修改的内容：git diff</p>
<h2 id="1-版本回退"><a href="#1-版本回退" class="headerlink" title="1.版本回退"></a>1.版本回退</h2><p>①HEAD:当前版本</p>
<p>②HEAD^:上个版本</p>
<p>③定位版本：<code>git reset --hard commit_id</code></p>
<p>④git log：穿梭前，用<code>git log</code>可以查看提交历史，以便确定要回退到哪个版本</p>
<p>⑤git reflog：要重返未来，用<code>git reflog</code>查看命令历史，以便确定要回到未来的哪个版本。</p>
<h2 id="2-工作区和暂存区"><a href="#2-工作区和暂存区" class="headerlink" title="2.工作区和暂存区"></a>2.工作区和暂存区</h2><p>①工作区：就是你在电脑里能看到的目录，比如我的<code>learngit</code>文件夹就是一个工作区</p>
<p>②版本库：工作区有一个隐藏目录<code>.git</code>，这个不算工作区，而是Git的版本库。</p>
<p>③暂存区：Git的版本库里存了很多东西，其中最重要的就是称为stage（或者叫index）的暂存区。           </p>
<pre><code>第一步是用`git add`把文件添加进去，实际上就是把文件修改添加到暂存区；

第二步是用`git commit`提交更改，实际上就是把暂存区的所有内容提交到当前分支。
</code></pre><h2 id="3-管理修改"><a href="#3-管理修改" class="headerlink" title="3.管理修改"></a>3.管理修改</h2><p>①每次修改，如果不add到暂存区，就不会加入到commit中</p>
<h2 id="4-撤销修改"><a href="#4-撤销修改" class="headerlink" title="4.撤销修改"></a>4.撤销修改</h2><p>①git checkout – file：丢弃工作区的修改</p>
<p>②git reset HEAD file：把暂存区的修改撤销掉，重新放回工作区</p>
<h2 id="5-删除文件"><a href="#5-删除文件" class="headerlink" title="5.删除文件"></a>5.删除文件</h2><p>①git rm：从版本库中删除文件</p>
<p>​</p>
</li>
</ul>
<h1 id="三-远程仓库"><a href="#三-远程仓库" class="headerlink" title="三.远程仓库"></a>三.远程仓库</h1><h2 id="1-添加远程库"><a href="#1-添加远程库" class="headerlink" title="1.添加远程库"></a>1.添加远程库</h2><p>①关联一个远程库：git remote add origin git@server-name:path/repo-name.git</p>
<p>②关联后第一次推送master分支的所有内容：<code>git push -u origin master</code></p>
<p>③此后，每次本地提交后，只要有必要，就可以使用命令<code>git push origin master</code>推送最新修改</p>
<p>ps:由于远程库是空的，我们第一次推送<code>master</code>分支时，加上了<code>-u</code>参数，Git不但会把本地的<code>master</code>分支内容推送的远程新的<code>master</code>分支，还会把本地的<code>master</code>分支和远程的<code>master</code>分支关联起来，在以后的推送或者拉取时就可以简化命令。</p>
<h2 id="2-从远程库克隆"><a href="#2-从远程库克隆" class="headerlink" title="2.从远程库克隆"></a>2.从远程库克隆</h2><p>①要克隆一个仓库，首先必须知道仓库的地址，然后使用<code>git clone</code>命令克隆</p>
<p>②Git支持多种协议，包括<code>https</code>，但通过<code>ssh</code>支持的原生<code>git</code>协议速度最快</p>
<h1 id="四-分支管理"><a href="#四-分支管理" class="headerlink" title="四.分支管理"></a>四.分支管理</h1><h2 id="1-创建与合并分支"><a href="#1-创建与合并分支" class="headerlink" title="1.创建与合并分支"></a>1.创建与合并分支</h2><p>①查看分支：git branch</p>
<p>②创建分支：git branch<name></name></p>
<p>③切换分支：git cheakout<name></name></p>
<p>④创建+切换分支：git cheakout -b <name></name></p>
<p>⑤合并某分支到当前分支：git merge<name></name></p>
<p>⑥删除分支：git branch - d <name></name></p>
<h2 id="2-解决冲突"><a href="#2-解决冲突" class="headerlink" title="2.解决冲突"></a>2.解决冲突</h2><p>①查看分支合并图：git log – graph</p>
<p>  eg：git log –graph –pretty =oneline –abbrev -commit</p>
<h2 id="3-分支管理策略"><a href="#3-分支管理策略" class="headerlink" title="3.分支管理策略"></a>3.分支管理策略</h2><p>①合并分支时加–no-ff参数：普通模式合并，合并后的历史有分支，禁用fast forward</p>
<p>eg:git log –no-ff-m”merge with no–ff”dev</p>
<h2 id="4-Bug分支"><a href="#4-Bug分支" class="headerlink" title="4.Bug分支"></a>4.Bug分支</h2><p>①git stash：把当前工作现场隐藏起来，去修复bug</p>
<p>②git stash pop：恢复工作现场同时删除stash内容</p>
<h2 id="5-Feature分支"><a href="#5-Feature分支" class="headerlink" title="5.Feature分支"></a>5.Feature分支</h2><p>①开发一个新feature，最好新建一个分支；</p>
<p>②如果要丢弃一个没有被合并过的分支，可以通过<code>git branch -D</code>强行删除</p>
<h2 id="6-多人协作"><a href="#6-多人协作" class="headerlink" title="6.多人协作"></a>6.多人协作</h2><p>①git remote -v：查看远程库信息</p>
<p>②git push origin branch-name：从本地推送分支</p>
<p>③git pull：推送失败时，抓取远程的新提交</p>
<p>④git checkout -b branch-name origin/branch-name：在本地创建和远程分支对应的分支（本地和远程分支的名称最好一致）</p>
<p>⑤git branch –set-upstream branch-name origin/branch-name：建立本地分支和远程分支的关联</p>
<h1 id="五-标签管理"><a href="#五-标签管理" class="headerlink" title="五.标签管理"></a>五.标签管理</h1><h2 id="1-创建标签"><a href="#1-创建标签" class="headerlink" title="1.创建标签"></a>1.创建标签</h2><p>①git tag <name>：新建一个标签（默认为HEAD，也可以指定commit id）</name></p>
<p>②git tag -a <tagname> -m “blablabla…”：可以指定标签信息</tagname></p>
<p>③git tag -s <tagname> -m “blablabla…”：可以用PGP签名信息</tagname></p>
<p>④git tag：查看所有标签</p>
<h2 id="2-操作标签"><a href="#2-操作标签" class="headerlink" title="2.操作标签"></a>2.操作标签</h2><p>①git push origin <tagname>：推送一个本地标签</tagname></p>
<p>②git push origin –tags：推送全部未推送过的本地标签</p>
<p>③git tag -d <tagname>：删除一个本地标签</tagname></p>
<p>④git push origin :refs/tags/<tagname>：删除一个远程标签</tagname></p>
<h1 id="六-使用GitHub"><a href="#六-使用GitHub" class="headerlink" title="六.使用GitHub"></a>六.使用GitHub</h1><p>①在GitHub上，可以任意Fork开源仓库；</p>
<p>②自己拥有Fork后的仓库的读写权限；</p>
<p>③可以推送pull request给官方仓库来贡献代码。</p>
<h1 id="七-自定义Git"><a href="#七-自定义Git" class="headerlink" title="七.自定义Git"></a>七.自定义Git</h1><h2 id="1-忽略特殊文件"><a href="#1-忽略特殊文件" class="headerlink" title="1.忽略特殊文件"></a>1.忽略特殊文件</h2><p>①忽略某些文件时，需要编写<code>.gitignore</code>；</p>
<h2 id="2-配置别名"><a href="#2-配置别名" class="headerlink" title="2.配置别名"></a>2.配置别名</h2><p><code>①我们只需要敲一行命令，告诉Git，以后st就表示status：``git config --global alias.st status</code></p>
<p> eg：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">$ git config --global alias.co checkout</div><div class="line">$ git config --global alias.ci commit</div><div class="line">$ git config --global alias.br branch</div><div class="line"></div><div class="line">$ git config --global alias.unstage &apos;reset HEAD&apos;</div><div class="line"></div><div class="line">$ git config --global alias.last &apos;log -1&apos;</div><div class="line"></div><div class="line"></div><div class="line">git config --global alias.lg &quot;log --color --graph --pretty=format:&apos;%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)&lt;%an&gt;%Creset&apos; --abbrev-commit&quot;</div></pre></td></tr></table></figure>
<h2 id="3-搭建Git服务器"><a href="#3-搭建Git服务器" class="headerlink" title="3.搭建Git服务器"></a>3.搭建Git服务器</h2><p>GitHub就是一个免费托管开源代码的远程仓库。但是对于某些视源代码如生命的商业公司来说，既不想公开源代码，又舍不得给GitHub交保护费，那就只能自己搭建一台Git服务器作为私有仓库使用。</p>
<p>例如大众点评code.dianpingoa.com</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[migration]]></title>
      <url>http://haitaochen.github.io/2016/10/01/migration/</url>
      <content type="html"><![CDATA[<blockquote>
<p>老windows下面的blog文件夹md文件都找不到了还好以前写的不多</p>
</blockquote>
<h3 id="拷贝需要文件"><a href="#拷贝需要文件" class="headerlink" title="拷贝需要文件"></a>拷贝需要文件</h3><blockquote>
<p>hexo/source<br>hexo/themes/next<br>_config.yml<br>package.json</p>
</blockquote>
<h3 id="在windows部署新的hexo"><a href="#在windows部署新的hexo" class="headerlink" title="在windows部署新的hexo"></a>在windows部署新的hexo</h3><ul>
<li>hexo init 创建一个新的hexo目录</li>
<li>拷贝package.json覆盖原有文件</li>
<li>npm install</li>
<li>拷贝剩余文件</li>
<li>hexo g</li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Hello World]]></title>
      <url>http://haitaochen.github.io/2016/09/29/hello-world/</url>
      <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="external">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="external">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="external">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="external">GitHub</a>.<br><a id="more"></a></p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo new <span class="string">"My New Post"</span></div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="external">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo server</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="external">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo generate</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="external">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo deploy</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="external">Deployment</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[我开始学python]]></title>
      <url>http://haitaochen.github.io/2016/09/29/python/</url>
      <content type="html"><![CDATA[<h1 id="写爬虫"><a href="#写爬虫" class="headerlink" title="写爬虫"></a>写爬虫</h1>]]></content>
    </entry>
    
  
  
</search>
